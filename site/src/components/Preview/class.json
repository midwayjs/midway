{
  "files": {
    "README.md": {
      "content": "# my_midway_project\n\n## QuickStart\n\n<!-- add docs here for user -->\n\nsee [midway docs][midway] for more detail.\n\n### Development\n\n```bash\n$ npm i\n$ npm run dev\n$ open http://localhost:7001/\n```\n\n### Deploy\n\n```bash\n$ npm start\n```\n\n### npm scripts\n\n- Use `npm run lint` to check code style.\n- Use `npm test` to run unit test.\n\n\n[midway]: https://midwayjs.org\n"
    },
    "README.zh-CN.md": {
      "content": "# my_midway_project\n\n## 快速入门\n\n<!-- 在此次添加使用文档 -->\n\n如需进一步了解，参见 [midway 文档][midway]。\n\n### 本地开发\n\n```bash\n$ npm i\n$ npm run dev\n$ open http://localhost:7001/\n```\n\n### 部署\n\n```bash\n$ npm start\n```\n\n### 内置指令\n\n- 使用 `npm run lint` 来做代码风格检查。\n- 使用 `npm test` 来执行单元测试。\n\n\n[midway]: https://midwayjs.org\n"
    },
    "bootstrap.js": {
      "content": "const WebFramework = require('@midwayjs/koa').Framework;\nconst web = new WebFramework().configure({\n  port: 7001,\n});\n\nconst { Bootstrap } = require('@midwayjs/bootstrap');\nBootstrap.load(web).run();\n"
    },
    "jest.config.js": {
      "content": "module.exports = {\n  preset: 'ts-jest',\n  testEnvironment: 'node',\n  testPathIgnorePatterns: ['<rootDir>/test/fixtures'],\n  coveragePathIgnorePatterns: ['<rootDir>/test/'],\n};"
    },
    "package.json": {
      "content": "{\n  \"name\": \"my-midway-project\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"private\": true,\n  \"dependencies\": {\n    \"@midwayjs/bootstrap\": \"^2.3.0\",\n    \"@midwayjs/core\": \"^2.3.0\",\n    \"@midwayjs/decorator\": \"^2.3.0\",\n    \"@midwayjs/koa\": \"^2.3.0\",\n    \"@midwayjs/orm\": \"^2.13.2\",\n    \"koa-bodyparser\": \"^4.3.0\",\n    \"sqlite3\": \"^5.0.2\",\n    \"typeorm\": \"^0.2.37\"\n  },\n  \"devDependencies\": {\n    \"@midwayjs/cli\": \"^1.0.0\",\n    \"@midwayjs/luckyeye\": \"^1.0.0\",\n    \"@midwayjs/mock\": \"^2.3.0\",\n    \"@types/jest\": \"^26.0.10\",\n    \"@types/koa-bodyparser\": \"^4.3.0\",\n    \"@types/node\": \"14\",\n    \"cross-env\": \"^6.0.0\",\n    \"jest\": \"^26.4.0\",\n    \"mwts\": \"^1.0.5\",\n    \"ts-jest\": \"^26.2.0\",\n    \"typescript\": \"^4.0.0\"\n  },\n  \"engines\": {\n    \"node\": \">=12.0.0\"\n  },\n  \"scripts\": {\n    \"start\": \"NODE_ENV=production node ./bootstrap.js\",\n    \"dev\": \"cross-env NODE_ENV=local midway-bin dev --ts\",\n    \"test\": \"midway-bin test --ts\",\n    \"cov\": \"midway-bin cov --ts\",\n    \"lint\": \"mwts check\",\n    \"lint:fix\": \"mwts fix\",\n    \"ci\": \"npm run cov\",\n    \"build\": \"midway-bin build -c\",\n    \"check\": \"luckyeye\"\n  },\n  \"midway-bin-clean\": [\n    \".vscode/.tsbuildinfo\",\n    \"dist\"\n  ],\n  \"midway-luckyeye\": {\n    \"packages\": [\n      \"midway_v2\"\n    ]\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"\"\n  },\n  \"author\": \"anonymous\",\n  \"license\": \"MIT\"\n}\n"
    },
    "sandbox.config.json": {
      "content": "{\n  \"infiniteLoopProtection\": true,\n  \"hardReloadOnChange\": false,\n  \"view\": \"browser\",\n  \"template\": \"node\",\n  \"container\": { \"port\": 7001, \"node\": \"14\" }\n}\n"
    },
    "tsconfig.json": {
      "content": "{\n  \"compileOnSave\": true,\n  \"compilerOptions\": {\n    \"target\": \"ES2018\",\n    \"module\": \"commonjs\",\n    \"moduleResolution\": \"node\",\n    \"experimentalDecorators\": true,\n    \"emitDecoratorMetadata\": true,\n    \"inlineSourceMap\":true,\n    \"noImplicitThis\": true,\n    \"noUnusedLocals\": true,\n    \"stripInternal\": true,\n    \"skipLibCheck\": false,\n    \"pretty\": true,\n    \"declaration\": true,\n    \"typeRoots\": [ \"./typings\", \"./node_modules/@types\"],\n    \"outDir\": \"dist\"\n  },\n  \"exclude\": [\n    \"dist\",\n    \"node_modules\",\n    \"test\"\n  ]\n}"
    },
    "src/configuration.ts": {
      "content": "import { Configuration, App } from '@midwayjs/decorator';\nimport { Application } from '@midwayjs/koa';\nimport * as bodyParser from 'koa-bodyparser';\nimport * as orm from '@midwayjs/orm';\nimport { join } from 'path';\n\n@Configuration({\n  conflictCheck: true,\n  imports: [\n    orm                                                         // 加载 orm 组件\n  ],\n  importConfigs: [\n    join(__dirname, './config')\n  ]\n})\nexport class ContainerLifeCycle {\n  @App()\n  app: Application;\n\n  async onReady() {\n    // bodyparser options see https://github.com/koajs/bodyparser\n    this.app.use(bodyParser());\n  }\n}\n"
    },
    "src/interface.ts": {
      "content": "/**\n * @description User-Service parameters\n */\nexport interface IUserOptions {\n  uid: string;\n}\n"
    },
    "src/config/config.default.ts": {
      "content": "export const orm = {\n  type: 'sqlite',\n  // TODO use tmp\n  database: '/tmp/test.sqlite',\n  synchronize: true,\n  logging: true,\n};\n"
    },
    "src/controller/api.ts": {
      "content": "import { Inject, Controller, Get, Provide, Query } from '@midwayjs/decorator';\nimport { Context } from '@midwayjs/koa';\nimport { PhotoService } from '../service/photo';\nimport { UserService } from '../service/user';\n\n@Provide()\n@Controller('/api')\nexport class APIController {\n  @Inject()\n  ctx: Context;\n\n  @Inject()\n  userService: UserService;\n\n  @Inject()\n  photoService: PhotoService\n\n  @Get('/get_user')\n  async getUser(@Query() uid: string) {\n    const user = await this.userService.getUser({ uid });\n    return { success: true, message: 'OK', data: user };\n  }\n\n  @Get('/get_photo')\n  async getPhoto() {\n    const photo = await this.photoService.findPhoto();\n    return { success: true, message: 'OK', data: photo };\n  }\n}\n"
    },
    "src/controller/home.ts": {
      "content": "import { Controller, Get, Provide } from '@midwayjs/decorator';\n\n@Provide()\n@Controller('/')\nexport class HomeController {\n  @Get('/')\n  async home(): Promise<string> {\n    return 'Hello Midwayjs!';\n  }\n}\n"
    },
    "src/entity/photo.ts": {
      "content": "import { EntityModel } from '@midwayjs/orm';\nimport { Column, PrimaryGeneratedColumn } from 'typeorm';\n\n@EntityModel()\nexport class Photo {\n\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    length: 100\n  })\n  name: string;\n\n  @Column('text')\n  description: string;\n\n  @Column()\n  filename: string;\n\n  @Column(\"double\")\n  views: number;\n\n  @Column()\n  isPublished: boolean;\n}\n"
    },
    "src/service/photo.ts": {
      "content": "import { Provide } from '@midwayjs/decorator';\nimport { InjectEntityModel } from '@midwayjs/orm';\nimport { Photo } from '../entity/photo';\nimport { Repository } from 'typeorm';\n\n@Provide()\nexport class PhotoService {\n  @InjectEntityModel(Photo)\n  photoModel: Repository<Photo>;\n\n  async findPhoto () {\n    let allPhotos = await this.photoModel.find();\n    return allPhotos;\n  }\n}\n"
    },
    "src/service/user.ts": {
      "content": "import { Provide } from '@midwayjs/decorator';\nimport { IUserOptions } from '../interface';\n\n@Provide()\nexport class UserService {\n  async getUser(options: IUserOptions) {\n    return {\n      uid: options.uid,\n      username: 'mockedName',\n      phone: '12345678901',\n      email: 'xxx.xxx@xxx.com',\n    };\n  }\n}\n"
    },
    "test/controller/api.test.ts": {
      "content": "import { createApp, close, createHttpRequest } from '@midwayjs/mock';\nimport { Framework } from '@midwayjs/koa';\nimport * as assert from 'assert';\n\ndescribe('test/controller/home.test.ts', () => {\n\n  it('should POST /api/get_user', async () => {\n    // create app\n    const app = await createApp<Framework>();\n\n    // make request\n    const result = await createHttpRequest(app).post('/api/get_user').query({ uid: 123 });\n\n    // use expect by jest\n    expect(result.status).toBe(200);\n    expect(result.body.message).toBe('OK');\n\n    // or use assert\n    assert.deepStrictEqual(result.status, 200);\n    assert.deepStrictEqual(result.body.data.uid, '123');\n\n    // close app\n    await close(app);\n  });\n});\n"
    },
    "test/controller/home.test.ts": {
      "content": "import { createApp, close, createHttpRequest } from '@midwayjs/mock';\nimport { Framework } from '@midwayjs/koa';\nimport * as assert from 'assert';\n\ndescribe('test/controller/home.test.ts', () => {\n\n  it('should GET /', async () => {\n    // create app\n    const app = await createApp<Framework>();\n\n    // make request\n    const result = await createHttpRequest(app).get('/');\n\n    // use expect by jest\n    expect(result.status).toBe(200);\n    expect(result.text).toBe('Hello Midwayjs!');\n\n    // or use assert\n    assert.deepStrictEqual(result.status, 200);\n    assert.deepStrictEqual(result.text, 'Hello Midwayjs!');\n\n    // close app\n    await close(app);\n  });\n\n});\n"
    }
  }
}