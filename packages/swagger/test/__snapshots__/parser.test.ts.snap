// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`/test/parser.test.ts should fix issue#2286 with array example 1`] = `
{
  "components": {
    "schemas": {
      "Cat": {
        "properties": {
          "catds": {
            "description": "The breed of the Cat",
            "items": {
              "$ref": "#/components/schemas/Catd",
            },
            "required": false,
            "type": "array",
          },
          "name": {
            "description": "The name of the Cat",
            "example": "Kitty",
            "type": "string",
          },
        },
        "type": "object",
      },
      "Catd": {
        "properties": {
          "aged": {
            "description": "The age of the Cat",
            "example": 1,
            "type": "number",
          },
          "breedd": {
            "description": "The breed of the Cat",
            "example": "Maine Coon",
            "type": "string",
          },
          "named": {
            "description": "The name of the Cat",
            "example": "Kitty",
            "type": "string",
          },
        },
        "type": "object",
      },
    },
  },
  "info": {
    "contact": {},
    "description": "",
    "title": "",
    "version": "1.0.0",
  },
  "openapi": "3.0.1",
  "paths": {
    "/api/update_user": {
      "post": {
        "description": undefined,
        "operationId": "catcontroller_updateuser",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cat",
                },
              },
            },
            "description": "The found record",
          },
        },
        "summary": undefined,
        "tags": [
          "api",
        ],
      },
    },
  },
  "servers": [],
  "tags": [
    {
      "description": "api",
      "externalDocs": undefined,
      "name": "api",
    },
  ],
}
`;

exports[`/test/parser.test.ts should support deprecated field in ApiOperation 1`] = `
{
  "components": {},
  "info": {
    "contact": {},
    "description": "",
    "title": "",
    "version": "1.0.0",
  },
  "openapi": "3.0.1",
  "paths": {
    "/api/update_user": {
      "post": {
        "deprecated": true,
        "description": undefined,
        "operationId": "apicontroller_updateuser",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "summary": undefined,
        "tags": [
          "api",
        ],
      },
    },
  },
  "servers": [],
  "tags": [
    {
      "description": "api",
      "externalDocs": undefined,
      "name": "api",
    },
  ],
}
`;

exports[`test @ApiBody should test ApiBody 1`] = `
{
  "components": {
    "schemas": {
      "Cat": {
        "properties": {
          "age": {
            "description": "The age of the Cat",
            "example": 1,
            "type": "number",
          },
          "name": {
            "description": "The name of the Cat",
            "example": "Kitty",
            "type": "string",
          },
        },
        "type": "object",
      },
    },
  },
  "info": {
    "contact": {},
    "description": "",
    "title": "",
    "version": "1.0.0",
  },
  "openapi": "3.0.1",
  "paths": {
    "/api/update_user": {
      "post": {
        "description": undefined,
        "operationId": "apicontroller_updateuser",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/Cat",
                },
                "type": "array",
              },
            },
          },
          "description": "hello fields",
          "required": true,
        },
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "summary": undefined,
        "tags": [
          "api",
        ],
      },
    },
  },
  "servers": [],
  "tags": [
    {
      "description": "api",
      "externalDocs": undefined,
      "name": "api",
    },
  ],
}
`;

exports[`test @ApiBody should test ApiBody with array 1`] = `
{
  "components": {
    "schemas": {
      "Cat": {
        "properties": {
          "age": {
            "description": "The age of the Cat",
            "example": 1,
            "type": "number",
          },
          "name": {
            "description": "The name of the Cat",
            "example": "Kitty",
            "type": "string",
          },
        },
        "type": "object",
      },
    },
  },
  "info": {
    "contact": {},
    "description": "",
    "title": "",
    "version": "1.0.0",
  },
  "openapi": "3.0.1",
  "paths": {
    "/api/update_user": {
      "post": {
        "description": undefined,
        "operationId": "apicontroller_updateuser",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/Cat",
                },
                "type": "array",
              },
            },
          },
          "description": undefined,
          "required": true,
        },
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "summary": undefined,
        "tags": [
          "api",
        ],
      },
    },
  },
  "servers": [],
  "tags": [
    {
      "description": "api",
      "externalDocs": undefined,
      "name": "api",
    },
  ],
}
`;

exports[`test @ApiBody should test ApiBody with binary 1`] = `
{
  "components": {},
  "info": {
    "contact": {},
    "description": "",
    "title": "",
    "version": "1.0.0",
  },
  "openapi": "3.0.1",
  "paths": {
    "/api/update_user": {
      "post": {
        "description": undefined,
        "operationId": "apicontroller_updateuser",
        "parameters": [],
        "requestBody": {
          "content": {
            "image/png": {
              "schema": {
                "format": "binary",
                "type": "string",
              },
            },
          },
          "description": undefined,
          "required": true,
        },
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "summary": undefined,
        "tags": [
          "api",
        ],
      },
    },
  },
  "servers": [],
  "tags": [
    {
      "description": "api",
      "externalDocs": undefined,
      "name": "api",
    },
  ],
}
`;

exports[`test @ApiBody should test ApiBody with contentType 1`] = `
{
  "components": {
    "schemas": {
      "UploadType": {
        "properties": {
          "file": {
            "description": "this is file test",
            "format": "binary",
            "type": "string",
          },
          "name": {
            "description": "The name of the Cat",
            "example": "Kitty",
            "type": "string",
          },
        },
        "type": "object",
      },
    },
  },
  "info": {
    "contact": {},
    "description": "",
    "title": "",
    "version": "1.0.0",
  },
  "openapi": "3.0.1",
  "paths": {
    "/api/update_user": {
      "post": {
        "description": undefined,
        "operationId": "apicontroller_updateuser",
        "parameters": [],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UploadType",
              },
            },
          },
          "description": undefined,
          "required": true,
        },
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "summary": undefined,
        "tags": [
          "api",
        ],
      },
    },
  },
  "servers": [],
  "tags": [
    {
      "description": "api",
      "externalDocs": undefined,
      "name": "api",
    },
  ],
}
`;

exports[`test @ApiBody should test ApiBody with contentType and files 1`] = `
{
  "components": {
    "schemas": {
      "UploadType": {
        "properties": {
          "files": {
            "items": {
              "description": "this is file test",
              "format": "binary",
              "type": "string",
            },
            "type": "array",
          },
          "name": {
            "description": "The name of the Cat",
            "example": "Kitty",
            "type": "string",
          },
        },
        "type": "object",
      },
    },
  },
  "info": {
    "contact": {},
    "description": "",
    "title": "",
    "version": "1.0.0",
  },
  "openapi": "3.0.1",
  "paths": {
    "/api/update_user": {
      "post": {
        "description": undefined,
        "operationId": "apicontroller_updateuser",
        "parameters": [],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UploadType",
              },
            },
          },
          "description": undefined,
          "required": true,
        },
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "summary": undefined,
        "tags": [
          "api",
        ],
      },
    },
  },
  "servers": [],
  "tags": [
    {
      "description": "api",
      "externalDocs": undefined,
      "name": "api",
    },
  ],
}
`;

exports[`test @ApiBody should test ApiBody with example 1`] = `
{
  "components": {
    "schemas": {
      "Cat": {
        "properties": {
          "age": {
            "description": "The age of the Cat",
            "example": 1,
            "type": "number",
          },
          "name": {
            "description": "The name of the Cat",
            "example": "Kitty",
            "type": "string",
          },
        },
        "type": "object",
      },
    },
  },
  "info": {
    "contact": {},
    "description": "",
    "title": "",
    "version": "1.0.0",
  },
  "openapi": "3.0.1",
  "paths": {
    "/api/update_user": {
      "post": {
        "description": undefined,
        "operationId": "apicontroller_updateuser",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "example": "Fluffy",
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/Cat",
                },
                "type": "array",
              },
            },
          },
          "description": undefined,
          "required": true,
        },
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "summary": undefined,
        "tags": [
          "api",
        ],
      },
    },
  },
  "servers": [],
  "tags": [
    {
      "description": "api",
      "externalDocs": undefined,
      "name": "api",
    },
  ],
}
`;

exports[`test @ApiBody should test ApiBody with examples 1`] = `
{
  "components": {
    "schemas": {
      "Cat": {
        "properties": {
          "age": {
            "description": "The age of the Cat",
            "example": 1,
            "type": "number",
          },
          "name": {
            "description": "The name of the Cat",
            "example": "Kitty",
            "type": "string",
          },
        },
        "type": "object",
      },
    },
  },
  "info": {
    "contact": {},
    "description": "",
    "title": "",
    "version": "1.0.0",
  },
  "openapi": "3.0.1",
  "paths": {
    "/api/update_user": {
      "post": {
        "description": undefined,
        "operationId": "apicontroller_updateuser",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "example1": {
                  "summary": "An example of a cat",
                },
                "example2": {
                  "$ref": "#/components/examples/hamster",
                },
              },
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/Cat",
                },
                "type": "array",
              },
            },
          },
          "description": undefined,
          "required": true,
        },
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "summary": undefined,
        "tags": [
          "api",
        ],
      },
    },
  },
  "servers": [],
  "tags": [
    {
      "description": "api",
      "externalDocs": undefined,
      "name": "api",
    },
  ],
}
`;

exports[`test @ApiBody should test ApiBody with formData 1`] = `
{
  "components": {
    "schemas": {
      "Cat": {
        "properties": {
          "age": {
            "description": "The age of the Cat",
            "example": 1,
            "type": "number",
          },
          "name": {
            "description": "The name of the Cat",
            "example": "Kitty",
            "type": "string",
          },
        },
        "type": "object",
      },
    },
  },
  "info": {
    "contact": {},
    "description": "",
    "title": "",
    "version": "1.0.0",
  },
  "openapi": "3.0.1",
  "paths": {
    "/api/update_user": {
      "post": {
        "description": undefined,
        "operationId": "apicontroller_updateuser",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded:": {
              "encoding": {
                "color": {
                  "explode": false,
                  "style": "form",
                },
              },
              "schema": {
                "properties": {
                  "fav_number": {
                    "type": "integer",
                  },
                  "name": {
                    "type": "string",
                  },
                },
                "required": [
                  "name",
                ],
                "type": "object",
              },
            },
          },
          "description": undefined,
          "required": true,
        },
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "summary": undefined,
        "tags": [
          "api",
        ],
      },
    },
  },
  "servers": [],
  "tags": [
    {
      "description": "api",
      "externalDocs": undefined,
      "name": "api",
    },
  ],
}
`;

exports[`test @ApiBody should test ApiBody with multipart request 1`] = `
{
  "components": {},
  "info": {
    "contact": {},
    "description": "",
    "title": "",
    "version": "1.0.0",
  },
  "openapi": "3.0.1",
  "paths": {
    "/api/update_user": {
      "post": {
        "description": undefined,
        "operationId": "apicontroller_updateuser",
        "parameters": [],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "fav_number": {
                    "type": "integer",
                  },
                  "file": {
                    "format": "binary",
                    "type": "string",
                  },
                  "name": {
                    "type": "string",
                  },
                },
                "required": [
                  "name",
                ],
                "type": "object",
              },
            },
          },
          "description": undefined,
          "required": true,
        },
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "summary": undefined,
        "tags": [
          "api",
        ],
      },
    },
  },
  "servers": [],
  "tags": [
    {
      "description": "api",
      "externalDocs": undefined,
      "name": "api",
    },
  ],
}
`;

exports[`test @ApiExtension should test ApiExtension 1`] = `
{
  "components": {},
  "info": {
    "contact": {},
    "description": "",
    "title": "",
    "version": "1.0.0",
  },
  "openapi": "3.0.1",
  "paths": {
    "/api/get_user": {
      "get": {
        "description": undefined,
        "operationId": "apicontroller_getuser",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "summary": undefined,
        "tags": [
          "api",
        ],
        "x-hello": {
          "hello": "world",
        },
      },
    },
  },
  "servers": [],
  "tags": [
    {
      "description": "api",
      "externalDocs": undefined,
      "name": "api",
    },
  ],
}
`;

exports[`test @ApiHeaders and @ApiHeader should test ApiHeader 1`] = `
{
  "components": {},
  "info": {
    "contact": {},
    "description": "",
    "title": "",
    "version": "1.0.0",
  },
  "openapi": "3.0.1",
  "paths": {
    "/api/get_user": {
      "get": {
        "description": undefined,
        "operationId": "apicontroller_getuser",
        "parameters": [
          {
            "description": "this is test one",
            "in": "header",
            "name": "x-test-one",
            "required": undefined,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "summary": undefined,
        "tags": [
          "api",
        ],
      },
    },
  },
  "servers": [],
  "tags": [
    {
      "description": "api",
      "externalDocs": undefined,
      "name": "api",
    },
  ],
}
`;

exports[`test @ApiHeaders and @ApiHeader should test ApiHeader in method 1`] = `
{
  "components": {},
  "info": {
    "contact": {},
    "description": "",
    "title": "",
    "version": "1.0.0",
  },
  "openapi": "3.0.1",
  "paths": {
    "/api/get_user": {
      "get": {
        "description": undefined,
        "operationId": "apicontroller_getuser",
        "parameters": [
          {
            "description": "this is test one",
            "in": "header",
            "name": "x-test-one",
            "required": undefined,
            "schema": {
              "type": "string",
            },
          },
          {
            "description": "this is test two",
            "in": "header",
            "name": "x-test-two",
            "required": undefined,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "summary": undefined,
        "tags": [
          "api",
        ],
      },
    },
  },
  "servers": [],
  "tags": [
    {
      "description": "api",
      "externalDocs": undefined,
      "name": "api",
    },
  ],
}
`;

exports[`test @ApiHeaders and @ApiHeader should test ApiHeaders in class and method 1`] = `
{
  "components": {},
  "info": {
    "contact": {},
    "description": "",
    "title": "",
    "version": "1.0.0",
  },
  "openapi": "3.0.1",
  "paths": {
    "/api/get_user": {
      "get": {
        "description": undefined,
        "operationId": "apicontroller_getuser",
        "parameters": [
          {
            "description": "this is test four",
            "in": "header",
            "name": "x-test-four",
            "required": undefined,
            "schema": {
              "type": "string",
            },
          },
          {
            "description": "this is test three",
            "in": "header",
            "name": "x-test-three",
            "required": undefined,
            "schema": {
              "type": "string",
            },
          },
          {
            "description": "this is test two",
            "in": "header",
            "name": "x-test-two",
            "required": undefined,
            "schema": {
              "type": "string",
            },
          },
          {
            "description": "this is test one",
            "in": "header",
            "name": "x-test-one",
            "required": undefined,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "summary": undefined,
        "tags": [
          "api",
        ],
      },
    },
    "/api/get_user2": {
      "get": {
        "description": undefined,
        "operationId": "apicontroller_anothermethod",
        "parameters": [
          {
            "description": "this is test two",
            "in": "header",
            "name": "x-test-two",
            "required": undefined,
            "schema": {
              "type": "string",
            },
          },
          {
            "description": "this is test one",
            "in": "header",
            "name": "x-test-one",
            "required": undefined,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "summary": undefined,
        "tags": [
          "api",
        ],
      },
    },
  },
  "servers": [],
  "tags": [
    {
      "description": "api",
      "externalDocs": undefined,
      "name": "api",
    },
  ],
}
`;

exports[`test @ApiOperation should test custom operationId 1`] = `
{
  "components": {},
  "info": {
    "contact": {},
    "description": "",
    "title": "",
    "version": "1.0.0",
  },
  "openapi": "3.0.1",
  "paths": {
    "/api/update_user": {
      "post": {
        "description": undefined,
        "operationId": "updateUser",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "summary": undefined,
        "tags": [
          "api",
        ],
      },
    },
  },
  "servers": [],
  "tags": [
    {
      "description": "api",
      "externalDocs": undefined,
      "name": "api",
    },
  ],
}
`;

exports[`test @ApiOperation should test deprecated 1`] = `
{
  "components": {},
  "info": {
    "contact": {},
    "description": "",
    "title": "",
    "version": "1.0.0",
  },
  "openapi": "3.0.1",
  "paths": {
    "/api/update_user": {
      "post": {
        "deprecated": true,
        "description": undefined,
        "operationId": "apicontroller_updateuser",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "summary": undefined,
        "tags": [
          "api",
        ],
      },
    },
  },
  "servers": [],
  "tags": [
    {
      "description": "api",
      "externalDocs": undefined,
      "name": "api",
    },
  ],
}
`;

exports[`test @ApiOperation should test summary and description 1`] = `
{
  "components": {},
  "info": {
    "contact": {},
    "description": "",
    "title": "",
    "version": "1.0.0",
  },
  "openapi": "3.0.1",
  "paths": {
    "/api/update_user": {
      "post": {
        "description": "update user description",
        "operationId": "apicontroller_updateuser",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "summary": "update user",
        "tags": [
          "api",
        ],
      },
    },
  },
  "servers": [],
  "tags": [
    {
      "description": "api",
      "externalDocs": undefined,
      "name": "api",
    },
  ],
}
`;

exports[`test @ApiOperation should test tags 1`] = `
{
  "components": {},
  "info": {
    "contact": {},
    "description": "",
    "title": "",
    "version": "1.0.0",
  },
  "openapi": "3.0.1",
  "paths": {
    "/api/update_user": {
      "post": {
        "description": undefined,
        "operationId": "apicontroller_updateuser",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "summary": undefined,
        "tags": [
          "tag1",
          "tag2",
        ],
      },
    },
  },
  "servers": [],
  "tags": [
    {
      "description": "api",
      "externalDocs": undefined,
      "name": "api",
    },
    {
      "description": "",
      "externalDocs": undefined,
      "name": "tag1",
    },
    {
      "description": "",
      "externalDocs": undefined,
      "name": "tag2",
    },
  ],
}
`;

exports[`test @ApiParam should test with @ApiParam decorator 1`] = `
{
  "components": {},
  "info": {
    "contact": {},
    "description": "",
    "title": "",
    "version": "1.0.0",
  },
  "openapi": "3.0.1",
  "paths": {
    "/api/get_user/{id}": {
      "get": {
        "description": undefined,
        "operationId": "apicontroller_getuser",
        "parameters": [
          {
            "description": "The id of the user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "number",
            },
          },
        ],
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "summary": undefined,
        "tags": [
          "api",
        ],
      },
    },
  },
  "servers": [],
  "tags": [
    {
      "description": "api",
      "externalDocs": undefined,
      "name": "api",
    },
  ],
}
`;

exports[`test @ApiParam should test with @Param decorator 1`] = `
{
  "components": {},
  "info": {
    "contact": {},
    "description": "",
    "title": "",
    "version": "1.0.0",
  },
  "openapi": "3.0.1",
  "paths": {
    "/api/get_user/{id}": {
      "get": {
        "description": undefined,
        "operationId": "apicontroller_getuser",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "number",
            },
          },
        ],
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "summary": undefined,
        "tags": [
          "api",
        ],
      },
    },
  },
  "servers": [],
  "tags": [
    {
      "description": "api",
      "externalDocs": undefined,
      "name": "api",
    },
  ],
}
`;

exports[`test @ApiProperty should parse base type 1`] = `
{
  "properties": {
    "breeds": {
      "description": "The name of the Catage",
      "example": [
        "1",
      ],
      "items": {
        "type": "string",
      },
      "nullable": true,
      "type": "array",
      "uniqueItems": true,
    },
  },
  "type": "object",
}
`;

exports[`test @ApiProperty should parse extends base 1`] = `
{
  "properties": {
    "a": {
      "type": "number",
    },
    "created_at": {
      "format": "date-time",
      "type": "string",
    },
  },
  "type": "object",
}
`;

exports[`test @ApiProperty should parse extends base 2`] = `
{
  "properties": {
    "b": {
      "type": "number",
    },
    "created_at": {
      "format": "date-time",
      "type": "string",
    },
  },
  "type": "object",
}
`;

exports[`test @ApiProperty should parse extends base 3`] = `
{
  "properties": {
    "c": {
      "type": "number",
    },
    "created_at": {
      "format": "date-time",
      "type": "string",
    },
  },
  "type": "object",
}
`;

exports[`test @ApiProperty should parse ref schema with function 1`] = `
{
  "properties": {
    "albums": {
      "items": {
        "$ref": "#/components/schemas/Album",
      },
      "type": "array",
    },
    "id": {
      "type": "number",
    },
    "name": {
      "type": "string",
    },
  },
  "type": "object",
}
`;

exports[`test @ApiProperty should parse ref schema with function 2`] = `
{
  "properties": {
    "id": {
      "type": "number",
    },
    "name": {
      "type": "string",
    },
    "photos": {
      "items": {
        "$ref": "#/components/schemas/Photo",
      },
      "type": "array",
    },
  },
  "type": "object",
}
`;

exports[`test @ApiProperty should parse type with function 1`] = `
{
  "properties": {
    "album": {
      "$ref": "#/components/schemas/Album",
    },
    "id": {
      "type": "number",
    },
    "name": {
      "type": "string",
    },
  },
  "type": "object",
}
`;

exports[`test @ApiProperty should parse type with function 2`] = `
{
  "properties": {
    "id": {
      "type": "number",
    },
    "name": {
      "type": "string",
    },
    "photo": {
      "$ref": "#/components/schemas/Photo",
    },
  },
  "type": "object",
}
`;

exports[`test @ApiProperty should test multi-type in property 1`] = `
{
  "properties": {
    "album": {
      "oneOf": [
        {
          "$ref": "#/components/schemas/Album",
        },
        {
          "items": {
            "$ref": "#/components/schemas/Album",
          },
          "type": "array",
        },
      ],
    },
    "name": {
      "oneOf": [
        {
          "type": "string",
        },
        {
          "items": {
            "type": "string",
          },
          "type": "array",
        },
      ],
    },
  },
  "type": "object",
}
`;

exports[`test @ApiProperty should test raw definition with array 1`] = `
{
  "properties": {
    "coords": {
      "items": {
        "type": "number",
      },
      "type": "array",
    },
  },
  "type": "object",
}
`;

exports[`test @ApiProperty should test raw definition with nested array 1`] = `
{
  "properties": {
    "coords": {
      "items": {
        "items": {
          "type": "number",
        },
        "type": "array",
      },
      "type": "array",
    },
  },
  "type": "object",
}
`;

exports[`test @ApiProperty should test ref path generate 1`] = `
{
  "components": {
    "schemas": {
      "NotificationDTO": {
        "properties": {
          "id": {
            "description": "这是 id",
            "example": "1",
            "type": "number",
          },
          "title": {
            "description": "title",
            "example": "通知标题",
            "type": "string",
          },
        },
        "type": "object",
      },
      "NotificationPageListDTO": {
        "properties": {
          "count": {
            "description": "通知数量",
            "example": "999",
            "type": "number",
          },
          "rows": {
            "description": "列表数据",
            "items": {
              "$ref": "#/components/schemas/NotificationDTO",
            },
            "type": "array",
          },
        },
        "type": "object",
      },
      "UserDTO": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/NotificationPageListDTO",
            "description": "The uid of the user",
          },
          "name": {
            "description": "The name of the user",
            "example": "Kitty",
            "type": "string",
          },
          "uid": {
            "description": "The uid of the user",
            "example": "1",
            "type": "number",
          },
        },
        "type": "object",
      },
    },
  },
  "info": {
    "contact": {},
    "description": "",
    "title": "",
    "version": "1.0.0",
  },
  "openapi": "3.0.1",
  "paths": {
    "/api/update_user": {
      "post": {
        "description": undefined,
        "operationId": "apicontroller_updateuser",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDTO",
                },
              },
            },
            "description": "The found record",
          },
        },
        "summary": undefined,
        "tags": [
          "api",
        ],
      },
    },
  },
  "servers": [],
  "tags": [
    {
      "description": "api",
      "externalDocs": undefined,
      "name": "api",
    },
  ],
}
`;

exports[`test @ApiProperty should test simple case with example 1`] = `
{
  "components": {
    "schemas": {
      "Cat": {
        "properties": {
          "name": {
            "description": "The name of the Cat",
            "example": "Kitty",
            "type": "string",
          },
        },
        "type": "object",
      },
    },
  },
  "info": {
    "contact": {},
    "description": "",
    "title": "",
    "version": "1.0.0",
  },
  "openapi": "3.0.1",
  "paths": {
    "/api/update_user": {
      "post": {
        "description": undefined,
        "operationId": "catcontroller_updateuser",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cat",
                },
              },
            },
            "description": "The found record",
          },
        },
        "summary": undefined,
        "tags": [
          "api",
        ],
      },
    },
  },
  "servers": [],
  "tags": [
    {
      "description": "api",
      "externalDocs": undefined,
      "name": "api",
    },
  ],
}
`;

exports[`test @ApiProperty should test specify type 1`] = `
{
  "properties": {
    "id": {
      "type": "string",
    },
  },
  "type": "object",
}
`;

exports[`test @ApiQuery should get array type from DTO 1`] = `
{
  "components": {
    "schemas": {
      "UserDTO": {
        "properties": {
          "id": {
            "description": "The uid of the user",
            "type": "number",
          },
          "name": {
            "description": "The name of the user",
            "type": "string",
          },
        },
        "type": "object",
      },
    },
  },
  "info": {
    "contact": {},
    "description": "",
    "title": "",
    "version": "1.0.0",
  },
  "openapi": "3.0.1",
  "paths": {
    "/api/get_user": {
      "get": {
        "description": undefined,
        "operationId": "apicontroller_getuser",
        "parameters": [
          {
            "in": "query",
            "name": "user",
            "required": true,
            "schema": {
              "items": {
                "$ref": "#/components/schemas/UserDTO",
              },
              "type": "array",
            },
          },
        ],
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "summary": undefined,
        "tags": [
          "api",
        ],
      },
    },
  },
  "servers": [],
  "tags": [
    {
      "description": "api",
      "externalDocs": undefined,
      "name": "api",
    },
  ],
}
`;

exports[`test @ApiQuery should get base type from @query 1`] = `
{
  "components": {},
  "info": {
    "contact": {},
    "description": "",
    "title": "",
    "version": "1.0.0",
  },
  "openapi": "3.0.1",
  "paths": {
    "/api/get_user": {
      "get": {
        "description": undefined,
        "operationId": "apicontroller_getuser",
        "parameters": [
          {
            "in": "query",
            "name": "list",
            "required": false,
            "schema": {
              "type": "object",
            },
          },
          {
            "in": "query",
            "name": "flag",
            "required": false,
            "schema": {
              "type": "boolean",
            },
          },
          {
            "in": "query",
            "name": "id",
            "required": false,
            "schema": {
              "type": "number",
            },
          },
          {
            "in": "query",
            "name": "data",
            "required": false,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "summary": undefined,
        "tags": [
          "api",
        ],
      },
    },
  },
  "servers": [],
  "tags": [
    {
      "description": "api",
      "externalDocs": undefined,
      "name": "api",
    },
  ],
}
`;

exports[`test @ApiQuery should get class type from DTO 1`] = `
{
  "components": {
    "schemas": {
      "UserDTO": {
        "properties": {
          "id": {
            "description": "The uid of the user",
            "type": "number",
          },
          "name": {
            "description": "The name of the user",
            "type": "string",
          },
        },
        "type": "object",
      },
    },
  },
  "info": {
    "contact": {},
    "description": "",
    "title": "",
    "version": "1.0.0",
  },
  "openapi": "3.0.1",
  "paths": {
    "/api/get_user": {
      "get": {
        "description": undefined,
        "operationId": "apicontroller_getuser",
        "parameters": [
          {
            "description": "The name of the user",
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "description": "The name of the user",
              "type": "string",
            },
          },
          {
            "description": "The uid of the user",
            "in": "query",
            "name": "id",
            "required": false,
            "schema": {
              "description": "The uid of the user",
              "type": "number",
            },
          },
        ],
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "summary": undefined,
        "tags": [
          "api",
        ],
      },
    },
  },
  "servers": [],
  "tags": [
    {
      "description": "api",
      "externalDocs": undefined,
      "name": "api",
    },
  ],
}
`;

exports[`test @ApiQuery should get class type from DTO with description 1`] = `
{
  "components": {
    "schemas": {
      "UserDTO": {
        "properties": {
          "id": {
            "description": "The uid of the user",
            "required": false,
            "type": "number",
          },
          "name": {
            "description": "The name of the user",
            "type": "string",
          },
        },
        "required": [
          "name",
        ],
        "type": "object",
      },
    },
  },
  "info": {
    "contact": {},
    "description": "",
    "title": "",
    "version": "1.0.0",
  },
  "openapi": "3.0.1",
  "paths": {
    "/api/get_user": {
      "get": {
        "description": undefined,
        "operationId": "apicontroller_getuser",
        "parameters": [
          {
            "description": "The name of the user",
            "in": "query",
            "name": "name",
            "required": true,
            "schema": {
              "description": "The name of the user",
              "type": "string",
            },
          },
          {
            "description": "The uid of the user",
            "in": "query",
            "name": "id",
            "required": false,
            "schema": {
              "description": "The uid of the user",
              "required": false,
              "type": "number",
            },
          },
        ],
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "summary": undefined,
        "tags": [
          "api",
        ],
      },
    },
  },
  "servers": [],
  "tags": [
    {
      "description": "api",
      "externalDocs": undefined,
      "name": "api",
    },
  ],
}
`;

exports[`test @ApiQuery should get class type from DTO with required 1`] = `
{
  "components": {
    "schemas": {
      "UserDTO": {
        "properties": {
          "id": {
            "description": "The uid of the user",
            "required": false,
            "type": "number",
          },
          "name": {
            "description": "The name of the user",
            "type": "string",
          },
        },
        "required": [
          "name",
        ],
        "type": "object",
      },
    },
  },
  "info": {
    "contact": {},
    "description": "",
    "title": "",
    "version": "1.0.0",
  },
  "openapi": "3.0.1",
  "paths": {
    "/api/get_user": {
      "get": {
        "description": undefined,
        "operationId": "apicontroller_getuser",
        "parameters": [
          {
            "description": "The name of the user",
            "in": "query",
            "name": "name",
            "required": true,
            "schema": {
              "description": "The name of the user",
              "type": "string",
            },
          },
          {
            "description": "The uid of the user",
            "in": "query",
            "name": "id",
            "required": false,
            "schema": {
              "description": "The uid of the user",
              "required": false,
              "type": "number",
            },
          },
        ],
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "summary": undefined,
        "tags": [
          "api",
        ],
      },
    },
  },
  "servers": [],
  "tags": [
    {
      "description": "api",
      "externalDocs": undefined,
      "name": "api",
    },
  ],
}
`;

exports[`test @ApiQuery should get enum type 1`] = `
{
  "components": {},
  "info": {
    "contact": {},
    "description": "",
    "title": "",
    "version": "1.0.0",
  },
  "openapi": "3.0.1",
  "paths": {
    "/api/get_user": {
      "get": {
        "description": undefined,
        "operationId": "apicontroller_getuser",
        "parameters": [
          {
            "in": "query",
            "name": "status",
            "required": true,
            "schema": {
              "enum": [
                "active",
                "inactive",
              ],
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "summary": undefined,
        "tags": [
          "api",
        ],
      },
    },
  },
  "servers": [],
  "tags": [
    {
      "description": "api",
      "externalDocs": undefined,
      "name": "api",
    },
  ],
}
`;

exports[`test @ApiQuery should test merge @query and @ApiQuery 1`] = `
{
  "components": {},
  "info": {
    "contact": {},
    "description": "",
    "title": "",
    "version": "1.0.0",
  },
  "openapi": "3.0.1",
  "paths": {
    "/api/get_user": {
      "get": {
        "description": undefined,
        "operationId": "apicontroller_getuser",
        "parameters": [
          {
            "description": "The name of the user",
            "in": "query",
            "name": "data",
            "required": false,
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "query",
            "name": "id",
            "required": false,
            "schema": {
              "type": "object",
            },
          },
        ],
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "summary": undefined,
        "tags": [
          "api",
        ],
      },
    },
  },
  "servers": [],
  "tags": [
    {
      "description": "api",
      "externalDocs": undefined,
      "name": "api",
    },
  ],
}
`;

exports[`test @ApiQuery should test with @query decorator and @ApiQuery 1`] = `
{
  "components": {},
  "info": {
    "contact": {},
    "description": "",
    "title": "",
    "version": "1.0.0",
  },
  "openapi": "3.0.1",
  "paths": {
    "/api/get_user": {
      "get": {
        "description": undefined,
        "operationId": "apicontroller_getuser",
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "number",
            },
          },
          {
            "description": "The name of the user",
            "in": "query",
            "name": "data",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "summary": undefined,
        "tags": [
          "api",
        ],
      },
    },
  },
  "servers": [],
  "tags": [
    {
      "description": "api",
      "externalDocs": undefined,
      "name": "api",
    },
  ],
}
`;

exports[`test @ApiQuery should test with @query decorator and any type 1`] = `
{
  "components": {},
  "info": {
    "contact": {},
    "description": "",
    "title": "",
    "version": "1.0.0",
  },
  "openapi": "3.0.1",
  "paths": {
    "/api/get_user": {
      "get": {
        "description": undefined,
        "operationId": "apicontroller_getuser",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "summary": undefined,
        "tags": [
          "api",
        ],
      },
    },
  },
  "servers": [],
  "tags": [
    {
      "description": "api",
      "externalDocs": undefined,
      "name": "api",
    },
  ],
}
`;

exports[`test @ApiQuery should test with @query decorator and fixed name 1`] = `
{
  "components": {},
  "info": {
    "contact": {},
    "description": "",
    "title": "",
    "version": "1.0.0",
  },
  "openapi": "3.0.1",
  "paths": {
    "/api/get_user": {
      "get": {
        "description": undefined,
        "operationId": "apicontroller_getuser",
        "parameters": [
          {
            "in": "query",
            "name": "data",
            "required": false,
            "schema": {
              "type": "object",
            },
          },
        ],
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "summary": undefined,
        "tags": [
          "api",
        ],
      },
    },
  },
  "servers": [],
  "tags": [
    {
      "description": "api",
      "externalDocs": undefined,
      "name": "api",
    },
  ],
}
`;

exports[`test @ApiResponse should test @ApiCreatedResponse with type 1`] = `
{
  "components": {
    "schemas": {
      "Cat": {
        "properties": {
          "name": {
            "description": "The name of the Cat",
            "example": "Kitty",
            "type": "string",
          },
        },
        "type": "object",
      },
    },
  },
  "info": {
    "contact": {},
    "description": "",
    "title": "",
    "version": "1.0.0",
  },
  "openapi": "3.0.1",
  "paths": {
    "/api/update_user": {
      "post": {
        "description": undefined,
        "operationId": "apicontroller_updateuser",
        "parameters": [],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cat",
                },
              },
            },
            "description": "",
          },
        },
        "summary": undefined,
        "tags": [
          "api",
        ],
      },
    },
  },
  "servers": [],
  "tags": [
    {
      "description": "api",
      "externalDocs": undefined,
      "name": "api",
    },
  ],
}
`;

exports[`test @ApiResponse should test ApiResponse 1`] = `
{
  "components": {},
  "info": {
    "contact": {},
    "description": "",
    "title": "",
    "version": "1.0.0",
  },
  "openapi": "3.0.1",
  "paths": {
    "/api/update_user": {
      "post": {
        "description": undefined,
        "operationId": "apicontroller_updateuser",
        "parameters": [],
        "responses": {
          "201": {
            "description": "The record has been successfully created.",
          },
          "403": {
            "description": "Forbidden.",
          },
        },
        "summary": undefined,
        "tags": [
          "api",
        ],
      },
    },
  },
  "servers": [],
  "tags": [
    {
      "description": "api",
      "externalDocs": undefined,
      "name": "api",
    },
  ],
}
`;

exports[`test @ApiResponse should test pre-defined response decorator 1`] = `
{
  "components": {},
  "info": {
    "contact": {},
    "description": "",
    "title": "",
    "version": "1.0.0",
  },
  "openapi": "3.0.1",
  "paths": {
    "/api/apiAcceptedResponse": {
      "get": {
        "description": undefined,
        "operationId": "apicontroller_apiacceptedresponse",
        "parameters": [],
        "responses": {
          "202": {
            "description": "",
          },
        },
        "summary": undefined,
        "tags": [
          "api",
        ],
      },
    },
    "/api/apiBadGatewayResponse": {
      "get": {
        "description": undefined,
        "operationId": "apicontroller_apibadgatewayresponse",
        "parameters": [],
        "responses": {
          "502": {
            "description": "",
          },
        },
        "summary": undefined,
        "tags": [
          "api",
        ],
      },
    },
    "/api/apiBadRequestResponse": {
      "get": {
        "description": undefined,
        "operationId": "apicontroller_apibadrequestresponse",
        "parameters": [],
        "responses": {
          "400": {
            "description": "",
          },
        },
        "summary": undefined,
        "tags": [
          "api",
        ],
      },
    },
    "/api/apiConflictResponse": {
      "get": {
        "description": undefined,
        "operationId": "apicontroller_apiconflictresponse",
        "parameters": [],
        "responses": {
          "409": {
            "description": "",
          },
        },
        "summary": undefined,
        "tags": [
          "api",
        ],
      },
    },
    "/api/apiCreatedResponse": {
      "get": {
        "description": undefined,
        "operationId": "apicontroller_apicreatedresponse",
        "parameters": [],
        "responses": {
          "201": {
            "description": "",
          },
        },
        "summary": undefined,
        "tags": [
          "api",
        ],
      },
    },
    "/api/apiDefaultResponse": {
      "get": {
        "description": undefined,
        "operationId": "apicontroller_apidefaultresponse",
        "parameters": [],
        "responses": {
          "default": {
            "description": "",
          },
        },
        "summary": undefined,
        "tags": [
          "api",
        ],
      },
    },
    "/api/apiForbiddenResponse": {
      "get": {
        "description": undefined,
        "operationId": "apicontroller_apiforbiddenresponse",
        "parameters": [],
        "responses": {
          "403": {
            "description": "",
          },
        },
        "summary": undefined,
        "tags": [
          "api",
        ],
      },
    },
    "/api/apiFoundResponse": {
      "get": {
        "description": undefined,
        "operationId": "apicontroller_apifoundresponse",
        "parameters": [],
        "responses": {
          "302": {
            "description": "",
          },
        },
        "summary": undefined,
        "tags": [
          "api",
        ],
      },
    },
    "/api/apiGatewayTimeoutResponse": {
      "get": {
        "description": undefined,
        "operationId": "apicontroller_apigatewaytimeoutresponse",
        "parameters": [],
        "responses": {
          "504": {
            "description": "",
          },
        },
        "summary": undefined,
        "tags": [
          "api",
        ],
      },
    },
    "/api/apiGoneResponse": {
      "get": {
        "description": undefined,
        "operationId": "apicontroller_apigoneresponse",
        "parameters": [],
        "responses": {
          "410": {
            "description": "",
          },
        },
        "summary": undefined,
        "tags": [
          "api",
        ],
      },
    },
    "/api/apiInternalServerErrorResponse": {
      "get": {
        "description": undefined,
        "operationId": "apicontroller_apiinternalservererrorresponse",
        "parameters": [],
        "responses": {
          "500": {
            "description": "",
          },
        },
        "summary": undefined,
        "tags": [
          "api",
        ],
      },
    },
    "/api/apiMethodNotAllowedResponse": {
      "get": {
        "description": undefined,
        "operationId": "apicontroller_apimethodnotallowedresponse",
        "parameters": [],
        "responses": {
          "405": {
            "description": "",
          },
        },
        "summary": undefined,
        "tags": [
          "api",
        ],
      },
    },
    "/api/apiMovedPermanentlyResponse": {
      "get": {
        "description": undefined,
        "operationId": "apicontroller_apimovedpermanentlyresponse",
        "parameters": [],
        "responses": {
          "301": {
            "description": "",
          },
        },
        "summary": undefined,
        "tags": [
          "api",
        ],
      },
    },
    "/api/apiNoContentResponse": {
      "get": {
        "description": undefined,
        "operationId": "apicontroller_apinocontentresponse",
        "parameters": [],
        "responses": {
          "204": {
            "description": "",
          },
        },
        "summary": undefined,
        "tags": [
          "api",
        ],
      },
    },
    "/api/apiNotAcceptableResponse": {
      "get": {
        "description": undefined,
        "operationId": "apicontroller_apinotacceptableresponse",
        "parameters": [],
        "responses": {
          "406": {
            "description": "",
          },
        },
        "summary": undefined,
        "tags": [
          "api",
        ],
      },
    },
    "/api/apiNotFoundResponse": {
      "get": {
        "description": undefined,
        "operationId": "apicontroller_apinotfoundresponse",
        "parameters": [],
        "responses": {
          "404": {
            "description": "",
          },
        },
        "summary": undefined,
        "tags": [
          "api",
        ],
      },
    },
    "/api/apiNotImplementedResponse": {
      "get": {
        "description": undefined,
        "operationId": "apicontroller_apinotimplementedresponse",
        "parameters": [],
        "responses": {
          "501": {
            "description": "",
          },
        },
        "summary": undefined,
        "tags": [
          "api",
        ],
      },
    },
    "/api/apiOkResponse": {
      "get": {
        "description": undefined,
        "operationId": "apicontroller_apiokresponse",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
          },
        },
        "summary": undefined,
        "tags": [
          "api",
        ],
      },
    },
    "/api/apiPayloadTooLargeResponse": {
      "get": {
        "description": undefined,
        "operationId": "apicontroller_apipayloadtoolargeresponse",
        "parameters": [],
        "responses": {
          "413": {
            "description": "",
          },
        },
        "summary": undefined,
        "tags": [
          "api",
        ],
      },
    },
    "/api/apiPreconditionFailedResponse": {
      "get": {
        "description": undefined,
        "operationId": "apicontroller_apipreconditionfailedresponse",
        "parameters": [],
        "responses": {
          "412": {
            "description": "",
          },
        },
        "summary": undefined,
        "tags": [
          "api",
        ],
      },
    },
    "/api/apiRequestTimeoutResponse": {
      "get": {
        "description": undefined,
        "operationId": "apicontroller_apirequesttimeoutresponse",
        "parameters": [],
        "responses": {
          "408": {
            "description": "",
          },
        },
        "summary": undefined,
        "tags": [
          "api",
        ],
      },
    },
    "/api/apiServiceUnavailableResponse": {
      "get": {
        "description": undefined,
        "operationId": "apicontroller_apiserviceunavailableresponse",
        "parameters": [],
        "responses": {
          "503": {
            "description": "",
          },
        },
        "summary": undefined,
        "tags": [
          "api",
        ],
      },
    },
    "/api/apiTooManyRequestsResponse": {
      "get": {
        "description": undefined,
        "operationId": "apicontroller_apitoomanyrequestsresponse",
        "parameters": [],
        "responses": {
          "429": {
            "description": "",
          },
        },
        "summary": undefined,
        "tags": [
          "api",
        ],
      },
    },
    "/api/apiUnauthorizedResponse": {
      "get": {
        "description": undefined,
        "operationId": "apicontroller_apiunauthorizedresponse",
        "parameters": [],
        "responses": {
          "401": {
            "description": "",
          },
        },
        "summary": undefined,
        "tags": [
          "api",
        ],
      },
    },
    "/api/apiUnprocessableEntityResponse": {
      "get": {
        "description": undefined,
        "operationId": "apicontroller_apiunprocessableentityresponse",
        "parameters": [],
        "responses": {
          "422": {
            "description": "",
          },
        },
        "summary": undefined,
        "tags": [
          "api",
        ],
      },
    },
    "/api/apiUnsupportedMediaTypeResponse": {
      "get": {
        "description": undefined,
        "operationId": "apicontroller_apiunsupportedmediatyperesponse",
        "parameters": [],
        "responses": {
          "415": {
            "description": "",
          },
        },
        "summary": undefined,
        "tags": [
          "api",
        ],
      },
    },
  },
  "servers": [],
  "tags": [
    {
      "description": "api",
      "externalDocs": undefined,
      "name": "api",
    },
  ],
}
`;

exports[`test @ApiResponse should test response with type 1`] = `
{
  "components": {
    "schemas": {
      "Cat": {
        "properties": {
          "name": {
            "description": "The name of the Cat",
            "example": "Kitty",
            "type": "string",
          },
        },
        "type": "object",
      },
    },
  },
  "info": {
    "contact": {},
    "description": "",
    "title": "",
    "version": "1.0.0",
  },
  "openapi": "3.0.1",
  "paths": {
    "/api/update_user": {
      "post": {
        "description": undefined,
        "operationId": "apicontroller_updateuser",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cat",
                },
              },
            },
            "description": "",
          },
        },
        "summary": undefined,
        "tags": [
          "api",
        ],
      },
    },
  },
  "servers": [],
  "tags": [
    {
      "description": "api",
      "externalDocs": undefined,
      "name": "api",
    },
  ],
}
`;

exports[`test @ApiResponse should test with array type 1`] = `
{
  "components": {
    "schemas": {
      "Cat": {
        "properties": {},
        "type": "object",
      },
    },
  },
  "info": {
    "contact": {},
    "description": "",
    "title": "",
    "version": "1.0.0",
  },
  "openapi": "3.0.1",
  "paths": {
    "/api/update_user": {
      "post": {
        "description": undefined,
        "operationId": "apicontroller_updateuser",
        "parameters": [],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Cat",
                  },
                  "type": "array",
                },
              },
            },
            "description": "",
          },
        },
        "summary": undefined,
        "tags": [
          "api",
        ],
      },
    },
  },
  "servers": [],
  "tags": [
    {
      "description": "api",
      "externalDocs": undefined,
      "name": "api",
    },
  ],
}
`;

exports[`test @ApiResponse should test with content and content type 1`] = `
{
  "components": {},
  "info": {
    "contact": {},
    "description": "",
    "title": "",
    "version": "1.0.0",
  },
  "openapi": "3.0.1",
  "paths": {
    "/api/update_user": {
      "post": {
        "description": undefined,
        "operationId": "apicontroller_updateuser",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Cat",
                  },
                  "type": "array",
                },
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Cat",
                },
              },
              "text/plain": {
                "schema": {
                  "type": "string",
                },
              },
            },
            "description": "",
          },
        },
        "summary": undefined,
        "tags": [
          "api",
        ],
      },
    },
  },
  "servers": [],
  "tags": [
    {
      "description": "api",
      "externalDocs": undefined,
      "name": "api",
    },
  ],
}
`;

exports[`test @ApiSecurity should test @ApiBasicAuth 1`] = `
{
  "components": {},
  "info": {
    "contact": {},
    "description": "",
    "title": "",
    "version": "1.0.0",
  },
  "openapi": "3.0.1",
  "paths": {
    "/api/get_user": {
      "get": {
        "description": undefined,
        "operationId": "apicontroller_getuser",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "security": [
          {
            "basic": [],
          },
        ],
        "summary": undefined,
        "tags": [
          "api",
        ],
      },
    },
  },
  "servers": [],
  "tags": [
    {
      "description": "api",
      "externalDocs": undefined,
      "name": "api",
    },
  ],
}
`;

exports[`test @ApiSecurity should test ApiSecurity and @ApiExcludeSecurity 1`] = `
{
  "components": {},
  "info": {
    "contact": {},
    "description": "",
    "title": "",
    "version": "1.0.0",
  },
  "openapi": "3.0.1",
  "paths": {
    "/api/get_user": {
      "get": {
        "description": undefined,
        "operationId": "apicontroller_getuser",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "summary": undefined,
        "tags": [
          "api",
        ],
      },
    },
    "/api/update_user": {
      "post": {
        "description": undefined,
        "operationId": "apicontroller_updateuser",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "security": [
          {
            "api_key": [],
          },
        ],
        "summary": undefined,
        "tags": [
          "api",
        ],
      },
    },
  },
  "servers": [],
  "tags": [
    {
      "description": "api",
      "externalDocs": undefined,
      "name": "api",
    },
  ],
}
`;

exports[`test @ApiSecurity should test with @ApiBearerAuth 1`] = `
{
  "components": {},
  "info": {
    "contact": {},
    "description": "",
    "title": "",
    "version": "1.0.0",
  },
  "openapi": "3.0.1",
  "paths": {
    "/api/get_user": {
      "get": {
        "description": undefined,
        "operationId": "apicontroller_getuser",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "security": [
          {
            "bearer": [],
          },
        ],
        "summary": undefined,
        "tags": [
          "api",
        ],
      },
    },
  },
  "servers": [],
  "tags": [
    {
      "description": "api",
      "externalDocs": undefined,
      "name": "api",
    },
  ],
}
`;

exports[`test @ApiSecurity test ApiCookieAuth 1`] = `
{
  "components": {},
  "info": {
    "contact": {},
    "description": "",
    "title": "",
    "version": "1.0.0",
  },
  "openapi": "3.0.1",
  "paths": {
    "/api/get_user": {
      "get": {
        "description": undefined,
        "operationId": "apicontroller_getuser",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "security": [
          {
            "cookie": [],
          },
        ],
        "summary": undefined,
        "tags": [
          "api",
        ],
      },
    },
  },
  "servers": [],
  "tags": [
    {
      "description": "api",
      "externalDocs": undefined,
      "name": "api",
    },
  ],
}
`;

exports[`test @ApiSecurity test OAuth2 1`] = `
{
  "components": {},
  "info": {
    "contact": {},
    "description": "",
    "title": "",
    "version": "1.0.0",
  },
  "openapi": "3.0.1",
  "paths": {
    "/api/get_user": {
      "get": {
        "description": undefined,
        "operationId": "apicontroller_getuser",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "security": [
          {
            "oauth2": [
              "pets:write",
            ],
          },
        ],
        "summary": undefined,
        "tags": [
          "api",
        ],
      },
    },
  },
  "servers": [],
  "tags": [
    {
      "description": "api",
      "externalDocs": undefined,
      "name": "api",
    },
  ],
}
`;

exports[`test @ApiTags should add controller prefix for default tags when @ApiTag not set 1`] = `
{
  "components": {},
  "info": {
    "contact": {},
    "description": "",
    "title": "",
    "version": "1.0.0",
  },
  "openapi": "3.0.1",
  "paths": {
    "/api/update_user": {
      "post": {
        "description": undefined,
        "operationId": "apicontroller_updateuser",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "summary": undefined,
        "tags": [
          "api",
        ],
      },
    },
  },
  "servers": [],
  "tags": [
    {
      "description": "api",
      "externalDocs": undefined,
      "name": "api",
    },
  ],
}
`;

exports[`test @ApiTags should add router @ApiTags 1`] = `
{
  "components": {},
  "info": {
    "contact": {},
    "description": "",
    "title": "",
    "version": "1.0.0",
  },
  "openapi": "3.0.1",
  "paths": {
    "/api/update_user": {
      "post": {
        "description": undefined,
        "operationId": "apicontroller_updateuser",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "summary": undefined,
        "tags": [
          "tag2",
          "tag1",
        ],
      },
    },
  },
  "servers": [],
  "tags": [
    {
      "description": "api",
      "externalDocs": undefined,
      "name": "api",
    },
    {
      "description": "",
      "externalDocs": undefined,
      "name": "tag2",
    },
    {
      "description": "",
      "externalDocs": undefined,
      "name": "tag1",
    },
  ],
}
`;

exports[`test @ApiTags should test add tag description in controller 1`] = `
{
  "components": {},
  "info": {
    "contact": {},
    "description": "",
    "title": "",
    "version": "1.0.0",
  },
  "openapi": "3.0.1",
  "paths": {
    "/api/update_user": {
      "post": {
        "description": "tag1 description",
        "operationId": "apicontroller_updateuser",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "summary": "it is summary",
        "tags": [
          "tag1",
        ],
      },
    },
  },
  "servers": [],
  "tags": [
    {
      "description": "api",
      "externalDocs": undefined,
      "name": "api",
    },
    {
      "description": "tag1 description",
      "externalDocs": undefined,
      "name": "tag1",
    },
  ],
}
`;

exports[`test @ApiTags should test multi-tags 1`] = `
{
  "components": {},
  "info": {
    "contact": {},
    "description": "",
    "title": "",
    "version": "1.0.0",
  },
  "openapi": "3.0.1",
  "paths": {
    "/api/update_user": {
      "post": {
        "description": undefined,
        "operationId": "apicontroller_updateuser",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "summary": undefined,
        "tags": [
          "tag1",
          "tag2",
        ],
      },
    },
  },
  "servers": [],
  "tags": [
    {
      "description": "",
      "externalDocs": undefined,
      "name": "tag1",
    },
    {
      "description": "",
      "externalDocs": undefined,
      "name": "tag2",
    },
  ],
}
`;

exports[`test @ApiTags should test priority @ApiOperation greater than controller 1`] = `
{
  "components": {},
  "info": {
    "contact": {},
    "description": "",
    "title": "",
    "version": "1.0.0",
  },
  "openapi": "3.0.1",
  "paths": {
    "/api/update_user": {
      "post": {
        "description": undefined,
        "operationId": "apicontroller_updateuser",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "summary": undefined,
        "tags": [
          "tag3",
        ],
      },
    },
  },
  "servers": [],
  "tags": [
    {
      "description": "",
      "externalDocs": undefined,
      "name": "tag1",
    },
    {
      "description": "",
      "externalDocs": undefined,
      "name": "tag3",
    },
  ],
}
`;

exports[`test @ApiTags should test priority @ApiOperation without controller tag 1`] = `
{
  "components": {},
  "info": {
    "contact": {},
    "description": "",
    "title": "",
    "version": "1.0.0",
  },
  "openapi": "3.0.1",
  "paths": {
    "/api/update_user": {
      "post": {
        "description": undefined,
        "operationId": "apicontroller_updateuser",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "summary": undefined,
        "tags": [
          "tag3",
        ],
      },
    },
    "/api/update_user_1": {
      "post": {
        "description": undefined,
        "operationId": "apicontroller_updateuser1",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "summary": undefined,
        "tags": [],
      },
    },
  },
  "servers": [],
  "tags": [
    {
      "description": "",
      "externalDocs": undefined,
      "name": "tag3",
    },
  ],
}
`;

exports[`test @ApiTags should test priority router greater than controller 1`] = `
{
  "components": {},
  "info": {
    "contact": {},
    "description": "",
    "title": "",
    "version": "1.0.0",
  },
  "openapi": "3.0.1",
  "paths": {
    "/api/update_user": {
      "post": {
        "description": undefined,
        "operationId": "apicontroller_updateuser",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "summary": undefined,
        "tags": [
          "tag2",
        ],
      },
    },
  },
  "servers": [],
  "tags": [
    {
      "description": "",
      "externalDocs": undefined,
      "name": "tag1",
    },
    {
      "description": "",
      "externalDocs": undefined,
      "name": "tag2",
    },
  ],
}
`;

exports[`test @ApiTags should test priority router greater than controller and @ApiOperation 1`] = `
{
  "components": {},
  "info": {
    "contact": {},
    "description": "",
    "title": "",
    "version": "1.0.0",
  },
  "openapi": "3.0.1",
  "paths": {
    "/api/update_user": {
      "post": {
        "description": undefined,
        "operationId": "apicontroller_updateuser",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "summary": undefined,
        "tags": [
          "tag2",
        ],
      },
    },
  },
  "servers": [],
  "tags": [
    {
      "description": "",
      "externalDocs": undefined,
      "name": "tag1",
    },
    {
      "description": "",
      "externalDocs": undefined,
      "name": "tag2",
    },
  ],
}
`;

exports[`test @ApiTags should test priority router greater than controller and @ApiOperation but will merge tags 1`] = `
{
  "components": {},
  "info": {
    "contact": {},
    "description": "",
    "title": "",
    "version": "1.0.0",
  },
  "openapi": "3.0.1",
  "paths": {
    "/api/update_user": {
      "post": {
        "description": undefined,
        "operationId": "apicontroller_updateuser",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "summary": undefined,
        "tags": [
          "tag2",
        ],
      },
    },
  },
  "servers": [],
  "tags": [
    {
      "description": "",
      "externalDocs": undefined,
      "name": "tag1",
    },
    {
      "description": "",
      "externalDocs": undefined,
      "name": "tag2",
    },
    {
      "description": "",
      "externalDocs": undefined,
      "name": "tag3",
    },
  ],
}
`;

exports[`test @ApiTags should test priority router greater than controller and @ApiOperation but will merge tags 2 1`] = `
{
  "components": {},
  "info": {
    "contact": {},
    "description": "",
    "title": "",
    "version": "1.0.0",
  },
  "openapi": "3.0.1",
  "paths": {
    "/api/update_user": {
      "post": {
        "description": undefined,
        "operationId": "apicontroller_updateuser",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "summary": undefined,
        "tags": [
          "tag2",
          "tag4",
        ],
      },
    },
  },
  "servers": [],
  "tags": [
    {
      "description": "",
      "externalDocs": undefined,
      "name": "tag1",
    },
    {
      "description": "",
      "externalDocs": undefined,
      "name": "tag2",
    },
    {
      "description": "",
      "externalDocs": undefined,
      "name": "tag3",
    },
    {
      "description": "",
      "externalDocs": undefined,
      "name": "tag4",
    },
  ],
}
`;

exports[`test @ApiTags should test priority router greater without controller tag 1`] = `
{
  "components": {},
  "info": {
    "contact": {},
    "description": "",
    "title": "",
    "version": "1.0.0",
  },
  "openapi": "3.0.1",
  "paths": {
    "/api/update_user": {
      "post": {
        "description": undefined,
        "operationId": "apicontroller_updateuser",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "summary": undefined,
        "tags": [
          "tag2",
        ],
      },
    },
    "/api/update_user_1": {
      "post": {
        "description": undefined,
        "operationId": "apicontroller_updateuser1",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "summary": undefined,
        "tags": [],
      },
    },
  },
  "servers": [],
  "tags": [
    {
      "description": "",
      "externalDocs": undefined,
      "name": "tag2",
    },
  ],
}
`;

exports[`test @ApiTags should test priority router greater without controller tag 2`] = `
{
  "components": {},
  "info": {
    "contact": {},
    "description": "",
    "title": "",
    "version": "1.0.0",
  },
  "openapi": "3.0.1",
  "paths": {
    "/api/update_user": {
      "post": {
        "description": undefined,
        "operationId": "apicontroller_updateuser",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "summary": undefined,
        "tags": [
          "tag2",
        ],
      },
    },
    "/api/update_user_1": {
      "post": {
        "description": undefined,
        "operationId": "apicontroller_updateuser1",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "summary": undefined,
        "tags": [],
      },
    },
  },
  "servers": [],
  "tags": [
    {
      "description": "",
      "externalDocs": undefined,
      "name": "tag2",
    },
  ],
}
`;

exports[`test Generics class should test with generics and multi implementation 1`] = `
{
  "components": {
    "schemas": {
      "AnotherUser": {
        "properties": {
          "name": {
            "type": "string",
          },
          "sex": {
            "type": "boolean",
          },
        },
        "type": "object",
      },
      "SuccessUser": {
        "properties": {
          "code": {
            "description": "状态码",
            "type": "number",
          },
          "data": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/User",
              },
              {
                "$ref": "#/components/schemas/AnotherUser",
              },
            ],
          },
          "message": {
            "description": "消息",
            "type": "string",
          },
        },
        "type": "object",
      },
      "User": {
        "properties": {
          "id": {
            "type": "number",
          },
          "name": {
            "type": "string",
          },
        },
        "type": "object",
      },
    },
  },
  "info": {
    "contact": {},
    "description": "",
    "title": "",
    "version": "1.0.0",
  },
  "openapi": "3.0.1",
  "paths": {
    "/api/update_user": {
      "post": {
        "description": undefined,
        "operationId": "apicontroller_updateuser",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SuccessUser",
              },
            },
          },
          "description": undefined,
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessUser",
                },
              },
            },
            "description": "",
          },
        },
        "summary": undefined,
        "tags": [
          "api",
        ],
      },
    },
  },
  "servers": [],
  "tags": [
    {
      "description": "api",
      "externalDocs": undefined,
      "name": "api",
    },
  ],
}
`;

exports[`test Generics class should test with generics class 1`] = `
{
  "components": {
    "schemas": {
      "SuccessUser": {
        "properties": {
          "code": {
            "description": "状态码",
            "type": "number",
          },
          "data": {
            "$ref": "#/components/schemas/User",
          },
          "message": {
            "description": "消息",
            "type": "string",
          },
        },
        "type": "object",
      },
      "User": {
        "properties": {
          "id": {
            "type": "number",
          },
          "name": {
            "type": "string",
          },
        },
        "type": "object",
      },
    },
  },
  "info": {
    "contact": {},
    "description": "",
    "title": "",
    "version": "1.0.0",
  },
  "openapi": "3.0.1",
  "paths": {
    "/api/update_user": {
      "post": {
        "description": undefined,
        "operationId": "apicontroller_updateuser",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SuccessUser",
              },
            },
          },
          "description": undefined,
          "required": true,
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessUser",
                },
              },
            },
            "description": "",
          },
        },
        "summary": undefined,
        "tags": [
          "api",
        ],
      },
    },
  },
  "servers": [],
  "tags": [
    {
      "description": "api",
      "externalDocs": undefined,
      "name": "api",
    },
  ],
}
`;

exports[`test post args without @ApiBody post with any type 1`] = `
{
  "components": {},
  "info": {
    "contact": {},
    "description": "",
    "title": "",
    "version": "1.0.0",
  },
  "openapi": "3.0.1",
  "paths": {
    "/api/update_user": {
      "post": {
        "description": undefined,
        "operationId": "apicontroller_updateuser",
        "parameters": [],
        "requestBody": {
          "content": {
            "text/plain": {
              "schema": {
                "type": "object",
              },
            },
          },
          "description": undefined,
          "required": true,
        },
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "summary": undefined,
        "tags": [
          "api",
        ],
      },
    },
  },
  "servers": [],
  "tags": [
    {
      "description": "api",
      "externalDocs": undefined,
      "name": "api",
    },
  ],
}
`;

exports[`test post args without @ApiBody post with array type 1`] = `
{
  "components": {},
  "info": {
    "contact": {},
    "description": "",
    "title": "",
    "version": "1.0.0",
  },
  "openapi": "3.0.1",
  "paths": {
    "/api/update_user": {
      "post": {
        "description": undefined,
        "operationId": "apicontroller_updateuser",
        "parameters": [],
        "requestBody": {
          "content": {
            "text/plain": {
              "schema": {
                "type": "object",
              },
            },
          },
          "description": undefined,
          "required": true,
        },
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "summary": undefined,
        "tags": [
          "api",
        ],
      },
    },
  },
  "servers": [],
  "tags": [
    {
      "description": "api",
      "externalDocs": undefined,
      "name": "api",
    },
  ],
}
`;

exports[`test post args without @ApiBody post with class array type 1`] = `
{
  "components": {},
  "info": {
    "contact": {},
    "description": "",
    "title": "",
    "version": "1.0.0",
  },
  "openapi": "3.0.1",
  "paths": {
    "/api/update_user": {
      "post": {
        "description": undefined,
        "operationId": "apicontroller_updateuser",
        "parameters": [],
        "requestBody": {
          "content": {
            "text/plain": {
              "schema": {
                "type": "object",
              },
            },
          },
          "description": undefined,
          "required": true,
        },
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "summary": undefined,
        "tags": [
          "api",
        ],
      },
    },
  },
  "servers": [],
  "tags": [
    {
      "description": "api",
      "externalDocs": undefined,
      "name": "api",
    },
  ],
}
`;

exports[`test post args without @ApiBody post with class type 1`] = `
{
  "components": {
    "schemas": {
      "UserDTO": {
        "properties": {
          "id": {
            "description": "The uid of the user",
            "type": "number",
          },
          "name": {
            "description": "The name of the user",
            "type": "string",
          },
        },
        "type": "object",
      },
    },
  },
  "info": {
    "contact": {},
    "description": "",
    "title": "",
    "version": "1.0.0",
  },
  "openapi": "3.0.1",
  "paths": {
    "/api/update_user": {
      "post": {
        "description": undefined,
        "operationId": "apicontroller_updateuser",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserDTO",
              },
            },
          },
          "description": undefined,
          "required": true,
        },
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "summary": undefined,
        "tags": [
          "api",
        ],
      },
    },
  },
  "servers": [],
  "tags": [
    {
      "description": "api",
      "externalDocs": undefined,
      "name": "api",
    },
  ],
}
`;

exports[`test post args without @ApiBody post with string type 1`] = `
{
  "components": {},
  "info": {
    "contact": {},
    "description": "",
    "title": "",
    "version": "1.0.0",
  },
  "openapi": "3.0.1",
  "paths": {
    "/api/update_user": {
      "post": {
        "description": undefined,
        "operationId": "apicontroller_updateuser",
        "parameters": [],
        "requestBody": {
          "content": {
            "text/plain": {
              "schema": {
                "type": "string",
              },
            },
          },
          "description": undefined,
          "required": true,
        },
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "summary": undefined,
        "tags": [
          "api",
        ],
      },
    },
  },
  "servers": [],
  "tags": [
    {
      "description": "api",
      "externalDocs": undefined,
      "name": "api",
    },
  ],
}
`;

exports[`test post args without @ApiBody should test with @File and any type 1`] = `
{
  "components": {},
  "info": {
    "contact": {},
    "description": "",
    "title": "",
    "version": "1.0.0",
  },
  "openapi": "3.0.1",
  "paths": {
    "/api/update_user": {
      "post": {
        "description": undefined,
        "operationId": "apicontroller_updateuser",
        "parameters": [],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "file": {
                    "description": undefined,
                    "format": "binary",
                    "type": "string",
                  },
                },
                "type": "object",
              },
            },
          },
          "description": undefined,
          "required": true,
        },
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "summary": undefined,
        "tags": [
          "api",
        ],
      },
    },
  },
  "servers": [],
  "tags": [
    {
      "description": "api",
      "externalDocs": undefined,
      "name": "api",
    },
  ],
}
`;

exports[`test post args without @ApiBody should test with @Files and any type 1`] = `
{
  "components": {},
  "info": {
    "contact": {},
    "description": "",
    "title": "",
    "version": "1.0.0",
  },
  "openapi": "3.0.1",
  "paths": {
    "/api/update_user": {
      "post": {
        "description": undefined,
        "operationId": "apicontroller_updateuser",
        "parameters": [],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "files": {
                    "description": undefined,
                    "items": {
                      "format": "binary",
                      "type": "string",
                    },
                    "type": "array",
                  },
                },
                "type": "object",
              },
            },
          },
          "description": undefined,
          "required": true,
        },
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "summary": undefined,
        "tags": [
          "api",
        ],
      },
    },
  },
  "servers": [],
  "tags": [
    {
      "description": "api",
      "externalDocs": undefined,
      "name": "api",
    },
  ],
}
`;
