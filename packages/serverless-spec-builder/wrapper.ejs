const { FaaSStarter } = require('<%=faasModName %>');
const { asyncWrapper, start } = require('<%=starter %>');
const picomatch = require('picomatch');
<% layerDeps.forEach(function(layer){ %>const <%=layer.name%> = require('<%=layer.path%>');
<% }); %>

let starter;
let runtime;
let inited = false;
let initializing = false;


const initializeMethod = async (initializeContext = {}) => {
  if (initializing) {
    await waitInitialize();
  }
  if (inited) {
    return;
  }
  initializing = true;
  try {
    runtime = await start({
      layers: [<%= layers.join(", ") %>],
      getHandler: getHandler
    });
    starter = new FaaSStarter({ baseDir: __dirname, initializeContext, applicationAdapter: runtime });
    <% loadDirectory.forEach(function(dirName){ %>
    starter.loader.loadDirectory({ baseDir: '<%=dirName%>'});<% }) %>
    await starter.start();
    inited = true;
    initializing = false;
  } catch(e) {
    initializing = false;
    throw e;
  }
};

const waitInitialize = () => {
  return new Promise(resolve => {
    if (!initializing) {
      resolve();
    } else {
      setTimeout(() => {
        waitInitialize().then(resolve);
      }, 100);
    }
  });
};

const getHandler = (hanlderName) => {
  <% handlers.forEach(function(handlerData){ %>
    if (hanlderName === '<%=handlerData.name%>') {
      return <% if (handlerData.handler) { 
      %> starter.handleInvokeWrapper('<%=handlerData.handler%>'); <% } else { 
      %> async (ctx) => {
        const allHandlers = <%-JSON.stringify(handlerData.handlers)%>;
        let handler = null;
        let ctxPath = ctx && ctx.path || '';
        if (ctxPath) {
          handler = allHandlers.find(handler => {
            return picomatch.isMatch(ctxPath, handler.router)
          });
        }
      
        if (handler) {
          return starter.handleInvokeWrapper(handler.handler)(ctx);
        }
        ctx.status = 404;
        ctx.set('Content-Type', 'text/html');
        return '<h1>404 Page Not Found</h1><hr />Request path: ' + ctxPath + '<hr /><div style="font-size: 12px;color: #999999;">Powered by <a href="https://github.com/midwayjs/midway">Midway Serverless</a></div>';
      }; <% } %>
    }
  <% }); %>
}


exports.<%=initializer%> = asyncWrapper(async (...args) => {
  if (!inited) {
    await initializeMethod(...args);
  }
});

<% handlers.forEach(function(handlerData){ %>
exports.<%=handlerData.name%> = asyncWrapper(async (...args) => {
  if (!inited) {
    await initializeMethod();
  }

  const handler = getHandler('<%=handlerData.name%>');
  return runtime.asyncEvent(handler)(...args);
});
<% }); %>