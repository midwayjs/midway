const { <%=faasStarterName %> } = require('<%=faasModName %>');
const { asyncWrapper, start } = require('<%=starter %>');
<% if (functionMap) { %>
const { registerFunctionToIocByConfig } = require('./registerFunction.js');
const { join } = require('path');
<% } %>
const picomatch = require('picomatch');
<% layerDeps.forEach(function(layer){ %>const <%=layer.name%> = require('<%=layer.path%>');
<% }); %>

let starter;
let runtime;
let inited = false;
<% if (advancePreventMultiInit) { %>
let isInitialing = false;
<% } %>

const initializeMethod = async (initializeContext = {}) => {
  <% if (advancePreventMultiInit) { %>
  inited = true;
  isInitialing = true;
  <% } %>
  runtime = await start({
    layers: [<%= layers.join(", ") %>],
    getHandler: getHandler
  });
  starter = new <%=faasStarterName %>({ baseDir: __dirname, initializeContext, applicationAdapter: runtime, middleware: <%-JSON.stringify(middleware)%> });
  <% loadDirectory.forEach(function(dirName){ %>
  starter.loader.loadDirectory({ baseDir: '<%=dirName%>'});<% }) %>
  <% if (functionMap) { %>
  registerFunctionToIocByConfig(<%-JSON.stringify(functionMap)%>, {
    baseDir: join(__dirname, 'dist'),
    context: starter.loader.getApplicationContext()
  });
  <% } %>
  await starter.start();
  <% if (!advancePreventMultiInit) { %> inited = true; <% } %>
  <% if (advancePreventMultiInit) { %>
  isInitialing = false;
  <% } %>
};

const getHandler = (hanlderName) => {
  <% handlers.forEach(function(handlerData){ %>
    if (hanlderName === '<%=handlerData.name%>') {
      return <% if (handlerData.handler) {
      %> starter.handleInvokeWrapper('<%=handlerData.handler%>'); <% } else {
      %> async (ctx) => {
        const allHandlers = <%-JSON.stringify(handlerData.handlers)%>;
        let handler = null;
        let ctxPath = ctx && ctx.path || '';
        if (ctxPath) {
          handler = allHandlers.find(handler => {
            return picomatch.isMatch(ctxPath, handler.router)
          });
        }

        if (handler) {
          return starter.handleInvokeWrapper(handler.handler)(ctx);
        }
        ctx.status = 404;
        ctx.set('Content-Type', 'text/html');
        return '<h1>404 Page Not Found</h1><hr />Request path: ' + ctxPath + '<hr /><div style="font-size: 12px;color: #999999;">Powered by <a href="https://github.com/midwayjs/midway">Midway Serverless</a></div>';
      }; <% } %>
    }
  <% }); %>
}

<% if (advancePreventMultiInit) { %>
const waitInitial = () => {
  return new Promise(resolve => {
    if (!isInitialing) {
      return resolve();
    }
    setTimeout(() => {
      waitInitial().then(resolve);
    }, 50);
  });
};
<% } %>


exports.<%=initializer%> = asyncWrapper(async (...args) => {
  if (!inited) {
    await initializeMethod(...args);
  }
});

<% handlers.forEach(function(handlerData){ %>
exports.<%=handlerData.name%> = asyncWrapper(async (...args) => {
  if (!inited) {
    await initializeMethod();
  }
  <% if (advancePreventMultiInit) { %>
  if (isInitialing) {
    await waitInitial();
  }
  <% } %>

  const handler = getHandler('<%=handlerData.name%>');
  return runtime.asyncEvent(handler)(...args);
});
<% }); %>