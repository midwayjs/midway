"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[84294],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>h});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),d=p(n),c=o,h=d["".concat(s,".").concat(c)]||d[c]||u[c]||i;return n?a.createElement(h,r(r({ref:t},m),{},{components:n})):a.createElement(h,r({ref:t},m))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:o,r[1]=l;for(var p=2;p<i;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},9187:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var a=n(87462),o=(n(67294),n(3905));const i={},r="TypeORM",l={unversionedId:"extensions/orm",id:"extensions/orm",title:"TypeORM",description:"TypeORM is the most mature object relation mapper (ORM) in the existing community of node.js. This article describes how to use TypeORM in Midway.",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/extensions/orm.md",sourceDirName:"extensions",slug:"/extensions/orm",permalink:"/en/docs/extensions/orm",draft:!1,editUrl:"https://github.com/midwayjs/midway/tree/main/site/docs/extensions/orm.md",tags:[],version:"current",frontMatter:{},sidebar:"component",previous:{title:"Tenant",permalink:"/en/docs/extensions/tenant"},next:{title:"Sequelize",permalink:"/en/docs/extensions/sequelize"}},s={},p=[{value:"The difference with the old writing",id:"the-difference-with-the-old-writing",level:2},{value:"Installation Components",id:"installation-components",level:2},{value:"Introducing components",id:"introducing-components",level:2},{value:"Install database Driver",id:"install-database-driver",level:2},{value:"Simple directory structure",id:"simple-directory-structure",level:2},{value:"Getting Started",id:"getting-started",level:2},{value:"1. Create Model",id:"1-create-model",level:3},{value:"2. Define the entity model",id:"2-define-the-entity-model",level:3},{value:"3. Add database columns",id:"3-add-database-columns",level:3},{value:"4. Create a primary key column",id:"4-create-a-primary-key-column",level:3},{value:"5. Create an auto-incrementing primary key column",id:"5-create-an-auto-incrementing-primary-key-column",level:3},{value:"6. Column data type",id:"6-column-data-type",level:3},{value:"7. Configure connection information and entity model",id:"7-configure-connection-information-and-entity-model",level:3},{value:"8. Use Model to insert database data",id:"8-use-model-to-insert-database-data",level:3},{value:"9. Query Data",id:"9-query-data",level:3},{value:"10. Update the database",id:"10-update-the-database",level:3},{value:"11. Delete data",id:"11-delete-data",level:3},{value:"12. Create a one-to-one association",id:"12-create-a-one-to-one-association",level:3},{value:"13. Reverse relation mapping",id:"13-reverse-relation-mapping",level:3},{value:"14. Load objects and their dependencies",id:"14-load-objects-and-their-dependencies",level:3},{value:"15. Use cascade operations to automatically save associated objects",id:"15-use-cascade-operations-to-automatically-save-associated-objects",level:3},{value:"16. Create many-to-one/one-to-many associations",id:"16-create-many-to-oneone-to-many-associations",level:3},{value:"17. Create many-to-many associations",id:"17-create-many-to-many-associations",level:3},{value:"18. Use QueryBuilder",id:"18-use-querybuilder",level:3},{value:"19. Event Subscriber",id:"19-event-subscriber",level:3},{value:"Repository API",id:"repository-api",level:2},{value:"Advanced features",id:"advanced-features",level:2},{value:"Multi-dataSource support",id:"multi-datasource-support",level:3},{value:"Column value conversion",id:"column-value-conversion",level:3},{value:"Specify the default data source",id:"specify-the-default-data-source",level:3},{value:"Get data source",id:"get-data-source",level:3},{value:"Logging",id:"logging",level:3},{value:"Transaction",id:"transaction",level:3},{value:"CLI",id:"cli",level:3},{value:"About Table Structure Synchronization",id:"about-table-structure-synchronization",level:3},{value:"Frequently Asked Questions",id:"frequently-asked-questions",level:2},{value:"Handshake inactivity timeout",id:"handshake-inactivity-timeout",level:3},{value:"Time Zone Display of mysql Time Column",id:"time-zone-display-of-mysql-time-column",level:3},{value:"Time column returns string",id:"time-column-returns-string",level:3},{value:"Install mysql and mysql2 at the same time",id:"install-mysql-and-mysql2-at-the-same-time",level:3},{value:"Cannot read properties of undefined (reading &#39;getRepository&#39;)",id:"cannot-read-properties-of-undefined-reading-getrepository",level:3}],m={toc:p},d="wrapper";function u(e){let{components:t,...n}=e;return(0,o.kt)(d,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"typeorm"},"TypeORM"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/typeorm/typeorm"},"TypeORM")," is the most mature object relation mapper (",(0,o.kt)("inlineCode",{parentName:"p"},"ORM"),") in the existing community of ",(0,o.kt)("inlineCode",{parentName:"p"},"node.js"),". This article describes how to use TypeORM in Midway."),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"This module is a new version from v3.4.0. The module name has changed and the history is partially compatible. For more information about how to query historical documents, see ",(0,o.kt)("a",{parentName:"p",href:"../legacy/orm"},"here"),".")),(0,o.kt)("p",null,"Related information:"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Description"),(0,o.kt)("th",{parentName:"tr",align:null}))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Can be used for standard projects"),(0,o.kt)("td",{parentName:"tr",align:null},"\u2705")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Can be used for Serverless"),(0,o.kt)("td",{parentName:"tr",align:null},"\u2705")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Can be used for integration"),(0,o.kt)("td",{parentName:"tr",align:null},"\u2705")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Contains independent main framework"),(0,o.kt)("td",{parentName:"tr",align:null},"\u274c")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Contains independent logs"),(0,o.kt)("td",{parentName:"tr",align:null},"\u274c")))),(0,o.kt)("h2",{id:"the-difference-with-the-old-writing"},"The difference with the old writing"),(0,o.kt)("p",null,"The old module is ",(0,o.kt)("inlineCode",{parentName:"p"},"@midwayjs/orm")," and the new module is ",(0,o.kt)("inlineCode",{parentName:"p"},"@midwayjs/typeorm"),". The differences are as follows:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("ol",{parentName:"li"},(0,o.kt)("li",{parentName:"ol"},"Different package names"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("ol",{parentName:"li",start:2},(0,o.kt)("li",{parentName:"ol"},"Adjust some configurations in ",(0,o.kt)("inlineCode",{parentName:"li"},"src/config.default"))),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"The key in the 2.1 configuration file is different (orm => typeorm)"),(0,o.kt)("li",{parentName:"ul"},"The 2.2 is modified to the form of a data source to ",(0,o.kt)("inlineCode",{parentName:"li"},"typeorm.dataSource")),(0,o.kt)("li",{parentName:"ul"},"The path to 2.3 an entity model class or an entity model class needs to be declared in the ",(0,o.kt)("inlineCode",{parentName:"li"},"entities")," field of the data source."),(0,o.kt)("li",{parentName:"ul"},"2.4 Subscriber need to be declared in the ",(0,o.kt)("inlineCode",{parentName:"li"},"subscribers")," field of the data source"))),(0,o.kt)("li",{parentName:"ul"},"3, no longer use the ",(0,o.kt)("inlineCode",{parentName:"li"},"EntityModel")," decorator, directly use the ability provided by the typeorm")),(0,o.kt)("h2",{id:"installation-components"},"Installation Components"),(0,o.kt)("p",null,"Install typeorm components to provide database ORM capability."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ npm i @midwayjs/typeorm@3 typeorm --save\n")),(0,o.kt)("p",null,"Or reinstall the following dependencies in ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "dependencies": {\n    "@midwayjs/typeorm": "^3.0.0",\n    "typeorm": "~0.3.0 ",\n    // ...\n  },\n  "devDependencies": {\n    // ...\n  }\n}\n')),(0,o.kt)("h2",{id:"introducing-components"},"Introducing components"),(0,o.kt)("p",null,"Introducing orm components in ",(0,o.kt)("inlineCode",{parentName:"p"},"src/configuration.ts"),", an example is as follows."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"// configuration.ts\nimport { Configuration } from '@midwayjs/core';\nimport * as orm from '@midwayjs/typeorm';\nimport { join } from 'path';\n\n@Configuration({\n  imports: [\n    // ...\n    orm,                            // enable typeorm component\n  ],\n  importConfigs: [\n    join(__dirname, './config')\n  ]\n})\nexport class MainConfiguration {\n\n}\n")),(0,o.kt)("h2",{id:"install-database-driver"},"Install database Driver"),(0,o.kt)("p",null,"The commonly used database drivers are as follows. Select the database type to install the corresponding connection:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"# for MySQL or MariaDB, you can also use mysql2 instead\nnpm install mysql --save\nnpm install mysql2 --save\n\n# for PostgreSQL or CockroachDB\nnpm install pg --save\n\n# for SQLite\nnpm install sqlite3 --save\n\n# for Microsoft SQL Server\nnpm install mssql --save\n\n# for SQL .js\nnpm install SQL .js --save\n\n# for Oracle\nnpm install oracledb --save\n\n# for MongoDB(experimental)\nnpm install mongodb --save\n")),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},"Oracle driver is special, you need to view the ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/oracle/node-oracledb"},"documentation")),(0,o.kt)("li",{parentName:"ul"},"typeorm link mongodb is not recommended, please use mongoose components"))),(0,o.kt)("h2",{id:"simple-directory-structure"},"Simple directory structure"),(0,o.kt)("p",null,"We take a simple project as an example, please refer to other structures."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"MyProject\n\u251c\u2500\u2500 src                                             // TS root directory\n\u2502   \u251c\u2500\u2500 config\n\u2502   \u2502   \u2514\u2500\u2500 config.default.ts           // Application Profile\n\u2502   \u251c\u2500\u2500 entity                                      // entity (database Model) directory\n\u2502   \u2502   \u2514\u2500\u2500 photo.entity.ts                     // entity file\n\u2502   \u2502   \u2514\u2500\u2500 photoMetadata.ts\n\u2502   \u251c\u2500\u2500 configuration.ts                    // Midway configuration file\n\u2502   \u2514\u2500\u2500 service                                     // Other service directory\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 tsconfig.json\n")),(0,o.kt)("p",null,"Here, our database entities are mainly located in the ",(0,o.kt)("inlineCode",{parentName:"p"},"entity")," directory (non-mandatory). This is a simple convention."),(0,o.kt)("h2",{id:"getting-started"},"Getting Started"),(0,o.kt)("p",null,"Next, we will take mysql as an example."),(0,o.kt)("h3",{id:"1-create-model"},"1. Create Model"),(0,o.kt)("p",null,"We associate with the database through the model. The model in the application is the database table. In the TypeORM, the model is bound to the entity. Each Entity file is a Model and an Entity."),(0,o.kt)("p",null,"In the example, you need an entity. Let's take ",(0,o.kt)("inlineCode",{parentName:"p"},"photo")," as an example. Create an entity directory and add the entity file ",(0,o.kt)("inlineCode",{parentName:"p"},"photo.entity.ts")," to the entity directory. A simple entity is as follows."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"// entity/photo.entity.ts\nexport class Photo {\n  id: number;\n  name: string;\n  description: string;\n  filename: string;\n  views: number;\n  isPublished: boolean;\n}\n")),(0,o.kt)("p",null,"Note that each attribute of the entity file here is actually one-to-one corresponding to the database table. Based on the existing database table, we add content up."),(0,o.kt)("h3",{id:"2-define-the-entity-model"},"2. Define the entity model"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Entity")," is used to define an entity model class."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"// entity/photo.entity.ts\nimport { Entity } from 'typeorm';\n\n@Entity('photo')\nexport class Photo {\n  id: number;\n  name: string;\n  description: string;\n  filename: string;\n  views: number;\n  isPublished: boolean;\n}\n")),(0,o.kt)("p",null,"If the table name is different from the current entity name, you can specify it in the parameter."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"// entity/photo.entity.ts\nimport { Entity } from 'typeorm';\n\n@Entity('photo_table_name')\nexport class Photo {\n  id: number;\n  name: string;\n  description: string;\n  filename: string;\n  views: number;\n  isPublished: boolean;\n}\n")),(0,o.kt)("p",null,"These entity columns can also be generated using ",(0,o.kt)("a",{parentName:"p",href:"/docs/tool/typeorm_generator"},"typeorm_generator")," tools."),(0,o.kt)("h3",{id:"3-add-database-columns"},"3. Add database columns"),(0,o.kt)("p",null,"The properties are modified by the ",(0,o.kt)("inlineCode",{parentName:"p"},"@Column")," decorator provided by the typeorm, each corresponding to a column."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"// entity/photo.entity.ts\nimport { Entity, Column } from 'typeorm';\n\n@Entity()\nexport class Photo {\n\n  @Column()\n  id: number;\n\n  @Column()\n  name: string;\n\n  @Column()\n  description: string;\n\n  @Column()\n  filename: string;\n\n  @Column()\n  views: number;\n\n  @Column()\n  isPublished: boolean;\n\n}\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"id"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"name"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"description"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"filename"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"views"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"isPublished")," columns are added to the ",(0,o.kt)("inlineCode",{parentName:"p"},"photo")," table. The column types in the database are inferred according to the attribute types you use, for example, number will be converted to integers, strings will be converted to varchar, boolean values will be converted to bool, and so on. However, you can use any column type supported by the database by explicitly specifying the column type in the ",(0,o.kt)("inlineCode",{parentName:"p"},"@Column")," decorator."),(0,o.kt)("p",null,"We generated a database table with columns, but there is one thing left. Each database table must have a column with a primary key."),(0,o.kt)("p",null,"Database columns include more column options (ColumnOptions), such as modifying column names, specifying column types, and column lengths. For more options, see the ","[official documentation]","(",(0,o.kt)("a",{parentName:"p",href:"https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/entities.md#%E5%88%25"},"https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/entities.md#%E5%88%")," 97% E9%80% 89% E9%A1%B9)."),(0,o.kt)("h3",{id:"4-create-a-primary-key-column"},"4. Create a primary key column"),(0,o.kt)("p",null,"Each entity must have at least one primary key column. To make a column a primary key, you need to use the ",(0,o.kt)("inlineCode",{parentName:"p"},"@PrimaryColumn")," decorator."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"// entity/photo.entity.ts\nimport { Entity, Column, PrimaryColumn } from 'typeorm';\n\n@Entity()\nexport class Photo {\n\n  @PrimaryColumn()\n  id: number;\n\n  @Column()\n  name: string;\n\n  @Column()\n  description: string;\n\n  @Column()\n  filename: string;\n\n  @Column()\n  views: number;\n\n  @Column()\n  isPublished: boolean;\n\n}\n")),(0,o.kt)("h3",{id:"5-create-an-auto-incrementing-primary-key-column"},"5. Create an auto-incrementing primary key column"),(0,o.kt)("p",null,"Now, if you want to set the self-increasing id column, you need to change the ",(0,o.kt)("inlineCode",{parentName:"p"},"@PrimaryColumn")," decorator to the ",(0,o.kt)("inlineCode",{parentName:"p"},"@PrimaryGeneratedColumn")," decorator:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"// entity/photo.entity.ts\nimport { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class Photo {\n\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  name: string;\n\n  @Column()\n  description: string;\n\n  @Column()\n  filename: string;\n\n  @Column()\n  views: number;\n\n  @Column()\n  isPublished: boolean;\n\n}\n")),(0,o.kt)("h3",{id:"6-column-data-type"},"6. Column data type"),(0,o.kt)("p",null,"Next, let's adjust the data type. By default, strings map to types similar to ",(0,o.kt)("inlineCode",{parentName:"p"},"varchar(255)")," (depending on the database type).  Number is mapped to an integer-like type (depending on the database type). However, we do not want all columns to be limited to varchars or integers. Some changes can be made at this time."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"// entity/photo.entity.ts\nimport { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class Photo {\n\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    length: 100\n  })\n  name: string;\n\n  @Column('text')\n  description: string;\n\n  @Column()\n  filename: string;\n\n  @Column(\"double\")\n  views: number;\n\n  @Column()\n  isPublished: boolean;\n}\n")),(0,o.kt)("p",null,"Example, different column names"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"@Column({\n  length: 100,\n  name: 'custom_name'\n})\nname: string;\n")),(0,o.kt)("p",null,"Example, different column names"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"@CreateDateColumn")," is a special column that automatically inserts dates for entities."),(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"@UpdateDateColumn")," is a special column that automatically updates the entity date each time the entity manager or save of the repository is called."),(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"@VersionColumn")," is a special column that automatically increases the entity version (increment number) each time the entity manager or save of the repository is called."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"@DeleteDateColumn")," is a special column that automatically sets the deletion time of the entity when soft-delete is called.")),(0,o.kt)("p",null,"For example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"  @CreateDateColumn({\n    type: 'timestamp',\n  })\n  createdDate: Date;\n")),(0,o.kt)("p",null,"The column type is database-specific. You can set any column type supported by the database. For more information about supported column types, see ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/typeorm/typeorm/blob/master/docs/entities.md#column-types"},"here"),"."),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("inlineCode",{parentName:"p"},"CreateDateColumn")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"UpdateDateColumn")," rely on the insertion date function of creating the default data on the column when the table structure is synchronized for the first time. If the table is created by yourself, you need to add the default data to the column.")),(0,o.kt)("h3",{id:"7-configure-connection-information-and-entity-model"},"7. Configure connection information and entity model"),(0,o.kt)("p",null,"For more information, see ",(0,o.kt)("a",{parentName:"p",href:"/docs/env_config"},"Configuration"),"."),(0,o.kt)("p",null,"Then configure the database connection information in ",(0,o.kt)("inlineCode",{parentName:"p"},"config.default.ts"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/config/config.default.ts\nimport { Photo } from '../entity/photo.entity';\n\nexport default {\n  // ...\n  typeorm: {\n    dataSource: {\n      default: {\n        /**\n         * Single database instance\n         */\n        type: 'mysql',\n        host: '*******',\n        port: 3306,\n        username: '*******',\n        password: '*******',\n        database: undefined,\n        synchronize: false,     // If it is used for the first time, there is no table, and there is a need for synchronization, you can write true\n        logging: false,\n\n        // Configure the entity model\n        entities: [Photo],\n\n        // or scan format,For compatibility we can match .js and .ts at the same time\n        entities: [\n          'entity',             // Specific directory\n          '**/abc/**',          // Gets only files in directories that contain abc characters\n          'abc/**/*.{j,t}s',        // Specific directory + suffix matching\n          'abc/*.entity.{j,t}s',    // suffix matching\n          '**/*.entity.{j,t}s',     // wildcard path + suffix matching\n          '**/*.{j,t}s',        // suffix matching\n        ]\n      }\n    }\n  },\n}\n")),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"If the database you are using already has the function of table structure synchronization, such as cloud database, it is better not to open it. If it must be used, it is best to use the synchronize configuration only in the development phase or for the first time to avoid consistency problems.")),(0,o.kt)("p",null,"For more information, see ",(0,o.kt)("a",{parentName:"p",href:"../data_source"},"Data source management"),"."),(0,o.kt)("p",null,"You can use other database types for the ",(0,o.kt)("inlineCode",{parentName:"p"},"type")," field, including ",(0,o.kt)("inlineCode",{parentName:"p"},"mysql"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"mariadb"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"postgres"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"cockroachdb"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"sqlite"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"mssql"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"oracle"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"cordova"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"nativescript"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"react-native"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"expo"),", or ",(0,o.kt)("inlineCode",{parentName:"p"},"mongodb")),(0,o.kt)("p",null,"For example, sqlite requires the following information."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/config/config.default.ts\nexport default {\n  // ...\n  typeorm: {\n    dataSource: {\n      default: {\n        type: 'sqlite',\n        database: path.join(__dirname, '../../test.sqlite')\n        synchronize: true,\n        logging: true\n        // ...\n      }\n    }\n  },\n}\n")),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Note: synchronize fields are used to synchronize table structures. It is not safe to use ",(0,o.kt)("inlineCode",{parentName:"p"},"synchronize: true")," for production mode synchronization. Please set this field to false after going online.")),(0,o.kt)("h3",{id:"8-use-model-to-insert-database-data"},"8. Use Model to insert database data"),(0,o.kt)("p",null,"In common Midway files, use the ",(0,o.kt)("inlineCode",{parentName:"p"},"@InjectEntityModel")," decorator to inject our configured Model. All we need to do is:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("ol",{parentName:"li"},(0,o.kt)("li",{parentName:"ol"},"Create entity objects"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("ol",{parentName:"li",start:2},(0,o.kt)("li",{parentName:"ol"},"Execute the ",(0,o.kt)("inlineCode",{parentName:"li"},"save()"))))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Provide } from '@midwayjs/core';\nimport { InjectEntityModel } from '@midwayjs/typeorm';\nimport { Photo } from '../entity/photo.entity';\nimport { Repository } from 'typeorm';\n\n@Provide()\nexport class PhotoService {\n\n  @InjectEntityModel(Photo)\n  photoModel: Repository<Photo>;\n\n  // save\n  async savePhoto() {\n    // create a entity object\n    let photo = new Photo();\n    photo.name = 'Me and Bears';\n    photo.description = 'I am near polar bears';\n    photo.filename = 'photo-with-bears.jpg';\n    photo.views = 1;\n    photo.isPublished = true;\n\n    // save entity\n    const photoResult = await this.photoModel.save(photo);\n\n    // save success\n    console.log('photo id =', photoResult.id);\n  }\n}\n")),(0,o.kt)("h3",{id:"9-query-data"},"9. Query Data"),(0,o.kt)("p",null,"For more information, see ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/find-options.md"},"find documentation"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'import { Provide } from \'@midwayjs/core\';\nimport { InjectEntityModel } from \'@midwayjs/typeorm\';\nimport { Photo } from \'../entity/photo.entity\';\nimport { Repository } from \'typeorm\';\n\n@Provide()\nexport class PhotoService {\n\n  @InjectEntityModel(Photo)\n  photoModel: Repository<Photo>;\n\n  // find\n  async findPhotos() {\n\n    // find All\n    let allPhotos = await this.photoModel.find({});\n    console.log("All photos from the db: ", allPhotos);\n\n    // find first\n    let firstPhoto = await this.photoModel.findOne({\n      where: {\n        id: 1\n      }\n    });\n    console.log("First photo from the db: ", firstPhoto);\n\n    // find one by name\n    let meAndBearsPhoto = await this.photoModel.findOne({\n      where: { name: "Me and Bears"}\n    });\n    console.log("Me and Bears photo from the db: ", meAndBearsPhoto);\n\n    // find by views\n    let allViewedPhotos = await this.photoModel.find({\n      where: { views: 1}\n    });\n    console.log("All viewed photos: ", allViewedPhotos);\n\n    let allPublishedPhotos = await this.photoModel.find({\n      where: { isPublished: true}\n    });\n    console.log("All published photos: ", allPublishedPhotos);\n\n    // find and get count\n    let [allPhotos, photosCount] = await this.photoModel.findAndCount({});\n    console.log("All photos: ", allPhotos);\n    console.log("Photos count: ", photosCount);\n\n  }\n}\n\n')),(0,o.kt)("h3",{id:"10-update-the-database"},"10. Update the database"),(0,o.kt)("p",null,"Now, let's load a photo from the database, update it and save it."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Provide } from '@midwayjs/core';\nimport { InjectEntityModel } from '@midwayjs/typeorm';\nimport { Photo } from '../entity/photo.entity';\nimport { Repository } from 'typeorm';\n\n@Provide()\nexport class PhotoService {\n\n  @InjectEntityModel(Photo)\n  photoModel: Repository<Photo>;\n\n  async updatePhoto() {\n\n    let photoToUpdate = await this.photoModel.findOne({\n      where: {\n        id: 1,\n      },\n    });\n    photoToUpdate.name = \"Me, my friends and polar bears\";\n\n    await this.photoModel.save(photoToUpdate);\n  }\n}\n")),(0,o.kt)("h3",{id:"11-delete-data"},"11. Delete data"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"remove")," is used to remove the given entity or array of entities. ",(0,o.kt)("inlineCode",{parentName:"p"},"delete")," is used to delete by a given ID or condition."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Provide } from '@midwayjs/core';\nimport { InjectEntityModel } from '@midwayjs/typeorm';\nimport { Photo } from '../entity/photo.entity';\nimport { Repository } from 'typeorm';\n\n@Provide()\nexport class PhotoService {\n\n  @InjectEntityModel(Photo)\n  photoModel: Repository<Photo>;\n\n  async updatePhoto() {\n    /*...*/\n    const photo = await this.photoModel.findOne({\n      where: {\n        id: 1,\n      },\n    });\n\n    // Remove by entity\n    await this.photoModel.remove(photo)\n    // Delete multiple entities\n    await this.photoModel.remove([photo1, photo2, photo3]);\n\n    // Delete by ID\n    await this.photoModel.delete(1);\n    await this.photoModel.delete([1, 2, 3]);\n    await this.photoModel.delete({ name: \"Timber\" });\n  }\n}\n")),(0,o.kt)("p",null,"Now, Photo with ID = 1 will be deleted from the database."),(0,o.kt)("p",null,"There is also a soft deletion method."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"await this.photoModel.softDelete(1);\n// And You can restore it using restore;\nawait this.photoModel.restore(1);\n")),(0,o.kt)("h3",{id:"12-create-a-one-to-one-association"},"12. Create a one-to-one association"),(0,o.kt)("p",null,"Let's create a one-to-one relationship with another class. Let's create a new class in ",(0,o.kt)("inlineCode",{parentName:"p"},"entity/photoMetadata.ts"),". This class contains additional meta-information for photo."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Entity, Column, PrimaryGeneratedColumn, OneToOne, JoinColumn } from 'typeorm';\nimport { Photo } from './photo';\n\n@Entity()\nexport class PhotoMetadata {\n\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column(\"int\")\n  height: number;\n\n  @Column(\"int\")\n  width: number;\n\n  @Column()\n  orientation: string;\n\n  @Column()\n  compressed: boolean;\n\n  @Column()\n  comment: string;\n\n  @OneToOne(type => Photo)\n  @JoinColumn()\n  photo: Photo;\n\n}\n")),(0,o.kt)("p",null,"Here, we use a new fitting called ",(0,o.kt)("inlineCode",{parentName:"p"},"@OneToOne"),". It allows us to create a one-to-one relationship between two entities. ",(0,o.kt)("inlineCode",{parentName:"p"},"type => photo")," is a function that returns the class of the entity with which we want to establish a relationship."),(0,o.kt)("p",null,"Due to the particularity of the language, we are forced to use a function that returns the class instead of using the class directly. You can also write it as ",(0,o.kt)("inlineCode",{parentName:"p"},"() => Photo"),", but we use ",(0,o.kt)("inlineCode",{parentName:"p"},"type => Photo")," as a convention to improve the readability of the code. The type variable itself contains nothing."),(0,o.kt)("p",null,"We also added an ",(0,o.kt)("inlineCode",{parentName:"p"},"@JoinColumn")," decorator, which indicates that this side of the relationship will have the relationship. Relationships can be one-way or two-way. The relationship can only be owned by one party. The owner side of the relationship needs to use the @JoinColumn decorator.  If you run the application, you will see a newly generated table that will contain a column containing foreign keys for the Photo relationship."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"+-------------+--------------+----------------------------+\n|                     photo_metadata                      |\n+-------------+--------------+----------------------------+\n| id          | int(11)      | PRIMARY KEY AUTO_INCREMENT |\n| height      | int(11)      |                            |\n| width       | int(11)      |                            |\n| comment     | varchar(255) |                            |\n| compressed  | boolean      |                            |\n| orientation | varchar(255) |                            |\n| photoId     | int(11)      | FOREIGN KEY                |\n+-------------+--------------+----------------------------+\n")),(0,o.kt)("p",null,"Next we will associate them in the code."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'import { Provide, Inject } from \'@midwayjs/core\';\nimport { InjectEntityModel } from \'@midwayjs/typeorm\';\nimport { Photo } from \'./entity/photo.entity\';\nimport { PhotoMetadata } from \'./entity/photoMetadata.entity\';\nimport { Repository } from \'typeorm\';\n\n@Provide()\nexport class PhotoService {\n\n  @InjectEntityModel(Photo)\n  photoModel: Repository<Photo>;\n\n  @InjectEntityModel(PhotoMetadata)\n  photoMetadataModel: Repository<PhotoMetadata>;\n\n  async updatePhoto() {\n\n  // create a photo\n    let photo = new Photo();\n    photo.name = "Me and Bears";\n    photo.description = "I am near polar bears";\n    photo.filename = "photo-with-bears.jpg";\n    photo.isPublished = true;\n\n    // create a photo metadata\n    let metadata = new PhotoMetadata();\n    metadata.height = 640;\n    metadata.width = 480;\n    metadata.compressed = true;\n    metadata.comment = "cybershoot";\n    metadata.orientation = "portrait";\n    metadata.photo = photo; // this way we connect them\n\n\n    // first we should save a photo\n    await this.photoModel.save(photo);\n\n    // photo is saved. Now we need to save a photo metadata\n    await this.photoMetadataModel.save(metadata);\n\n    // done\n    console.log("Metadata is saved, and relation between metadata and photo is created in the database too");\n  }\n}\n')),(0,o.kt)("h3",{id:"13-reverse-relation-mapping"},"13. Reverse relation mapping"),(0,o.kt)("p",null,"Relational mapping can be one-way or two-way. When the relationship between PhotoMetadata and Photo is one-way. The owner of the relationship is PhotoMetadata, and Photo knows nothing about PhotoMetadata. This complicates accessing PhotoMetadata from the Photo side. To solve this problem, we add a reverse relational mapping to make the PhotoMetadata and Photo a two-way association. Let's modify our entity."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Entity } from 'typeorm';\nimport { Column, PrimaryGeneratedColumn, OneToOne, JoinColumn } from 'typeorm';\nimport { Photo } from './photo.entity';\n\n@Entity()\nexport class PhotoMetadata {\n\n  /* ... other columns */\n\n  @OneToOne(type => Photo, photo => photo.metadata)\n  @JoinColumn()\n  photo: Photo;\n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Entity } from 'typeorm';\nimport { Entity, Column, PrimaryGeneratedColumn, OneToOne } from 'typeorm';\nimport { PhotoMetadata } from './photoMetadata.entity';\n\n@Entity()\nexport class Photo {\n\n  /* ... other columns */\n\n  @OneToOne(type => PhotoMetadata, photoMetadata => photoMetadata.photo)\n  metadata: PhotoMetadata;\n}\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Photo => photo.metadata")," is a function that returns a reverse mapping relationship. Here, we explicitly declare that metadata properties of the Photo class are used to associate PhotoMetadata. In addition to passing functions that return photo properties, you can also directly pass strings to ",(0,o.kt)("inlineCode",{parentName:"p"},"@OneToOne")," decorators, such as ",(0,o.kt)("inlineCode",{parentName:"p"},'"metadata"'),". But we used this function callback method to make our code writing simpler."),(0,o.kt)("p",null,"Note that the ",(0,o.kt)("inlineCode",{parentName:"p"},"@JoinColumn")," decorator will only be used on one side of the relationship map. No matter which side of this decorator you place, you are the owner of the relationship. The owner of the relationship contains columns with foreign keys in the database."),(0,o.kt)("h3",{id:"14-load-objects-and-their-dependencies"},"14. Load objects and their dependencies"),(0,o.kt)("p",null,"Now, let's try to load Photo and PhotoMetadata together in a single query. There are two ways to do this, using the ",(0,o.kt)("inlineCode",{parentName:"p"},"find *")," method or using the ",(0,o.kt)("inlineCode",{parentName:"p"},"QueryBuilder")," function. Let's first use the ",(0,o.kt)("inlineCode",{parentName:"p"},"find *")," method.  The ",(0,o.kt)("inlineCode",{parentName:"p"},"find *")," method allows you to specify objects using the ",(0,o.kt)("inlineCode",{parentName:"p"},"FindOneOptions"),"/",(0,o.kt)("inlineCode",{parentName:"p"},"FindManyOptions")," interface."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Provide, Inject } from '@midwayjs/core';\nimport { InjectEntityModel } from '@midwayjs/typeorm';\nimport { Photo } from './entity/photo.entity';\nimport { Repository } from 'typeorm';\n\n@Provide()\nexport class PhotoService {\n\n  @InjectEntityModel(Photo)\n  photoModel: Repository<Photo>;\n\n  // find\n  async findPhoto() {\n        /*...*/\n    let photos = await this.photoModel.find({ relations: [ 'metadata' ] }); // typeorm@0.2.x\n  }\n}\n\n")),(0,o.kt)("p",null,"Here, the value of photos is an array that contains the query results of the entire database, and each photo object contains its associated metadata attribute. Learn more about the ",(0,o.kt)("inlineCode",{parentName:"p"},"Find Options")," in ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/typeorm/typeorm/blob/master/docs/find-options.md"},"this document"),"."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Find Options")," is simple, but if you need more complex queries, you should use ",(0,o.kt)("inlineCode",{parentName:"p"},"QueryBuilder")," instead.  ",(0,o.kt)("inlineCode",{parentName:"p"},"QueryBuilder")," allows more complex queries to be used in an elegant way."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Provide, Inject } from '@midwayjs/core';\nimport { InjectEntityModel } from '@midwayjs/typeorm';\nimport { Photo } from './entity/photo.entity';\nimport { Repository } from 'typeorm';\n\n@Provide()\nexport class PhotoService {\n\n  @InjectEntityModel(Photo)\n  photoModel: Repository<Photo>;\n\n  // find\n  async findPhoto() {\n        /*...*/\n    let photos = await this.photoModel\n      .createQueryBuilder('photo')\n      .innerJoinAndSelect('photo.metadata', 'metadata')\n      .getMany();\n  }\n}\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"QueryBuilder")," allows the creation and execution of almost any complex SQL query. When using ",(0,o.kt)("inlineCode",{parentName:"p"},"QueryBuilder"),', think like creating SQL queries. In this example, "photo" and "metadata" are aliases applied to the selected photos. You can use aliases to access the columns and properties of the selected data.'),(0,o.kt)("h3",{id:"15-use-cascade-operations-to-automatically-save-associated-objects"},"15. Use cascade operations to automatically save associated objects"),(0,o.kt)("p",null,"Cascade can be set in the relationship when we want to automatically save the associated object every time we save another object. Let's slightly change the ",(0,o.kt)("inlineCode",{parentName:"p"},"@OneToOne")," decorator of the photo."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"export class Photo {\n  /// ... other columns\n\n  @OneToOne(type => PhotoMetadata, metadata => metadata.photo, {\n    cascade: true\n  })\n  metadata: PhotoMetadata;\n}\n")),(0,o.kt)("p",null,"Using ",(0,o.kt)("inlineCode",{parentName:"p"},"cascade")," allows us to no longer save Photo and PhotoMetadata separately now. Due to the cascade option, metadata objects will be saved automatically."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'import { Provide, Inject } from \'@midwayjs/core\';\nimport { InjectEntityModel } from \'@midwayjs/typeorm\';\nimport { Photo } from \'./entity/photo.entity\';\nimport { PhotoMetadata } from \'./entity/photoMetadata.entity\';\nimport { Repository } from \'typeorm\';\n\n@Provide()\nexport class PhotoService {\n\n  @InjectEntityModel(Photo)\n  photoModel: Repository<Photo>;\n\n  async updatePhoto() {\n\n   // create photo object\n    let photo = new Photo();\n    photo.name = "Me and Bears";\n    photo.description = "I am near polar bears";\n    photo.filename = "photo-with-bears.jpg";\n    photo.isPublished = true;\n\n    // create photo metadata object\n    let metadata = new PhotoMetadata();\n    metadata.height = 640;\n    metadata.width = 480;\n    metadata.compressed = true;\n    metadata.comment = "cybershoot";\n    metadata.orientation = "portrait";\n\n    photo.metadata = metadata; // this way we connect them\n\n    // save a photo also save the metadata\n    await this.photoModel.save(photo);\n\n    // done\n    console.log("Photo is saved, photo metadata is saved too");\n  }\n}\n')),(0,o.kt)("p",null,"Note that we now set the metadata of Photo instead of setting the Photo attribute of metadata as before. This is only valid when you connect Photo to the PhotoMetadata from the Photo side. If set on the PhotoMetadata side, it will not be saved automatically."),(0,o.kt)("h3",{id:"16-create-many-to-oneone-to-many-associations"},"16. Create many-to-one/one-to-many associations"),(0,o.kt)("p",null,"Let's create a many-to-one/one-to-many relationship. Suppose a photo has an author, and each author can have many photos. First, let's create an Author class:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Entity } from 'typeorm';\nimport { Column, PrimaryGeneratedColumn, OneToMany, JoinColumn } from 'typeorm';\nimport { Photo } from './entity/photo.entity';\n\n@Entity()\nexport class Author {\n\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  name: string;\n\n  @OneToMany(type => Photo, photo => photo.author) // note: we will create author property in the Photo class below\n  photos: Photo[];\n}\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Author")," contains a reverse relationship.  ",(0,o.kt)("inlineCode",{parentName:"p"},"OneToMany")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"ManyToOne")," need to appear in pairs."),(0,o.kt)("p",null,"Now, add the owner of the relationship to the Photo entity:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Entity } from 'typeorm';\nimport { Column, PrimaryGeneratedColumn, ManyToOne } from 'typeorm';\nimport { PhotoMetadata } from './photoMetadata.entity';\nimport { Author } from './author.entity';\n\n@Entity()\nexport class Photo {\n\n  /* ... other columns */\n\n  @ManyToOne(type => Author, author => author.photos)\n  author: Author;\n}\n")),(0,o.kt)("p",null,"In a many-to-one/one-to-many relationship, the owner is always many-to-one. This means that the class using the ",(0,o.kt)("inlineCode",{parentName:"p"},"@ManyToOne")," will store the ID of the related object."),(0,o.kt)("p",null,"After the application is run, ORM creates the ",(0,o.kt)("inlineCode",{parentName:"p"},"author")," table:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"+-------------+--------------+----------------------------+\n|                          author                         |\n+-------------+--------------+----------------------------+\n| id          | int(11)      | PRIMARY KEY AUTO_INCREMENT |\n| name        | varchar(255) |                            |\n+-------------+--------------+----------------------------+\n")),(0,o.kt)("p",null,"It also modifies the ",(0,o.kt)("inlineCode",{parentName:"p"},"photo")," table, adds a new ",(0,o.kt)("inlineCode",{parentName:"p"},"author")," column, and creates a foreign key for it:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"+-------------+--------------+----------------------------+\n|                         photo                           |\n+-------------+--------------+----------------------------+\n| id          | int(11)      | PRIMARY KEY AUTO_INCREMENT |\n| name        | varchar(255) |                            |\n| description | varchar(255) |                            |\n| filename    | varchar(255) |                            |\n| isPublished | boolean      |                            |\n| authorId    | int(11)      | FOREIGN KEY                |\n+-------------+--------------+----------------------------+\n")),(0,o.kt)("h3",{id:"17-create-many-to-many-associations"},"17. Create many-to-many associations"),(0,o.kt)("p",null,"Let's create a many-to-one/many-to-many relationship. Suppose a photo can be in many albums, and each album can contain many photos. Let's create an ",(0,o.kt)("inlineCode",{parentName:"p"},"Album")," class."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Entity, PrimaryGeneratedColumn, Column, ManyToMany, JoinTable } from 'typeorm';\n\n@Entity()\nexport class Album {\n\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  name: string;\n\n  @ManyToMany(type => Photo, photo => photo.albums)\n  @JoinTable()\n  photos: Photo[];\n}\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"@JoinTable")," is used to indicate that this is the owner of the relationship."),(0,o.kt)("p",null,"Now, add the reverse association to ",(0,o.kt)("inlineCode",{parentName:"p"},"Photo"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"export class Photo {\n  /// ... other columns\n\n  @ManyToMany(type => Album, album => album.photos)\n  albums: Album[];\n}\n")),(0,o.kt)("p",null,"After running the application, ORM will create a album_photos_photo_albums join table:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"+-------------+--------------+----------------------------+\n|                album_photos_photo_albums                |\n+-------------+--------------+----------------------------+\n| album_id    | int(11)      | PRIMARY KEY FOREIGN KEY    |\n| photo_id    | int(11)      | PRIMARY KEY FOREIGN KEY    |\n+-------------+--------------+----------------------------+\n")),(0,o.kt)("p",null,"Now, let's insert albums and photos into the database:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'import { Provide, Inject } from \'@midwayjs/core\';\nimport { InjectEntityModel } from \'@midwayjs/typeorm\';\nimport { Photo } from \'./entity/photo.entity\';\nimport { Album } from \'./entity/album.entity\';\nimport { Repository } from \'typeorm\';\n\n@Provide()\nexport class PhotoService {\n\n  @InjectEntityModel(Photo)\n  photoModel: Repository<Photo>;\n\n  @InjectEntityModel(Album)\n  albumModel: Repository<Album>\n\n  async updatePhoto() {\n\n    // create a few albums\n    let album1 = new Album();\n    album1.name = "Bears";\n    await this.albumModel.save(album1);\n\n    let album2 = new Album();\n    album2.name = "Me";\n    await this.albumModel.save(album2);\n\n    // create a few photos\n    let photo = new Photo();\n    photo.name = "Me and Bears";\n    photo.description = "I am near polar bears";\n    photo.filename = "photo-with-bears.jpg";\n    photo.albums = [album1, album2];\n    await this.photoModel.save(photo);\n\n\n    // now our photo is saved and albums are attached to it\n    // now lets load them:\n    const loadedPhoto = await this.photoModel.findOne(1, { relations: ["albums"] }); // typeorm@0.2.x\n  }\n}\n')),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"loadedPhoto")," value is:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  id: 1,\n  name: "Me and Bears ",\n  description: "I am near polar bears ",\n  filename: "photo-with-bears.jpg ",\n  albums: [{\n    id: 1,\n    name: "Bears"\n  }, {\n    id: 2,\n    name: "Me"\n  }]\n}\n')),(0,o.kt)("h3",{id:"18-use-querybuilder"},"18. Use QueryBuilder"),(0,o.kt)("p",null,"You can use QueryBuilder to build almost any complex SQL query. For example, you can do this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'let photos = await this.photoModel\n    .createQueryBuilder("photo") // first argument is an alias. Alias is what you are selecting - photos. You must specify it.\n    .innerJoinAndSelect("photo.metadata", "metadata")\n    .leftJoinAndSelect("photo.albums", "album")\n    .where("photo.isPublished = true")\n    .andWhere("(photo.name = :photoName OR photo.name = :bearName)")\n    .orderBy("photo.id", "DESC")\n    .skip(5)\n    .take(10)\n    .setParameters({ photoName: "My", bearName: "Mishka" })\n    .getMany();\n')),(0,o.kt)("p",null,'The query selects all published photos with "My" or "Mishka" names. It will return results (paging offset) from position 5, and only 10 results (paging limit) will be selected. The selection results will be sorted in descending order of ID. The photo album will be left-Joined and metadata will be automatically associated.'),(0,o.kt)("p",null,"You will use query generators extensively in your application. Learn more about QueryBuilder ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/select-query-builder.md"},"here"),"."),(0,o.kt)("h3",{id:"19-event-subscriber"},"19. Event Subscriber"),(0,o.kt)("p",null,"typeorm provides an event subscription mechanism to facilitate log output when doing some database operations. For this reason, midway provides a ",(0,o.kt)("inlineCode",{parentName:"p"},"EventSubscriberModel")," decorator to label event subscription classes with the following code."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { EventSubscriberModel } from '@midwayjs/typeorm';\nimport { EntitySubscriberInterface, InsertEvent, UpdateEvent, RemoveEvent } from 'typeorm';\n\n@EventSubscriberModel()\nexport class EverythingSubscriber implements EntitySubscriberInterface {\n\n  /**\n   * Called before entity insertion.\n   */\n  beforeInsert(event: InsertEvent<any>) {\n    console.log('BEFORE ENTITY INSERTED:', event.entity);\n  }\n\n  /**\n   * Called before entity insertion.\n   */\n  beforeUpdate(event: UpdateEvent<any>) {\n    console.log('BEFORE ENTITY UPDATED:', event.entity);\n  }\n\n  /**\n   * Called before entity insertion.\n   */\n  beforeRemove(event: RemoveEvent<any>) {\n    console.log('BEFORE ENTITY WITH ID ${event.entityId} REMOVED:', event.entity);\n  }\n\n  /**\n   * Called after entity insertion.\n   */\n  afterInsert(event: InsertEvent<any>) {\n    console.log('AFTER ENTITY INSERTED:', event.entity);\n  }\n\n  /**\n     * Called after entity insertion.\n     */\n  afterUpdate(event: UpdateEvent<any>) {\n    console.log('AFTER ENTITY UPDATED:', event.entity);\n  }\n\n  /**\n   * Called after entity insertion.\n   */\n  afterRemove(event: RemoveEvent<any>) {\n    console.log('AFTER ENTITY WITH ID ${event.entityId} REMOVED:', event.entity);\n  }\n\n  /**\n   * Called after entity is loaded.\n   */\n  afterLoad(entity: any) {\n    console.log('AFTER ENTITY LOADED:', entity);\n  }\n\n}\n")),(0,o.kt)("p",null,"This subscription class provides some common interfaces to perform some things during database operations."),(0,o.kt)("p",null,"At the same time, we need to add subscription classes to the configuration."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/config/config.default.ts\nimport { EverythingSubscriber } from '../event/subscriber';\n\nexport default {\n  // ...\n  typeorm: {\n    dataSource: {\n      default: {\n        // ...\n        entities: [Photo],\n        // Incoming subscription class\n        subscribers: [EverythingSubscriber]\n      }\n    }\n  },\n}\n")),(0,o.kt)("h2",{id:"repository-api"},"Repository API"),(0,o.kt)("p",null,"For more APIs, please check ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/typeorm/typeorm/blob/master/docs/repository-api.md"},"official website documentation"),"."),(0,o.kt)("h2",{id:"advanced-features"},"Advanced features"),(0,o.kt)("h3",{id:"multi-datasource-support"},"Multi-dataSource support"),(0,o.kt)("p",null,"Sometimes, we have multiple database connections (Connection) in an application, and there will be multiple configurations at this time. We use the DataSource standard form of ",(0,o.kt)("strong",{parentName:"p"},"object")," to define the configuration."),(0,o.kt)("p",null,"For example, the following defines two database connections (Connection), ",(0,o.kt)("inlineCode",{parentName:"p"},"default")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"test"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { join } from 'path';\n\nexport default {\n  typeorm: {\n    dataSource: {\n      default: {\n        type: 'sqlite',\n        database: join(__dirname, '../../default.sqlite')\n        // ...\n      },\n      test: {\n        type: 'mysql',\n        host: '127.0.0.1',\n        port: 3306\n        // ...\n      }\n    }\n  }\n}\n")),(0,o.kt)("p",null,"In use, you need to specify which connection (Connection) the model belongs."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { InjectEntityModel } from '@midwayjs/typeorm';\nimport { User } from './entity/user.entity';\n\nexport class XXX {\n\n  @InjectEntityModel(User, 'test')\n  testUserModel: Repository<User>;\n\n  //...\n}\n")),(0,o.kt)("h3",{id:"column-value-conversion"},"Column value conversion"),(0,o.kt)("p",null,"We can handle column value conversions in the entity definition."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"transformer")," parameters of the column decorator can be used to process entry and exit parameters, such as formatting time."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Entity, Column, CreateDateColumn, PrimaryGeneratedColumn, UpdateDateColumn } from 'typeorm';\nimport * as dayjs from 'dayjs';\n\nconst dateTransformer = {\n  from: (value: Date | number) => {\n    return dayjs(typeof value === 'number '? value: value.getTime()).format('YYYY-MM-DD HH:mm:ss');\n  },\n  to: () => new Date()\n};\n\n@Entity()\nexport class Photo {\n  // ...\n\n  @CreateDateColumn({\n    type: 'timestamp',\n    transformer: dateTransformer\n  })\n  createdAt: Date;\n}\n\n")),(0,o.kt)("h3",{id:"specify-the-default-data-source"},"Specify the default data source"),(0,o.kt)("p",null,"When including multiple data sources, you can specify a default data source."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"export default {\n  // ...\n  typeorm: {\n    dataSource: {\n      default1: {\n        // ...\n      },\n      default2: {\n        // ...\n      },\n    },\n    // \u591a\u4e2a\u6570\u636e\u6e90\u65f6\u53ef\u4ee5\u7528\u8fd9\u4e2a\u6307\u5b9a\u9ed8\u8ba4\u7684\u6570\u636e\u6e90\n    defaultDataSourceName: 'default1',\n  },\n};\n")),(0,o.kt)("h3",{id:"get-data-source"},"Get data source"),(0,o.kt)("p",null,"The data source is the DataSource object of TypeORM created, which we can obtain by injecting the built-in data source manager."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Configuration } from '@midwayjs/core';\nimport { TypeORMDataSourceManager } from '@midwayjs/typeorm';\n\n@Configuration({\n  // ...\n})\nexport class MainConfiguration {\n\n  async onReady(container: IMidwayContainer) {\n    const dataSourceManager = await container.getAsync(TypeORMDataSourceManager);\n    const conn = dataSourceManager.getDataSource('default');\n    console.log(dataSourceManager.isConnected(conn));\n  }\n}\n")),(0,o.kt)("p",null,"Starting with v3.8.0, it is also possible to inject via a decorator."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Configuration } from '@midwayjs/core';\nimport { InjectDataSource } from '@midwayjs/typeorm';\nimport { DataSource } from 'typeorm';\n\n@Configuration({\n   //...\n})\nexport class MainConfiguration {\n\n   // Inject the default data source\n   @InjectDataSource()\n   defaultDataSource: DataSource;\n\n   // inject custom data source\n   @InjectDataSource('default1')\n   customDataSource: DataSource;\n\n   async onReady(container: IMidwayContainer) {\n     //...\n   }\n}\n")),(0,o.kt)("h3",{id:"logging"},"Logging"),(0,o.kt)("p",null,"When the data source does not configure a log object, the component will automatically create a ",(0,o.kt)("inlineCode",{parentName:"p"},"typeormLogger")," to save the executed SQL information, which is convenient for troubleshooting and SQL audit."),(0,o.kt)("p",null,"The default configuration is:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"export default {\n   midwayLogger: {\n     clients: {\n       typeormLogger: {\n         fileLogName: 'midway-typeorm.log',\n         enableError: false,\n         level: 'info',\n       },\n     },\n   }\n}\n")),(0,o.kt)("p",null,"We can use the normal log configuration method to make adjustments. If you do not want to generate logs, you can configure them to close."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"export default {\n  // ...\n  typeorm: {\n    default: {\n      // All data sources closed\n      logging: false,\n    },\n    dataSource: {\n      default: {\n        // Single data source closed\n        logging: false,\n      },\n    },\n  },\n};\n")),(0,o.kt)("h3",{id:"transaction"},"Transaction"),(0,o.kt)("p",null,"The typeorm transaction needs to get the data source first and then open the transaction."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Provide, Inject } from '@midwayjs/core';\nimport { TypeORMDataSourceManager } from '@midwayjs/typeorm';\nimport { UserDTO } from '../entity/user';\n\n@Provide()\nexport class UserService {\n\n  @Inject()\n  dataSourceManager: TypeORMDataSourceManager;\n\n  async updateUser(user: UserDTO) {\n\n    // get dataSource\n    const dataSource = this.dataSourceManager.getDataSource('default');\n\n    // start transaction\n    await dataSource.transaction(async (transactionalEntityManager) => {\n      // run code\n      await transactionalEntityManager.save(UserDTO, user);\n    });\n  }\n\n}\n")),(0,o.kt)("p",null,"For more information, see ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/typeorm/typeorm/blob/master/docs/transactions.md"},"Documentation"),"."),(0,o.kt)("h3",{id:"cli"},"CLI"),(0,o.kt)("p",null,"TypeORM provides a CLI by default to create entity, migration, etc. For more documents, please see ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/typeorm/typeorm/blob/master/docs/using-cli.md"},"here")," ."),(0,o.kt)("p",null,"Since the default configuration of TypeORM is different from Midway, we provide a simple modified version to adapt to Midway's data source configuration."),(0,o.kt)("p",null,"Check the installation:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ npx mwtypeorm -h\n")),(0,o.kt)("p",null,"Commonly used commands are"),(0,o.kt)("p",null,"  ",(0,o.kt)("strong",{parentName:"p"},"Create Empty Entity")),(0,o.kt)("p",null,"A ",(0,o.kt)("inlineCode",{parentName:"p"},"src/entity/User.ts")," file will be created."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ npx mwtypeorm entity:create src/entity/User\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Create Migration")),(0,o.kt)("p",null,"A ",(0,o.kt)("inlineCode",{parentName:"p"},"src/migration/******-photo.entity.ts")," file will be generated based on the existing data source."),(0,o.kt)("p",null,"For example, the configuration is as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"export default {\n   typeorm: {\n     dataSource: {\n       'default': {\n         //...\n         entities: [\n           '**/entity/*.entity{.ts,.js}'\n         ],\n         migrations: [\n           '**/migration/*.ts'\n         ],\n       },\n   },\n}\n")),(0,o.kt)("p",null,"You can execute the following command to generate a migration file for the modified Entity."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ npx mwtypeorm migration:generate -d ./src/config/config.default.ts src/migration/photo\n")),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"Note: Since the above entities configuration needs to be reused between CLI and Midway, the scanning method supported by both is adopted.")),(0,o.kt)("h3",{id:"about-table-structure-synchronization"},"About Table Structure Synchronization"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"If you already have a table structure, you want to automatically create an Entity and use the ",(0,o.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/typeorm-model-generator"},"Generator")),(0,o.kt)("li",{parentName:"ul"},"If you already have Entity code, if you want to create a table structure, please use ",(0,o.kt)("inlineCode",{parentName:"li"},"synchronize: true")," in the configuration, be aware that data may be lost"),(0,o.kt)("li",{parentName:"ul"},"If it is already online, but the table structure has been modified, you can use ",(0,o.kt)("inlineCode",{parentName:"li"},"migration:generate")," in the CLI")),(0,o.kt)("h2",{id:"frequently-asked-questions"},"Frequently Asked Questions"),(0,o.kt)("h3",{id:"handshake-inactivity-timeout"},"Handshake inactivity timeout"),(0,o.kt)("p",null,"Generally, it is due to network reasons. If it appears locally, you can ping but telnet is not available. You can try to execute the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$sudo sysctl -w net.inet.tcp.sack=0\n")),(0,o.kt)("h3",{id:"time-zone-display-of-mysql-time-column"},"Time Zone Display of mysql Time Column"),(0,o.kt)("p",null,"In general, UTC time is stored in the database. If you want to return the time in the current time zone, you can use the following method"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"1. Check the environment where the mysql database is located.")),(0,o.kt)("p",null,"For example, the default time zone is the system UTC time, which can be adjusted to ",(0,o.kt)("inlineCode",{parentName:"p"},"+08:00"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"mysql> show global variables like '%time_zone%';\n+------------------+--------+\n| Variable_name    | Value  |\n+------------------+--------+\n| system_time_zone | UTC    |\n| time_zone        | SYSTEM |\n+------------------+--------+\n2 rows in set (0.05 sec)\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"2. Check the environment where the service code is deployed.")),(0,o.kt)("p",null,"Try to be consistent with the environment where the database is located. If not, set the ",(0,o.kt)("inlineCode",{parentName:"p"},"timezone")," in the configuration (set to be consistent with mysql)."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"export default {\n  typeorm: {\n    dataSource: {\n      default: {\n        type: 'mysql',\n        // ...\n        timezone: '+08:00',\n      },\n    },\n  },\n}\n")),(0,o.kt)("h3",{id:"time-column-returns-string"},"Time column returns string"),(0,o.kt)("p",null,"Configuring dateStrings can make mysql return time in DATETIME format, which is only valid for mysql."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/config/config.default.ts\nexport default {\n  // ...\n  typeorm: {\n    dataSource: {\n      default: {\n        //...\n        dateStrings: true\n      }\n    }\n  },\n}\n")),(0,o.kt)("p",null,"Entity return types can be adjusted if ",(0,o.kt)("inlineCode",{parentName:"p"},"@CreateDateColumn")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"@UpdateDateColumn")," are used."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"@UpdateDateColumn({\n  name: \"gmt_modified\",\n  type: 'timestamp'\n})\ngmtModified: string;\n\n@CreateDateColumn({\n  name: \"gmt_create\",\n  type: 'timestamp',\n})\ngmtCreate: string;\n")),(0,o.kt)("p",null,"The effect is as follows:"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Before configuration:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"gmtModified: 2021-12-13T03:49:43.000Z\ngmtCreate: 2021-12-13T03:49:43.000Z\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"After configuration:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"gmtModified: '2021-12-13 11:49:43',\ngmtCreate: '2021-12-13 11:49:43'\n")),(0,o.kt)("h3",{id:"install-mysql-and-mysql2-at-the-same-time"},"Install mysql and mysql2 at the same time"),(0,o.kt)("p",null,"When you have both mysql and mysql2 in node_modules, typeorm will automatically load mysql instead of mysql2."),(0,o.kt)("p",null,"If you need to use mysql2 at this time, please specify the driver."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/config/config.default.ts\nexport default {\n  // ...\n  typeorm: {\n    dataSource: {\n      default: {\n        //...\n        type: 'mysql',\n        driver: require('mysql2')\n      }\n    }\n  },\n}\n")),(0,o.kt)("h3",{id:"cannot-read-properties-of-undefined-reading-getrepository"},"Cannot read properties of undefined (reading 'getRepository')"),(0,o.kt)("p",null,"Generally, the configuration is incorrect, and two configurations can be considered."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("ol",{parentName:"li"},(0,o.kt)("li",{parentName:"ol"},"Check whether the ",(0,o.kt)("inlineCode",{parentName:"li"},"entities")," configuration in ",(0,o.kt)("inlineCode",{parentName:"li"},"config.default.ts")," is correct"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("ol",{parentName:"li",start:2},(0,o.kt)("li",{parentName:"ol"},"Check the ",(0,o.kt)("inlineCode",{parentName:"li"},"configuration.ts")," file to confirm whether orm is imported")))))}u.isMDXComponent=!0}}]);