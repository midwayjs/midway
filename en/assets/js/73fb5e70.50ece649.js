"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7597],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(n),d=r,f=u["".concat(l,".").concat(d)]||u[d]||m[d]||i;return n?a.createElement(f,o(o({ref:t},c),{},{components:n})):a.createElement(f,o({ref:t},c))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:r,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5533:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const i={},o="HTTP request",s={unversionedId:"extensions/axios",id:"extensions/axios",title:"HTTP request",description:"Simple HTTP request",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/extensions/axios.md",sourceDirName:"extensions",slug:"/extensions/axios",permalink:"/en/docs/extensions/axios",draft:!1,editUrl:"https://github.com/midwayjs/midway/tree/main/site/docs/extensions/axios.md",tags:[],version:"current",frontMatter:{},sidebar:"component",next:{title:"I18n",permalink:"/en/docs/extensions/i18n"}},l={},p=[{value:"Simple HTTP request",id:"simple-http-request",level:2},{value:"Simple method form",id:"simple-method-form",level:3},{value:"Instance form",id:"instance-form",level:3},{value:"Axios support",id:"axios-support",level:2},{value:"Installation dependency",id:"installation-dependency",level:3},{value:"Introducing components",id:"introducing-components",level:3},{value:"Use the default Axios instance",id:"use-the-default-axios-instance",level:3},{value:"Configure the default Axios instance",id:"configure-the-default-axios-instance",level:3},{value:"Create different instances",id:"create-different-instances",level:3},{value:"Configure global interceptors",id:"configure-global-interceptors",level:3},{value:"Use Axios directly",id:"use-axios-directly",level:3}],c={toc:p},u="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"http-request"},"HTTP request"),(0,r.kt)("h2",{id:"simple-http-request"},"Simple HTTP request"),(0,r.kt)("p",null,"Midway has a built-in simple HTTP request client, which can be used without introducing a third-party package."),(0,r.kt)("p",null,"The default Get request, and the returned data is Buffer."),(0,r.kt)("h3",{id:"simple-method-form"},"Simple method form"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { makeHttpRequest } from '@midwayjs/core';\n\nconst result = await makeHttpRequest('http://127.1:7001/');\n\n// Buffer.isBuffer(result.data) => true\n")),(0,r.kt)("p",null,"Get request, with Query, the return type is JSON."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { makeHttpRequest } from '@midwayjs/core';\n\nconst result = await makeHttpRequest('http://127.1:7001/', {\n  data: {\n    a: 1\n    B: 2\n  },\n  dataType: 'json', // returned data format\n});\n\n// typeof result.data => 'object'\n// result.data.url => /?a=1&b=2\n")),(0,r.kt)("p",null,"You can specify the type"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { makeHttpRequest } from '@midwayjs/core';\n\nconst result = await makeHttpRequest('http://127.1:7001/', {\n  method: 'GET',\n  dataType: 'json',\n});\n")),(0,r.kt)("p",null,"Returns the text format."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { makeHttpRequest } from '@midwayjs/core';\n\nconst result = await makeHttpRequest('http://127.1:7001/', {\n  method: 'GET',\n  dataType: 'text',\n});\n")),(0,r.kt)("p",null,"POST requests and returns JSON."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { makeHttpRequest } from '@midwayjs/core';\n\nconst result = await makeHttpRequest('http://127.1:7001/', {\n  method: 'POST',\n  data: {\n    a: 1\n    B: 2\n  },\n  dataType: 'json',\n  contentType:'json', // the post sent is json\n});\n\n// result.data...\n")),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Note, please do not return the result object directly in the request. The result object is a standard httpResponse, which cannot be directly serialized in most scenarios, and an object loop error will be thrown.")),(0,r.kt)("p",null,"Set the request timeout time."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { makeHttpRequest } from '@midwayjs/core';\n\nlet err;\n// Timeout will report an error, pay attention to catch\ntry {\n  const result = await makeHttpRequest('http://127.1:7001/', {\n    method: 'GET',\n    dataType: 'text',\n    timeout: 500\n  });\n} catch (e) {\n  err = e;\n}\n")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"The built-in Http client only provides the simplest capabilities. If you need complex functions (front and back interception or other additional configurations), please use axios.")),(0,r.kt)("h3",{id:"instance-form"},"Instance form"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { HttpClient } from '@midwayjs/core';\n\nconst httpclient = new HttpClient();\nconst result = await httpclient.request('http://127.1:7001/');\n\n// Buffer.isBuffer(result.data) => true\n")),(0,r.kt)("p",null,"Same as method form parameters."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { HttpClient } from '@midwayjs/core';\n\nconst httpclient = new HttpClient();\nconst result = await httpclient.request('http://127.1:7001/', {\n  method: 'POST',\n  data: {\n    a: 1\n    B: 2\n  },\n  dataType: 'json',\n  contentType:'json', // the post sent is json\n});\n\n// result.data...\n")),(0,r.kt)("p",null,"In the example form, you can reuse the created object, and you can bring some fixed parameters, such as header, with each request."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { HttpClient } from '@midwayjs/core';\n\nconst httpclient = new HttpClient({\n  headers: {\n    'x-timeout': '5'\n  },\n  method: 'POST',\n  timeout: 2000\n});\n\n// Bring headers with you every time\nconst result = await httpclient.request('http://127.1:7001/');\n\n")),(0,r.kt)("h2",{id:"axios-support"},"Axios support"),(0,r.kt)("p",null,"Midway wraps the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/axios/axios"},"axios")," package, allowing you to simply use the axios interface in your code."),(0,r.kt)("p",null,"Some relationships with axios are as follows:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The interfaces are exactly the same."),(0,r.kt)("li",{parentName:"ul"},"Adaptation dependency injection writing, complete type definition"),(0,r.kt)("li",{parentName:"ul"},"Facilitate unified instance management and configuration")),(0,r.kt)("p",null,"Related information:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null}))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Can be used for standard projects"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Can be used for Serverless"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Can be used for integration"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Contains independent main framework"),(0,r.kt)("td",{parentName:"tr",align:null},"\u274c")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Contains independent logs"),(0,r.kt)("td",{parentName:"tr",align:null},"\u274c")))),(0,r.kt)("h3",{id:"installation-dependency"},"Installation dependency"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ npm i @midwayjs/axios@3 --save\n")),(0,r.kt)("p",null,"Or reinstall the following dependencies in ",(0,r.kt)("inlineCode",{parentName:"p"},"package.json"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "dependencies": {\n    "@midwayjs/axios": "^3.0.0",\n    // ...\n  },\n}\n')),(0,r.kt)("h3",{id:"introducing-components"},"Introducing components"),(0,r.kt)("p",null,"First, introduce components and import them in ",(0,r.kt)("inlineCode",{parentName:"p"},"configuration.ts"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Configuration } from '@midwayjs/core';\nimport * as axios from '@midwayjs/axios';\nimport { join } from 'path'\n\n@Configuration({\n  imports: [\n    axios // import axios components\n  ],\n  importConfigs: [\n    join(__dirname, 'config')\n  ]\n})\nexport class MainConfiguration {\n}\n")),(0,r.kt)("p",null,"It can then be injected into the business code."),(0,r.kt)("h3",{id:"use-the-default-axios-instance"},"Use the default Axios instance"),(0,r.kt)("p",null,"The API is the same as ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/axios/axios"},"axios"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"axios.request(config)\naxios.get(url[, config])\naxios.delete(url[, config])\naxios.head(url[, config])\naxios.options(url[, config])\naxios.post(url[, data[, config]])\naxios.put(url[, data[, config]])\naxios.patch(url[, data[, config]])\naxios.postForm(url[, data[, config]])\naxios.putForm(url[, data[, config]])\naxios.patchForm(url[, data[, config]])\n")),(0,r.kt)("p",null,"Use example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { HttpService } from '@midwayjs/axios';\n\n@Provide()\nexport class UserService {\n\n  @Inject()\n  httpService: HttpService;\n\n  async invoke() {\n    const url = 'https://midwayjs.org/resource/101010100.json';\n    const result = await this.httpService.get(url);\n    // TODO result\n  }\n}\n")),(0,r.kt)("h3",{id:"configure-the-default-axios-instance"},"Configure the default Axios instance"),(0,r.kt)("p",null,"The HttpService instance is equivalent to ",(0,r.kt)("inlineCode",{parentName:"p"},"axios.create"),", so you can have some configuration parameters. These parameters are the same as axios itself. We can configure it in ",(0,r.kt)("inlineCode",{parentName:"p"},"src/config.default.ts"),"."),(0,r.kt)("p",null,"For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export default {\n  // ...\n  axios: {\n    default: {\n      // The configuration of all instances reuse.\n    },\n    clients: {\n      // The configuration of the default instance.\n      default: {\n        baseURL: 'https://api.example.com',\n        // 'headers' are custom headers to be sent\n        headers: {\n          'X-Requested-With': 'XMLHttpRequest'\n        },\n        timeout: 1000, // default is '0' (no timeout)\n\n        // 'withCredentials' indicates whether or not cross-site Access-Control requests\n        // should be made using credentials\n        withCredentials: false, // default\n      },\n    }\n  }\n}\n")),(0,r.kt)("p",null,"For more information, see ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/axios/axios#config-defaults"},"axios global config"),"."),(0,r.kt)("h3",{id:"create-different-instances"},"Create different instances"),(0,r.kt)("p",null,"it is the same as multiple instances of other services. configure different keys."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export default {\n  // ...\n  axios: {\n    default: {\n      // The configuration of all instances reuse.\n    },\n    clients: {\n      default: {\n        // Default instance\n      },\n      customAxios: {\n        // Custom instance\n      }\n    }\n  }\n}\n")),(0,r.kt)("p",null,"The usage is as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { HttpServiceFactory, HttpService } from '@midwayjs/axios';\nimport { InjectClient } from '@midwayjs/core';\n\n@Provide()\nexport class UserService {\n\n  @InjectClient(HttpServiceFactory, 'customAxios')\n  customAxios: HttpService;\n\n  async invoke() {\n    const url = 'https://midwayjs.org/resource/101010100.json';\n    const result = await this.customAxios.get(url);\n    // TODO result\n  }\n}\n")),(0,r.kt)("h3",{id:"configure-global-interceptors"},"Configure global interceptors"),(0,r.kt)("p",null,"If you are using the default Axios instance, you can configure it as follows."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Configuration, IMidwayContainer } from '@midwayjs/core';\nimport * as axios from '@midwayjs/axios';\nimport { join } from 'path';\n\n@Configuration({\n  imports: [\n    axios // import axios components\n  ],\n  importConfigs: [\n    join(__dirname, 'config')\n  ]\n})\nexport class MainConfiguration {\n\n  async onReady(container: IMidwayContainer) {\n    const httpService = await container.getAsync(axios.HttpService);\n    httpService.interceptors.request.use (\n      config => {\n        // Do something before request is sent\n        return config;\n      },\n      error => {\n        // Do something with request error\n        return Promise.reject(error);\n      }\n    );\n  }\n}\n")),(0,r.kt)("p",null,"If you want to configure other instances, you can refer to the following code."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Configuration, IMidwayContainer } from '@midwayjs/core';\nimport * as axios from '@midwayjs/axios';\nimport { join } from 'path';\n\n@Configuration({\n  imports: [\n    axios // import axios components\n  ],\n  importConfigs: [\n    join(__dirname, 'config')\n  ]\n})\nexport class MainConfiguration {\n\n  async onReady(container: IMidwayContainer) {\n    const httpServiceFactory = await container.getAsync(axios.HttpServiceFactory);\n    const customAxios = httpServiceFactory.get('customAxios');\n    customAxios.interceptors.request.use(\n      config => {\n        //...\n      },\n      error => {\n        //...\n      }\n    );\n  }\n}\n")),(0,r.kt)("h3",{id:"use-axios-directly"},"Use Axios directly"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"@midayjs/axios")," also exported the original instance of ",(0,r.kt)("inlineCode",{parentName:"p"},"axios"),", which could be useful in helper functions."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Axios } from '@midwayjs/axios';\nimport { ReadStream, createWriteStream } from 'fs';\nimport { finished } from 'stream/promises';\n\nasync function download(url: string, filename: string) {\n  const writer = await createWriteStream(filename);\n  const res = Axios.get<ReadStream>(url, {\n    responseType: 'stream',\n  });\n  res.data.pipe(writer);\n  await finished(writer);\n  return res;\n}\n")))}m.isMDXComponent=!0}}]);