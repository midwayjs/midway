"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[29702],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>k});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),u=o,k=d["".concat(l,".").concat(u)]||d[u]||m[u]||r;return n?a.createElement(k,i(i({ref:t},p),{},{components:n})):a.createElement(k,i({ref:t},p))}));function k(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:o,i[1]=s;for(var c=2;c<r;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},57721:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var a=n(87462),o=(n(67294),n(3905));const r={},i="SocketIO",s={unversionedId:"extensions/socketio",id:"extensions/socketio",title:"SocketIO",description:"Socket.io is a common library in the industry, which can be used for real-time, two-way and event-based communication between browsers and servers.",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/extensions/socketio.md",sourceDirName:"extensions",slug:"/extensions/socketio",permalink:"/en/docs/extensions/socketio",draft:!1,editUrl:"https://github.com/midwayjs/midway/tree/main/site/docs/extensions/socketio.md",tags:[],version:"current",frontMatter:{},sidebar:"component",previous:{title:"etcd",permalink:"/en/docs/extensions/etcd"},next:{title:"WebSocket",permalink:"/en/docs/extensions/ws"}},l={},c=[{value:"Install dependency",id:"install-dependency",level:2},{value:"Open the component",id:"open-the-component",level:2},{value:"Directory structure",id:"directory-structure",level:2},{value:"Socket.io works",id:"socketio-works",level:2},{value:"Socket service",id:"socket-service",level:2},{value:"Messages and responses",id:"messages-and-responses",level:2},{value:"Socket Middleware",id:"socket-middleware",level:2},{value:"Middleware writing",id:"middleware-writing",level:3},{value:"Global middleware",id:"global-middleware",level:3},{value:"Middleware in Namespace",id:"middleware-in-namespace",level:3},{value:"Local test",id:"local-test",level:2},{value:"Message waiting for receipt (ack)",id:"message-waiting-for-receipt-ack",level:2},{value:"Common messages and broadcasts",id:"common-messages-and-broadcasts",level:2},{value:"Application(io object)",id:"applicationio-object",level:2},{value:"Socket deployment",id:"socket-deployment",level:2},{value:"Socket service port",id:"socket-service-port",level:3},{value:"Nginx configuration",id:"nginx-configuration",level:3},{value:"Configuration",id:"configuration",level:2},{value:"Available configuration",id:"available-configuration",level:3},{value:"Adapter",id:"adapter",level:2},{value:"Configure redis adapter",id:"configure-redis-adapter",level:3},{value:"Sticky session",id:"sticky-session",level:2},{value:"Use the WebSocket protocol",id:"use-the-websocket-protocol",level:3},{value:"Adjust the process model",id:"adjust-the-process-model",level:3},{value:"Common API",id:"common-api",level:2},{value:"Get the number of connections",id:"get-the-number-of-connections",level:3},{value:"Modify sid generation",id:"modify-sid-generation",level:3},{value:"Frequently Asked Questions",id:"frequently-asked-questions",level:2},{value:"The server/client is not connected and does not respond",id:"the-serverclient-is-not-connected-and-does-not-respond",level:3},{value:"Configure CORS",id:"configure-cors",level:3}],p={toc:c},d="wrapper";function m(e){let{components:t,...n}=e;return(0,o.kt)(d,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"socketio"},"SocketIO"),(0,o.kt)("p",null,"Socket.io is a common library in the industry, which can be used for real-time, two-way and event-based communication between browsers and servers."),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://img.alicdn.com/imgextra/i2/O1CN01YTye6U22gICvarVur_!!6000000007149-2-tps-1204-352.png",alt:"image.png"})),(0,o.kt)("p",null,"Midway provides support and encapsulation for Socket.io, which can simply create a Socket.io service. This article demonstrates how to provide Socket.io service under Midway system."),(0,o.kt)("p",null,"Midway uses the latest ",(0,o.kt)("a",{parentName:"p",href:"https://socket.io/docs/v4"},"Socket.io (v4.0.0)")," for development."),(0,o.kt)("p",null,"Related information:"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Provide services")),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Description"),(0,o.kt)("th",{parentName:"tr",align:null}))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Can be used for standard projects"),(0,o.kt)("td",{parentName:"tr",align:null},"\u2705")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Can be used for Serverless"),(0,o.kt)("td",{parentName:"tr",align:null},"\u274c")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Can be used for integration"),(0,o.kt)("td",{parentName:"tr",align:null},"\u2705")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Contains independent main framework"),(0,o.kt)("td",{parentName:"tr",align:null},"\u2705")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Contains independent logs"),(0,o.kt)("td",{parentName:"tr",align:null},"\u274c")))),(0,o.kt)("h2",{id:"install-dependency"},"Install dependency"),(0,o.kt)("p",null,"Install Socket.io dependencies in existing projects."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ npm i @midwayjs/socketio@3 --save\n## optional dependencies\n$ npm i @types/socket.io-client socket.io-client --save-dev\n")),(0,o.kt)("p",null,"Or reinstall the following dependencies in ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "dependencies": {\n    "@midwayjs/socket.io": "^3.0.0",\n    // Client optional\n    "socket.io-client": "^4.4.1 ",\n    // ...\n  },\n  "devDependencies": {\n    // Client optional\n    "@types/socket.io-client": "^1.4.36 ",\n    // ...\n  }\n}\n')),(0,o.kt)("h2",{id:"open-the-component"},"Open the component"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"@midwayjs/socket.io")," can be used as an independent main framework."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Configuration } from '@midwayjs/core';\nimport * as socketio from '@midwayjs/socketio';\n\n@Configuration({\n  imports: [socketio]\n  // ...\n})\nexport class MainConfiguration {\n  async onReady() {\n        // ...\n  }\n}\n\n")),(0,o.kt)("p",null,"It can also be attached to other main frameworks, such as ",(0,o.kt)("inlineCode",{parentName:"p"},"@midwayjs/koa"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Configuration } from '@midwayjs/core';\nimport * as koa from '@midwayjs/koa';\nimport * as socketio from '@midwayjs/socketio';\n\n@Configuration({\n  imports: [koa, socketio]\n  // ...\n})\nexport class MainConfiguration {\n  async onReady() {\n        // ...\n  }\n}\n\n\n")),(0,o.kt)("h2",{id:"directory-structure"},"Directory structure"),(0,o.kt)("p",null,"The following is the basic directory structure of the Socket.io project. Similar to traditional applications, we have created a ",(0,o.kt)("inlineCode",{parentName:"p"},"socket")," directory to store service codes for Soscket.io services."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},".\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 src\n\u2502   \u251c\u2500\u2500 configuration.ts          ## entry configuration file\n\u2502   \u251c\u2500\u2500 interface.ts\n\u2502   \u2514\u2500\u2500 socket                      ## socket.io service file\n\u2502       \u2514\u2500\u2500 hello.controller.ts\n\u251c\u2500\u2500 test\n\u251c\u2500\u2500 bootstrap.js                  ## service startup Portal\n\u2514\u2500\u2500 tsconfig.json\n")),(0,o.kt)("h2",{id:"socketio-works"},"Socket.io works"),(0,o.kt)("p",null,"The two-way channel between the Socket.io server and the Socket.io client (browser, Node.js or another programming language) is established through a ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/WebSocket"},"WebSocket connection"),". When it is not available, HTTP long polling will be used as a backup means."),(0,o.kt)("p",null,"The Socket.io code is built based on the Engine.io library and belongs to the upper-level implementation of Engine.io. Engine.io is responsible for the connection between the entire server and the client, including connection check, transmission method, etc. Socket.io is responsible for the reconnection, packet buffering, broadcasting and other features of the upper layer."),(0,o.kt)("p",null,"Socket.io(Engine.io) implements two Transports (transmission mode)."),(0,o.kt)("p",null,"The first is HTTP long polling. HTTP Get requests are used for long-running (long connection) and Post requests are used for short-running (short connection)."),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://img.alicdn.com/imgextra/i3/O1CN01xhdZHA1XTEpUue7CQ_!!6000000002924-2-tps-1778-1068.png",alt:"image.png"})),(0,o.kt)("p",null,"The second is the WebSocket protocol, which is directly based on ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API"},"WebSocket Connection")," implementation. It provides a two-way and low-latency communication channel between the server and the client."),(0,o.kt)("p",null,"By default, Socket.io will first use HTTP long polling to connect and send a data similar to the following structure."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'{\n  "sid": "FSDjX-WRwSA4zTZMALqx", // session id of connection\n  "upgrades": ["WebSocket"], // Upgradeable protocol\n  "pingInterval": 2500, //heartbeat interval\n  "pingTimeout": 20000 // heartbeat timeout\n}\n')),(0,o.kt)("p",null,"When the current service meets the requirements of upgrading to the WebSocket protocol, it will automatically upgrade to the WebSocket protocol, as shown in the following figure.\n",(0,o.kt)("img",{parentName:"p",src:"https://img.alicdn.com/imgextra/i4/O1CN01QHZi9x1mz2ZLecco3_!!6000000005024-2-tps-585-216.png",alt:"image.png"})),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"1, the first handshake, transmission sid and other structures"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("ol",{parentName:"li",start:2},(0,o.kt)("li",{parentName:"ol"},"Send data using HTTP long polling"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("ol",{parentName:"li",start:3},(0,o.kt)("li",{parentName:"ol"},"Use HTTP long polling to return data"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("ol",{parentName:"li",start:4},(0,o.kt)("li",{parentName:"ol"},"Upgrade the protocol and use the WebSocket protocol to send data"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("ol",{parentName:"li",start:5},(0,o.kt)("li",{parentName:"ol"},"When the protocol is upgraded, close the previous long polling")))),(0,o.kt)("p",null,"After that, normal WebSocket communication began."),(0,o.kt)("h2",{id:"socket-service"},"Socket service"),(0,o.kt)("p",null,"Midway defines the Socket service through the ",(0,o.kt)("inlineCode",{parentName:"p"},"@WSController")," decorator."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"@WSController('/')\nexport class HelloController {\n  // ...\n}\n")),(0,o.kt)("p",null,"The input of ",(0,o.kt)("inlineCode",{parentName:"p"},"@WSController")," refers to the Namespace (non-path) of each Socket. If no Namespace is provided, each Socket.io will automatically create a",(0,o.kt)("inlineCode",{parentName:"p"},"/"),"Namespace and put all client connections into it."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"The namespace here supports strings and regularization.")),(0,o.kt)("p",null,"When the Namespace has a client connection, a ",(0,o.kt)("inlineCode",{parentName:"p"},"connection")," event will be triggered. We can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"@OnWSConnection()")," decorator in the code to decorate a method. When each client connects to the Namespace for the first time, the method will be automatically called."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { WSController, OnWSConnection, Inject } from '@midwayjs/core';\nimport { Context } from '@midwayjs/socketio';\n\n@WSController('/')\nexport class HelloSocketController {\n\n  @Inject()\n  ctx: Context;\n\n  @OnWSConnection()\n  async onConnectionMethod() {\n    console.log('on client connect', this.ctx.id);\n  }\n}\n\n")),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"The ctx here is equivalent to the socket instance.")),(0,o.kt)("h2",{id:"messages-and-responses"},"Messages and responses"),(0,o.kt)("p",null,"Socket.io obtains data by monitoring events. Midway provides a ",(0,o.kt)("inlineCode",{parentName:"p"},"@OnWSMessage()")," decorator to format the received event. Every time the client sends an event, the modified method will be executed."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { WSController, Provide, OnWSMessage, Inject } from '@midwayjs/core';\nimport { Context } from '@midwayjs/socketio';\n\n@WSController('/')\nexport class HelloSocketController {\n\n  @Inject()\n  ctx: Context;\n\n  @OnWSMessage('myEvent')\n  async gotMessage(data) {\n    console.log('on data got', this.ctx.id, data);\n  }\n}\n\n")),(0,o.kt)("p",null,"Note that since Socket.io can pass multiple data in one event, the parameters here can be multiple."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"  @OnWSMessage('myEvent')\n  async gotMessage(data1, data2, data3) {\n    // ...\n  }\n")),(0,o.kt)("p",null,"After the data is obtained, the data is processed through business logic, and then the result is returned to the client. When returned, we also send it to the client through another event."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"@WSEmit")," decorator returns the return value of the method to the client."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { WSController, OnWSConnection, Inject } from '@midwayjs/core';\nimport { Context } from '@midwayjs/socketio';\n\n@WSController('/')\nexport class HelloSocketController {\n\n  @Inject()\n  ctx: Context;\n\n  @OnWSMessage('myEvent')\n  @WSEmit('myEventResult')\n  async gotMessage() {\n    return 'hello world'; // The hello world string is returned to the client here.\n  }\n}\n")),(0,o.kt)("p",null,"The above code, our method returns the value Hello World, which will be automatically sent to the ",(0,o.kt)("inlineCode",{parentName:"p"},"myEventResult")," event monitored by the client."),(0,o.kt)("h2",{id:"socket-middleware"},"Socket Middleware"),(0,o.kt)("p",null,"The middleware in Socket is written similarly to the ",(0,o.kt)("a",{parentName:"p",href:"../middleware"},"Web middleware"),", but the timing of loading is slightly different."),(0,o.kt)("p",null,"Since Socket has two stages of connecting and receiving messages, middleware is divided into several categories."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The global Connection middleware will take effect on connections under all namespaces"),(0,o.kt)("li",{parentName:"ul"},"The global Message middleware will take effect for all message under the namespace."),(0,o.kt)("li",{parentName:"ul"},"Controller middleware will take effect on connection and message under a single namespace."),(0,o.kt)("li",{parentName:"ul"},"Connection middleware generates messages for connection under a single namespace."),(0,o.kt)("li",{parentName:"ul"},"Message middleware will take effect on message under a single namespace.")),(0,o.kt)("h3",{id:"middleware-writing"},"Middleware writing"),(0,o.kt)("p",null,"Note that the middleware must return the result via ",(0,o.kt)("inlineCode",{parentName:"p"},"return"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/middleware/socket.middleware.ts\nimport { Middleware } from '@midwayjs/core';\nimport { Context, NextFunction } from '@midwayjs/socketio';\n\n@Middleware()\nexport class SocketMiddleware {\n  resolve() {\n    return async (ctx: Context, next: NextFunction) => {\n      // ...\n      return await next();\n    }\n  }\n}\n\n")),(0,o.kt)("h3",{id:"global-middleware"},"Global middleware"),(0,o.kt)("p",null,"Similar to web middleware, use the ",(0,o.kt)("inlineCode",{parentName:"p"},"socket.io")," app instance to register middleware."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import * as socketio from '@midwayjs/socketio';\n\n@Configuration({\n  imports: [\n    socketio\n  ],\n  // ...\n})\nexport class MainConfiguration {\n\n  @App('socketIO')\n  app: Application;\n\n  async onReady() {\n    // Can register global connection middleware\n    this.app.useConnectionMiddleware(SocketMiddleware);\n    // You can also register global Message middleware\n    this.app.useMiddleware(SocketMiddleware);\n  }\n}\n\n")),(0,o.kt)("h3",{id:"middleware-in-namespace"},"Middleware in Namespace"),(0,o.kt)("p",null,"Through the decorator, the middleware of different stages is registered."),(0,o.kt)("p",null,"For example, Namespace-level middleware will take effect on connection and message under a single namespace."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"// ...\n\n// Namespace-level middleware\n@WSController('/api', { middleware: [SocketMiddleware]})\nexport class APIController {\n}\n\n")),(0,o.kt)("p",null,"Connection middleware, which takes effect when connected."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"// ...\n\n@WSController('/api')\nexport class APIController {\n\n  // Middleware when Connection is triggered\n  @OnWSConnection({\n    middleware: [SocketMiddleware]\n  })\n  init() {\n    // ...\n  }\n}\n")),(0,o.kt)("p",null,"Message middleware that takes effect when a specific message is received."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"// ...\n\n@WSController('/api')\nexport class APIController {\n\n  // Middleware when Message is triggered\n  @OnWSMessage('my', {\n    middleware: [SocketMiddleware]\n  })\n  @WSEmit('ok')\n  async gotMyMessage() {\n    // ...\n  }\n}\n")),(0,o.kt)("h2",{id:"local-test"},"Local test"),(0,o.kt)("p",null,"Because the socket.io framework can be started independently (attached to the default http service or with other midway frameworks)."),(0,o.kt)("p",null,"When starting as a standalone framework, you need to specify a port."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/config/config.default\nexport default {\n  // ...\n  socketIO: {\n    port: 3000\n  },\n}\n")),(0,o.kt)("p",null,"When starting as a sub-framework (for example, and http, because http does not specify a port during a single test (automatically generated using supertest), it cannot be tested well, and only one port can be explicitly specified in the test environment."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/config/config.unittest\nexport default {\n  // ...\n  koa: {\n    port: null,\n  },\n  socketIO\n    port: 3000\n  },\n}\n")),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("ol",{parentName:"li"},(0,o.kt)("li",{parentName:"ol"},"The port here is only the port that the WebSocket service starts during testing."))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("ol",{parentName:"li",start:2},(0,o.kt)("li",{parentName:"ol"},"The port in koa is null, which means that the http service will not be started without configuring the port in the test environment."))))),(0,o.kt)("p",null,"Like other Midway testing methods, we use ",(0,o.kt)("inlineCode",{parentName:"p"},"createApp")," to start the project."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { createApp, close } from '@midwayjs/mock'\n// The Framework definition used here is subject to the main framework.\nimport { Framework } from '@midwayjs/koa';\n\ndescribe('/test/index.test.ts', () => {\n  it('should create app and test socket.io', async () => {\n    const app = await createApp<Framework>();\n\n    //...\n\n    await close(app);\n  });\n\n});\n")),(0,o.kt)("p",null,"You can use ",(0,o.kt)("inlineCode",{parentName:"p"},"socket.io-client")," to test. You can also use a test client that is encapsulated by the ",(0,o.kt)("inlineCode",{parentName:"p"},"socket.io-client")," module provided by Midway."),(0,o.kt)("p",null,"If our server processing logic is as follows (returns the result of adding the data passed by the client):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"@OnWSMessage('myEvent')\n@WSEmit('myEventResult')\nasync gotMessage(data1, data2, data3) {\n  return {\n    name: 'harry',\n    result: data1 + data2 + data3\n  };\n}\n")),(0,o.kt)("p",null,"The test code is as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { createApp, close } from '@midwayjs/mock'\nimport { Framework } from '@midwayjs/koa';\nimport { createSocketIOClient } from '@midwayjs/mock';\nimport { once } from 'events';\n\ndescribe('/test/index.test.ts', () => {\n  it('should test create socket app', async () => {\n\n    // Create a service\n    const app = await createApp<Framework>();\n\n    // Create a corresponding client\n    const client = await createSocketIOClient({\n      port: 3000\n    });\n\n    // Return the result\n    const data = await new Promise(resolve => {\n      client.on('myEventResult', resolve);\n      // Send event\n      client.send('myEvent', 1, 2, 3);\n    });\n\n    // Judgment result\n    expect(data).toEqual({\n      name: 'harry',\n      result: 6\n    });\n\n    // Close the client\n    await client.close();\n        // Close the server\n    await close(app);\n  });\n\n});\n")),(0,o.kt)("p",null,"If you have multiple clients, you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"once")," method of the ",(0,o.kt)("inlineCode",{parentName:"p"},"events")," module that comes with the node to optimize the code."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { createApp, close } from '@midwayjs/mock'\nimport { Framework } from '@midwayjs/koa';\nimport { createSocketIOClient } from '@midwayjs/mock';\nimport { once } from 'events';\n\ndescribe('/test/index.test.ts', () => {\n\n  it('should test create socket app', async () => {\n\n    // Create a service\n    const app = await createApp<Framework>();\n\n    // create a client\n    const client = await createSocketIOClient({\n      port: 3000\n    });\n\n    // Monitor with promise writing of events\n    const gotEvent = once(client, 'myEventResult');\n    // Send event\n    client.send('myEvent', 1, 2, 3);\n    // Waiting for return\n    const [data] = await gotEvent;\n    // Judgment result\n    expect(data).toEqual({\n      name: 'harry',\n      result: 6\n    });\n\n    // Close the client\n    await client.close();\n        // Close the server\n    await close(app);\n  });\n\n}\n")),(0,o.kt)("p",null,"The two writing methods have the same effect, just write as you understand."),(0,o.kt)("h2",{id:"message-waiting-for-receipt-ack"},"Message waiting for receipt (ack)"),(0,o.kt)("p",null,"Socket.io supports a way of writing directly returning messages. When the client delivers a message, if the last parameter is a function(callback), the server can get the callback and return the data directly to the client without creating a new message."),(0,o.kt)("p",null,"Our service code does not need to be changed. ",(0,o.kt)("inlineCode",{parentName:"p"},"@midwayjs/socketio")," will judge the last parameter and automatically return it to the client."),(0,o.kt)("p",null,"For example, server code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"@OnWSMessage('myEvent')\n@WSEmit('myEventResult')\nasync gotMessage(data1, data2, data3) {\n  return {\n    name: 'harry',\n    result: data1 + data2 + data3\n  };\n}\n")),(0,o.kt)("p",null,"Client test code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { createApp, close } from '@midwayjs/mock'\nimport { Framework } from '@midwayjs/koa';\nimport { createSocketIOClient } from '@midwayjs/mock';\nimport { once } from 'events';\n\ndescribe('/test/index.test.ts', () => {\n\n  it('should test create socket app', async () => {\n\n    // Create a service\n    const app = await createApp<Framework>();\n\n    // Create a corresponding client\n    const client = await createSocketIOClient({\n      port: 3000\n    });\n\n    // Send event, which is written in await\n    const data = await client.sendWithAck('myEvent', 1, 2, 3);\n\n    // Judgment result\n    expect(data).toEqual({\n      name: 'harry',\n      result: 6\n    });\n\n    // Close the client\n    await client.close();\n        // Close the server\n    await close(app);\n  });\n\n});\n")),(0,o.kt)("h2",{id:"common-messages-and-broadcasts"},"Common messages and broadcasts"),(0,o.kt)("p",null,"The following code example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Context, Application } from '@midwayjs/socketio';\nimport { WSController, OnWSMessage, WSEmit, App, Inject } from '@midwayjs/core';\n\n@WSController('/')\nexport class HelloSocketController {\n\n  @Inject()\n  ctx: Context;\n\n  @App('socketIO')\n  app: Application;\n\n  @OnWSMessage('myEvent')\n  @WSEmit('myEventResult')\n  async gotMessage() {\n    // TODO\n  }\n}\n")),(0,o.kt)("p",null,"Send to the client (or return directly in the form of a decorator)."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'this.ctx.emit("hello", "can you hear me?", 1, 2, "abc");\n')),(0,o.kt)("p",null,"Sent to all clients except the sender."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'this.ctx.broadcast.emit("broadcast", "hello friends! ");\n')),(0,o.kt)("p",null,"Send it to all clients in the ",(0,o.kt)("inlineCode",{parentName:"p"},"game")," room except the sender."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'this.ctx.to("game").emit("nice game", "let\'s play a game");\n')),(0,o.kt)("p",null,"It is sent to all clients in ",(0,o.kt)("inlineCode",{parentName:"p"},"game1")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"game2")," rooms except the sender."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'this.ctx.to("game1").to("game2").emit("nice game", "let\'s play a game (too)");\n')),(0,o.kt)("p",null,"It is sent to all clients in the ",(0,o.kt)("inlineCode",{parentName:"p"},"game")," room, including the sender."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'this.app.in("game").emit("big-announcement", "the game will start soon");\n')),(0,o.kt)("p",null,"Broadcast to clients ",(0,o.kt)("inlineCode",{parentName:"p"},"myNamespace")," namespaces, including senders."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'// Send from app\nthis.app.of("myNamespace").emit("bigger-announcement", "the tournament will start soon");\n// Send from ctx\nthis.ctx.nsp.emit("bigger-announcement", "the tournament will start soon");\n')),(0,o.kt)("p",null,"Send to specific namespace and room, including sender."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'// Send from app\nthis.app.of("myNamespace").to("room").emit("event", "message");\n// Send from ctx\nthis.ctx.nsp.emit("bigger-announcement", "the tournament will start soon");\n')),(0,o.kt)("p",null,"Send to all clients connected to the current node (when there are multiple nodes, it is multi-process)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'this.app.local.emit("hi", "my lovely babies");\n')),(0,o.kt)("h2",{id:"applicationio-object"},"Application(io object)"),(0,o.kt)("p",null,"The code created by the traditional Socket.io server is as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'const io = require("socket.io")(3000);\n\nio.on("connection", socket => {\n  // ...\n});\n')),(0,o.kt)("p",null,"in the ",(0,o.kt)("inlineCode",{parentName:"p"},"@midwayjs/socketio")," framework, the Application instance is the io instance with the same type and capability. The app instance injected by the ",(0,o.kt)("inlineCode",{parentName:"p"},"@App")," decorator is an io object."),(0,o.kt)("p",null,"We can do some global things through this object."),(0,o.kt)("p",null,"For example, get all socket instances."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'// Returns all socket instances\nconst sockets = await app.fetchSockets();\n\n// Returns all socket instances in room1.\nconst sockets = await app.in("room1").fetchSockets();\n\n// Returns an instance of a specific socketId\nconst sockets = await app.in(theSocketId).fetchSockets();\n')),(0,o.kt)("p",null,"Under multiple frameworks, the main framework is generally a Web framework. We can obtain the app of Socket.io by specifying the key."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Application as SocketApplication } from '@midwayjs/socketio';\nimport { Controller, App } from '@midwayjs/core';\n\n@Controller()\nexport class UserController {\n\n  @App('socketIO')\n  socketApp: SocketApplication;\n}\n")),(0,o.kt)("p",null,"In this way, we can call the existing socket connection through the app object of ",(0,o.kt)("inlineCode",{parentName:"p"},"@midwayjs/socketio")," (equivalent to io)."),(0,o.kt)("p",null,"For example, an HTTP request is called to broadcast to all clients under a specific namespace:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Application as SocketApplication } from '@midwayjs/socketio';\nimport { Provide, Controller, App, Get } from '@midwayjs/core';\n\n@Controller()\nexport class UserController {\n\n  @App('socketIO')\n  socketApp: SocketApplication;\n\n  @Get()\n  async invoke() {\n    // Broadcast the connection under/\n    this.socketApp.of('/').emit('hi', 'everyone');\n  }\n}\n")),(0,o.kt)("p",null,"For more io API, please refer to the ",(0,o.kt)("a",{parentName:"p",href:"https://socket.io/docs/v4/server-instance/"},"Socket.io Server instance documentation"),"."),(0,o.kt)("h2",{id:"socket-deployment"},"Socket deployment"),(0,o.kt)("h3",{id:"socket-service-port"},"Socket service port"),(0,o.kt)("p",null,"The configuration sample of ",(0,o.kt)("inlineCode",{parentName:"p"},"@midwayjs/socketio")," is as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/config/config.default\nexport default {\n  // ...\n  socketIO: {\n    port: 7001\n  },\n}\n")),(0,o.kt)("p",null,"HTTP ports can be reused when ",(0,o.kt)("inlineCode",{parentName:"p"},"@midwayjs/socketio")," and other ",(0,o.kt)("inlineCode",{parentName:"p"},"@midwayjs/Web"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"@midwayjs/Koa"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"@midwayjs/express")," are enabled at the same time."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/config/config.default\nexport default {\n  // ...\n  koa: {\n    port: 7001\n  },\n  socketIO: {\n    // No configuration here\n  },\n}\n")),(0,o.kt)("h3",{id:"nginx-configuration"},"Nginx configuration"),(0,o.kt)("p",null,"Generally speaking, our Node.js service will have similar reverse proxy services such as Nginx before. Here, take the configuration of Nginx as an example."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-nginx"},'http {\n  server {\n    listen 80;\n    server_name example.com;\n\n    location / {\n      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n      proxy_set_header Host $host;\n\n      proxy_pass http://localhost:7001;\n\n      proxy_http_version 1.1;\n      proxy_set_header Upgrade $http_upgrade;\n      proxy_set_header Connection "upgrade";\n    }\n  }\n}\n')),(0,o.kt)("h2",{id:"configuration"},"Configuration"),(0,o.kt)("h3",{id:"available-configuration"},"Available configuration"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Property"),(0,o.kt)("th",{parentName:"tr",align:null},"Type"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"port"),(0,o.kt)("td",{parentName:"tr",align:null},"number"),(0,o.kt)("td",{parentName:"tr",align:null},"Optionally, if the port is passed, socket.io will create an HTTP service for the port and attach the socket service to it. If you want to work with other midway web frameworks, do not pass this parameter.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"path"),(0,o.kt)("td",{parentName:"tr",align:null},"string"),(0,o.kt)("td",{parentName:"tr",align:null},"optional, server path")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"adapter"),(0,o.kt)("td",{parentName:"tr",align:null},"object"),(0,o.kt)("td",{parentName:"tr",align:null},"Adapters for distributed processing, such as configurable redis-adapter")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"connectTimeout"),(0,o.kt)("td",{parentName:"tr",align:null},"number"),(0,o.kt)("td",{parentName:"tr",align:null},"Client timeout, in MS, default value ",(0,o.kt)("em",{parentName:"td"},"45000"))))),(0,o.kt)("p",null,"For more information about startup options, see ",(0,o.kt)("a",{parentName:"p",href:"https://socket.io/docs/v4/server-api/#new-Server-httpServer-options"},"Socket.io documentation"),"."),(0,o.kt)("h2",{id:"adapter"},"Adapter"),(0,o.kt)("p",null,"Adapter is an adaptation layer for Socket.io to communicate with multiple machines and processes during distributed deployment. Currently, there are several adapters officially provided by socket.io:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("ol",{parentName:"li"},(0,o.kt)("li",{parentName:"ol"},"cluster-adapter is used to adapt between single machine and multi-process"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("ol",{parentName:"li",start:2},(0,o.kt)("li",{parentName:"ol"},"The redis-adapter is used to adapt between multiple machines and processes.")))),(0,o.kt)("p",null,"In distributed scenarios, we generally use redis-adapater to implement functions."),(0,o.kt)("h3",{id:"configure-redis-adapter"},"Configure redis adapter"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"@midwayjs/socketio")," provides an adapter (adapter) entry configuration. You only need to initialize the adapter instance and pass it in."),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"Socket.io has updated the original adapter package name. The current package name is ",(0,o.kt)("inlineCode",{parentName:"p"},"@socket.io/redis-adapter")," (originally called ",(0,o.kt)("inlineCode",{parentName:"p"},"socket.io-redis")," ). For more information about migration, see the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/socketio/socket.io-redis-adapter#migrating-from-socketio-redis"},"official documentation"),".")),(0,o.kt)("p",null,"The installation is as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ npm i @socket.io/redis-adapter --save\n")),(0,o.kt)("p",null,"For more information, see ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/socketio/socket.io-redis-adapter"},"Official documentation"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/config/config.default\nimport { createAdapter } from '@socket.io/redis-adapter';\nimport Redis from 'ioredis';\n\n// github document creates a redis instance\n\nconst pubClient = new redis (/* redis configuration */);\nconst subClient = pubClient.duplicate();\n\nexport default {\n  // ...\n  socketIO: {\n    adapter: createAdapter(pubClient, subClient)\n  },\n}\n")),(0,o.kt)("p",null,"By running Socket.io using the ",(0,o.kt)("inlineCode",{parentName:"p"},"@socket.io/redis-adapter")," adapter, you can run multiple Socket.io instances in different processes or servers, all of which can broadcast and send events to each other."),(0,o.kt)("p",null,"In addition, there are some special APIs on the Adapter, which can be viewed in ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/socketio/socket.io-redis-adapter#api"},"documents"),"."),(0,o.kt)("h2",{id:"sticky-session"},"Sticky session"),(0,o.kt)("p",null,"Since Node.js often uses multi-process (cluster) mode at startup, if the same session (sid) cannot access the same process multiple times, socket.io will report an error."),(0,o.kt)("p",null,"There are two solutions."),(0,o.kt)("h3",{id:"use-the-websocket-protocol"},"Use the WebSocket protocol"),(0,o.kt)("p",null,"The easiest way is to only enable the WebSocket protocol (disable long polling), so that the above problems can be circumvented."),(0,o.kt)("p",null,"You need to configure both server and client."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"// Server\nexport default {\n   //...\n   socketIO: {\n     //...\n     transports: ['websocket'],\n   },\n}\n\n// client\nconst socket = io(\"http://127.0.0.1:7001\", {\n   transports: ['websocket']\n});\n")),(0,o.kt)("h3",{id:"adjust-the-process-model"},"Adjust the process model"),(0,o.kt)("p",null,"This is a relatively complicated method, but in the scenario of pm2 deployment, it is the only solution to support both sticky sessions and polling support."),(0,o.kt)("p",null,"The first step is to disable the ports enabled in the configuration, such as:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/config/config.default\nexport default {\n   koa: {\n     // port: 7001,\n   },\n   socketIO: {\n     //...\n   },\n};\n\n")),(0,o.kt)("p",null,"If development needs, you can add the port in ",(0,o.kt)("inlineCode",{parentName:"p"},"config.local"),", or directly add the port in the scripts of ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'"scripts": {\n   "dev": "cross-env NODE_ENV=local midway-bin dev --ts --port=7001",\n},\n')),(0,o.kt)("p",null,"In the second step, adjust the content of your ",(0,o.kt)("inlineCode",{parentName:"p"},"bootstrap.js")," file to the following code."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const { Bootstrap, ClusterManager, setupStickyMaster } = require('@midwayjs/bootstrap');\nconst http = require('http');\n\n// Create a process manager to handle child processes\nconst clusterManager = new ClusterManager({\n   exec: __filename,\n   count: 4,\n   sticky: true, // enable sticky session support\n});\n\nif (clusterManager. isPrimary()) {\n   // The main process starts an http server to monitor\n   const httpServer = http. createServer();\n   setupStickyMaster(httpServer);\n\n   // start child process\n   clusterManager.start().then(() => {\n     // listening port\n     httpServer.listen(7001);\n     console.log('main process is ok');\n   });\n\n   clusterManager.onStop(async () => {\n     // close http server when stopped\n     await httpServer. close();\n   });\n} else {\n   // subprocess logic\n   Bootstrap\n     .run()\n     .then(() => {\n       console.log('child is ready');\n     });\n}\n\n")),(0,o.kt)("p",null,"When pm2 starts, there is no need to specify the ",(0,o.kt)("inlineCode",{parentName:"p"},"-i")," parameter to start the worker, directly ",(0,o.kt)("inlineCode",{parentName:"p"},"pm2 --name=xxx ./bootstrap.js")," to make it start only one process."),(0,o.kt)("h2",{id:"common-api"},"Common API"),(0,o.kt)("h3",{id:"get-the-number-of-connections"},"Get the number of connections"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"Const count = app.engine.clientsCount; //Get all connections\nConst count = app.of('/').sockets.size; // Get the number of connections in a single namespace\n")),(0,o.kt)("h3",{id:"modify-sid-generation"},"Modify sid generation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'const uuid = require("uuid");\n\napp.engine.generateId = (req) => {\n  return uuid.v4(); // must be unique across all Socket.IO servers\n}\n')),(0,o.kt)("h2",{id:"frequently-asked-questions"},"Frequently Asked Questions"),(0,o.kt)("h3",{id:"the-serverclient-is-not-connected-and-does-not-respond"},"The server/client is not connected and does not respond"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"The port server is consistent with the client")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"export default {\n  koa: {\n    Port: 7001, // Port here\n  }\n}\n\n// or\n\nexport default {\n  socketIO: {\n    Port: 7001, // Port here\n  }\n}\n")),(0,o.kt)("p",null,"Consistent with the following ports."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"// socket.io client\nconst socket = io('************:7001', {\n  //...\n});\n\n// midway's socket.io test client\nconst client = await createSocketIOClient({\n  port: 7001\n});\n")),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},"The path of the server and the path of the client must be consistent. Path refers to the part of the startup parameter.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"// config.default\nexport default {\n  socketIO: {\n    Path: '/testPath' // This is the server path\n  }\n}\n")),(0,o.kt)("p",null,"Consistent with the path below"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"// socket.io client\nconst socket = io('************:7001', {\n  Path: '/testPath' // here is the path of the client\n});\n\n// Midway's Socket. io test client\nconst client = await createSocketIOClient({\n  path: '/testPath'\n});\n")),(0,o.kt)("ol",{start:3},(0,o.kt)("li",{parentName:"ol"},"The namespace of the server and the namespace of the client should be consistent.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"// server\n@WSController('/test') // here is the namespace of the server\nexport class HelloController {\n}\n\n// socket.io client\nconst io = require(\"socket.io-client\")\nio('*****:3000/test', {}); // Here is the namespace of the client\n\n\n// midway's socket.io test client\nconst client = await createSocketIOClient({\n  namespace: '/test',\n});\n")),(0,o.kt)("h3",{id:"configure-cors"},"Configure CORS"),(0,o.kt)("p",null,"If a cross-domain error occurs, cors information needs to be configured at startup."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'// config.default\nexport default {\n  socketIO: {\n    cors: {\n      origin: "http://localhost:8080 ",\n      methods: ["GET", "POST"]\n    }\n  }\n}\n')),(0,o.kt)("p",null,"For specific parameters, see ",(0,o.kt)("a",{parentName:"p",href:"https://socket.io/docs/v4/handling-cors/"},"Socket.io Handling CORS"),"."))}m.isMDXComponent=!0}}]);