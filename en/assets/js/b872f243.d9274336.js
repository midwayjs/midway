"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[12125],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var g=o.createContext({}),s=function(e){var t=o.useContext(g),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=s(e.components);return o.createElement(g.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},c=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,g=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=s(n),c=r,m=d["".concat(g,".").concat(c)]||d[c]||u[c]||a;return n?o.createElement(m,l(l({ref:t},p),{},{components:n})):o.createElement(m,l({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,l=new Array(a);l[0]=c;var i={};for(var g in t)hasOwnProperty.call(t,g)&&(i[g]=t[g]);i.originalType=e,i[d]="string"==typeof e?e:r,l[1]=i;for(var s=2;s<a;s++)l[s]=n[s];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}c.displayName="MDXCreateElement"},36323:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>g,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>s});var o=n(87462),r=(n(67294),n(3905));const a={},l="Logger",i={unversionedId:"logger_v3",id:"logger_v3",title:"Logger",description:"Midway provides a unified log access method for different scenarios. Through the @midwayjs/logger package export method, you can easily access the logging system in different scenarios.",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/logger_v3.md",sourceDirName:".",slug:"/logger_v3",permalink:"/en/docs/logger_v3",draft:!1,editUrl:"https://github.com/midwayjs/midway/tree/main/site/docs/logger_v3.md",tags:[],version:"current",frontMatter:{},sidebar:"common",previous:{title:"Life cycle",permalink:"/en/docs/lifecycle"},next:{title:"Cookies and Session",permalink:"/en/docs/cookie_session"}},g={},s=[{value:"Upgrade from 2.0 to 3.0",id:"upgrade-from-20-to-30",level:2},{value:"Logger path and file",id:"logger-path-and-file",level:2},{value:"Usage logger",id:"usage-logger",level:2},{value:"Context logger",id:"context-logger",level:3},{value:"App Logger",id:"app-logger",level:3},{value:"CoreLogger",id:"corelogger",level:3},{value:"Output method and format",id:"output-method-and-format",level:2},{value:"Logger type definition",id:"logger-type-definition",level:2},{value:"Logger configuration",id:"logger-configuration",level:2},{value:"Basic configuration structure",id:"basic-configuration-structure",level:3},{value:"Default Transport",id:"default-transport",level:3},{value:"Configure log level",id:"configure-log-level",level:3},{value:"Configure log root directory",id:"configure-log-root-directory",level:3},{value:"Configure log cutting (rotation)",id:"configure-log-cutting-rotation",level:3},{value:"Configure log cleaning",id:"configure-log-cleaning",level:3},{value:"Configure custom logs",id:"configure-custom-logs",level:3},{value:"Configure log output format",id:"configure-log-output-format",level:3},{value:"Get custom context log",id:"get-custom-context-log",level:3},{value:"Configure context log output format",id:"configure-context-log-output-format",level:3},{value:"Configure delayed initialization",id:"configure-delayed-initialization",level:3},{value:"Configure associated logs",id:"configure-associated-logs",level:3},{value:"Configure console output color",id:"configure-console-output-color",level:3},{value:"Configure JSON output",id:"configure-json-output",level:3},{value:"Custom Transport",id:"custom-transport",level:2},{value:"Inherit existing Transport",id:"inherit-existing-transport",level:3},{value:"Fully customized Transport",id:"fully-customized-transport",level:3},{value:"Dynamic API",id:"dynamic-api",level:2},{value:"Common Problem",id:"common-problem",level:2},{value:"1. The server environment log is not output",id:"1-the-server-environment-log-is-not-output",level:3},{value:"2. The server has no console log",id:"2-the-server-has-no-console-log",level:3},{value:"3. Some Docker environments fail to start",id:"3-some-docker-environments-fail-to-start",level:3},{value:"4. How to convert if there is an old configuration?",id:"4-how-to-convert-if-there-is-an-old-configuration",level:3}],p={toc:s},d="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"logger"},"Logger"),(0,r.kt)("p",null,"Midway provides a unified log access method for different scenarios. Through the ",(0,r.kt)("inlineCode",{parentName:"p"},"@midwayjs/logger")," package export method, you can easily access the logging system in different scenarios."),(0,r.kt)("p",null,"The functions implemented are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Log classification"),(0,r.kt)("li",{parentName:"ul"},"Automatic cutting by size and time"),(0,r.kt)("li",{parentName:"ul"},"Custom output format"),(0,r.kt)("li",{parentName:"ul"},"Unified error log")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"The current version of the log SDK documentation is 3.0. If you need version 2.0, please check ",(0,r.kt)("a",{parentName:"p",href:"/docs/logger"},"this document"),".")),(0,r.kt)("h2",{id:"upgrade-from-20-to-30"},"Upgrade from 2.0 to 3.0"),(0,r.kt)("p",null,"Starting from midway v3.13.0, the 3.0 version of ",(0,r.kt)("inlineCode",{parentName:"p"},"@midwayjs/logger")," is supported."),(0,r.kt)("p",null,"Upgrade the dependency versions in ",(0,r.kt)("inlineCode",{parentName:"p"},"package.json"),", pay attention to the ",(0,r.kt)("inlineCode",{parentName:"p"},"dependencies")," dependencies."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},'{\n   "dependencies": {\n-       "@midwayjs/logger": "2.0.0",\n+       "@midwayjs/logger": "^3.0.0"\n   }\n}\n')),(0,r.kt)("p",null,"If there is no type hint for midwayLogger in the configuration, you need to add a reference to the log library in ",(0,r.kt)("inlineCode",{parentName:"p"},"src/interface.ts"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"// src/interface.ts\n+ import type {} from '@midwayjs/logger';\n")),(0,r.kt)("p",null,"In most scenarios, the two versions are compatible, but since it is a major version upgrade, there will definitely be some differences. For the complete Breaking Change, please view the ","[Change Document]","(",(0,r.kt)("a",{parentName:"p",href:"https://github.com/midwayjs"},"https://github.com/midwayjs")," /logger/blob/main/BREAKING-3.md)."),(0,r.kt)("h2",{id:"logger-path-and-file"},"Logger path and file"),(0,r.kt)("p",null,"Midway will create some default files in the log root directory."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"midway-core.log")," is the log of information printed by the framework and components, corresponding to ",(0,r.kt)("inlineCode",{parentName:"li"},"coreLogger"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"midway-app.log")," is the log of application printing information, corresponding to ",(0,r.kt)("inlineCode",{parentName:"li"},"appLogger"),". In ",(0,r.kt)("inlineCode",{parentName:"li"},"@midawyjs/web"),", the file is ",(0,r.kt)("inlineCode",{parentName:"li"},"midway-web.log")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"common-error.log")," All error logs (all logs created by Midway will repeatedly print errors to this file)")),(0,r.kt)("p",null,"The ",(0,r.kt)("strong",{parentName:"p"},"log path")," and ",(0,r.kt)("strong",{parentName:"p"},"log level")," are different between local development and server deployment. For details, please refer to ","[Configuration log root directory]","(#Configuration log root directory) and ","[Framework\u2019s default level]","(#Framework\u2019s default grade)."),(0,r.kt)("p",null,"##Default log object"),(0,r.kt)("p",null,"Midway provides three different logs in the framework by default, corresponding to three different behaviors."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Log"),(0,r.kt)("th",{parentName:"tr",align:null},"Definition"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Common Usage"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"coreLogger"),(0,r.kt)("td",{parentName:"tr",align:null},"Framework, component level logs"),(0,r.kt)("td",{parentName:"tr",align:null},"Console logs and text logs ",(0,r.kt)("inlineCode",{parentName:"td"},"midway-core.log")," will be output by default, and error logs will be sent to ",(0,r.kt)("inlineCode",{parentName:"td"},"common-error.log")," by default."),(0,r.kt)("td",{parentName:"tr",align:null},"Errors in frameworks and components are generally printed to it.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"appLogger"),(0,r.kt)("td",{parentName:"tr",align:null},"Business-level logs"),(0,r.kt)("td",{parentName:"tr",align:null},"Console logs and text logs ",(0,r.kt)("inlineCode",{parentName:"td"},"midway-app.log")," will be output by default, and error logs will be sent to ",(0,r.kt)("inlineCode",{parentName:"td"},"common-error.log")," by default, in ",(0,r.kt)("inlineCode",{parentName:"td"},"@midawyjs/web"),", The file is ",(0,r.kt)("inlineCode",{parentName:"td"},"midway-web.log"),"."),(0,r.kt)("td",{parentName:"tr",align:null},"Log used by business, generally business logs will be printed into it.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Context logger (reuse appLogger configuration)"),(0,r.kt)("td",{parentName:"tr",align:null},"Request link log"),(0,r.kt)("td",{parentName:"tr",align:null},"By default, ",(0,r.kt)("inlineCode",{parentName:"td"},"appLogger")," is used for output. In addition to sending the error log to ",(0,r.kt)("inlineCode",{parentName:"td"},"common-error.log"),", context information is also added."),(0,r.kt)("td",{parentName:"tr",align:null},"Different protocols have different request log formats. For example, routing information will be output under HTTP.")))),(0,r.kt)("h2",{id:"usage-logger"},"Usage logger"),(0,r.kt)("p",null,"Common log usage methods for Midway."),(0,r.kt)("h3",{id:"context-logger"},"Context logger"),(0,r.kt)("p",null,"The context log is a log associated with the framework context object (Context)."),(0,r.kt)("p",null,"We can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"ctx.logger")," object to print logs after ",(0,r.kt)("a",{parentName:"p",href:"./req_res_app"},"obtaining the ctx object"),"."),(0,r.kt)("p",null,"for example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"ctx.logger.info(\"hello world\");\nctx.logger.debug('debug info');\nctx.logger.warn('WARNNING!!!!');\n\n// Error logging will directly record the complete stack information of the error log and output it to errorLog.\n// In order to ensure that exceptions are traceable, it must be ensured that all thrown exceptions are of type Error, because only type Error will bring stack information and locate the problem.\nctx.logger.error(new Error('custom error'));\n")),(0,r.kt)("p",null,"After execution, we can see log output in two places:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The console sees the output."),(0,r.kt)("li",{parentName:"ul"},"midway-app.log file in the log directory")),(0,r.kt)("p",null,"Output result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"2021-07-22 14:50:59,388 INFO 7739 [-/::ffff:127.0.0.1/-/0ms GET /api/get_user] hello world\n")),(0,r.kt)("p",null,"In the form of injection, we can also directly use the form of ",(0,r.kt)("inlineCode",{parentName:"p"},"@Inject() logger")," to inject ",(0,r.kt)("inlineCode",{parentName:"p"},"ctx.logger"),", which is equivalent to directly calling ",(0,r.kt)("inlineCode",{parentName:"p"},"ctx.logger"),"."),(0,r.kt)("p",null,"for example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Get, Inject, Controller, Provide } from '@midwayjs/core';\nimport { ILogger } from '@midwayjs/logger';\n\n@Controller()\nexport class HelloController {\n\n   @Inject()\n   logger: ILogger;\n\n   @Inject()\n   ctx;\n\n   @Get(\"/\")\n   async hello(){\n     // ...\n\n     // this.logger === ctx.logger\n   }\n}\n")),(0,r.kt)("h3",{id:"app-logger"},"App Logger"),(0,r.kt)("p",null,"If we want to do some application-level logging, such as recording some data information during the startup phase, we can do it through App Logger."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Configuration, Logger } from '@midwayjs/core';\nimport { ILogger } from '@midwayjs/logger';\n\n@Configuration()\nexport class MainConfiguration implements ILifeCycle {\n\n   @Logger()\n   logger: ILogger;\n\n   async onReady(container: IMidwayContainer): Promise<void> {\n     this.logger.debug('debug info');\n     this.logger.info('Startup took %d ms', Date.now() - start);\n     this.logger.warn('warning!');\n\n     this.logger.error(someErrorObj);\n   }\n\n}\n")),(0,r.kt)("p",null,"Note that the ",(0,r.kt)("inlineCode",{parentName:"p"},"@Logger()")," decorator is used here."),(0,r.kt)("h3",{id:"corelogger"},"CoreLogger"),(0,r.kt)("p",null,"In component or framework level development, we will use coreLogger to record logs."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"@Configuration()\nexport class MainConfiguration implements ILifeCycle {\n\n   @Logger('coreLogger')\n   logger: ILogger;\n\n   async onReady(container: IMidwayContainer): Promise<void> {\n     this.logger.debug('debug info');\n     this.logger.info('Startup took %d ms', Date.now() - start);\n     this.logger.warn('warning!');\n\n     this.logger.error(someErrorObj);\n   }\n\n}\n")),(0,r.kt)("h2",{id:"output-method-and-format"},"Output method and format"),(0,r.kt)("p",null,"Midway's log object provides five methods: ",(0,r.kt)("inlineCode",{parentName:"p"},"error()"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"warn()"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"info()"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"debug()"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"write()"),"."),(0,r.kt)("p",null,"Examples are as follows."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"logger.debug('debug info');\nlogger.info('Startup takes %d ms', Date.now() - start);\nlogger.warn('warning!');\nlogger.error(new Error('my error'));\nlogger.write('abcdef');\n")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"write")," method is used to output the user's original format log.")),(0,r.kt)("p",null,"Formatting method based on ",(0,r.kt)("inlineCode",{parentName:"p"},"util.format"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"logger.info('%s %d', 'aaa', 222);\n")),(0,r.kt)("p",null,"Commonly used ones include"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"%s")," string placeholder"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"%d")," digital placeholder"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"%j")," json placeholder")),(0,r.kt)("p",null,"For more placeholders and details, please refer to the ",(0,r.kt)("a",{parentName:"p",href:"https://nodejs.org/dist/latest-v14.x/docs/api/util.html#util_util_format_format_args"},"util.format")," method of node.js."),(0,r.kt)("h2",{id:"logger-type-definition"},"Logger type definition"),(0,r.kt)("p",null,"In most cases, users should use the simplest ",(0,r.kt)("inlineCode",{parentName:"p"},"ILogger")," definition in ",(0,r.kt)("inlineCode",{parentName:"p"},"@midwayjs/core"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Provide, Logger, ILogger } from '@midwayjs/core';\n\n@Provide()\nexport class UserService {\n\n   @Inject()\n   logger: ILogger;\n\n   async getUser() {\n     this.logger.info('hello user');\n   }\n}\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"ILogger")," definition only provides the simplest ",(0,r.kt)("inlineCode",{parentName:"p"},"debug"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"info"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"warn")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"error")," methods."),(0,r.kt)("p",null,"In some scenarios, we need more complex definitions. In this case, we need to use the ",(0,r.kt)("inlineCode",{parentName:"p"},"ILogger")," definition provided by ",(0,r.kt)("inlineCode",{parentName:"p"},"@midwayjs/logger"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Provide, Logger } from '@midwayjs/core';\nimport { ILogger } from '@midwayjs/logger';\n\n@Provide()\nexport class UserService {\n\n   @Inject()\n   logger: ILogger;\n\n   async getUser() {\n     // ...\n   }\n\n}\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"ILogger"),"The definition can refer to the description in interface, or view ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/midwayjs/logger/blob/main/src/interface.ts"},"code"),"."),(0,r.kt)("h2",{id:"logger-configuration"},"Logger configuration"),(0,r.kt)("h3",{id:"basic-configuration-structure"},"Basic configuration structure"),(0,r.kt)("p",null,"We can configure various log behaviors in the configuration file."),(0,r.kt)("p",null,"The log configuration in Midway includes two parts: ",(0,r.kt)("strong",{parentName:"p"},"global configuration")," and ",(0,r.kt)("strong",{parentName:"p"},"individual log configuration"),". The two configurations will be merged and overwritten."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/config/config.default.ts\nimport { MidwayConfig } from '@midwayjs/core';\n\nexport default {\n   midwayLogger: {\n     default: {\n       // ...\n     },\n     clients: {\n       coreLogger: {\n         // ...\n       },\n       appLogger: {\n         // ...\n       }\n     }\n   },\n} as MidwayConfig;\n")),(0,r.kt)("p",null,"As mentioned above, each object in the ",(0,r.kt)("inlineCode",{parentName:"p"},"clients")," configuration section is an independent log configuration item, and its configuration will be merged with the ",(0,r.kt)("inlineCode",{parentName:"p"},"default")," section to create a logger instance."),(0,r.kt)("h3",{id:"default-transport"},"Default Transport"),(0,r.kt)("p",null,"In logger module, four Transports ",(0,r.kt)("inlineCode",{parentName:"p"},"console"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"file"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"error")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"json")," are built-in by default. Among them, Midway enables ",(0,r.kt)("inlineCode",{parentName:"p"},"console"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"file")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"error")," by default. More information can be configured through to modify."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/config/config.default.ts\nimport { MidwayConfig } from '@midwayjs/core';\n\nexport default {\n   midwayLogger: {\n     default: {\n       transports: {\n         console: {\n           // console transport configuration\n         },\n         file: {\n           // file transport configuration\n         },\n         error: {\n           // error transport configuration\n         },\n       }\n     },\n     // ...\n   },\n} as MidwayConfig;\n")),(0,r.kt)("p",null,"If a transport is not required, it can be set to ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/config/config.default.ts\nimport { MidwayConfig } from '@midwayjs/core';\n\nexport default {\n   midwayLogger: {\n     default: {\n       transports: {\n         console: false,\n       }\n     },\n     // ...\n   },\n} as MidwayConfig;\n")),(0,r.kt)("h3",{id:"configure-log-level"},"Configure log level"),(0,r.kt)("p",null,"In Midway, under normal circumstances, we only use four levels: ",(0,r.kt)("inlineCode",{parentName:"p"},"error"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"warn"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"info"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"debug"),"."),(0,r.kt)("p",null,"The log level indicates the lowest level that can currently output logs. For example, when your log level is set to ",(0,r.kt)("inlineCode",{parentName:"p"},"warn"),", only ",(0,r.kt)("inlineCode",{parentName:"p"},"warn")," and higher ",(0,r.kt)("inlineCode",{parentName:"p"},"error")," level logs can be output."),(0,r.kt)("p",null,"Midway has its own default log level."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"In the development environment (local, test, unittest), the text and console log levels are unified to ",(0,r.kt)("inlineCode",{parentName:"li"},"info"),"."),(0,r.kt)("li",{parentName:"ul"},"In a server environment, in order to reduce the number of logs, the log level of ",(0,r.kt)("inlineCode",{parentName:"li"},"coreLogger")," is ",(0,r.kt)("inlineCode",{parentName:"li"},"warn"),", while other logs are ",(0,r.kt)("inlineCode",{parentName:"li"},"info"),".")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/config/config.default.ts\nimport { MidwayConfig } from '@midwayjs/core';\n\nexport default {\n   midwayLogger: {\n     default: {\n       level: 'info',\n     },\n     // ...\n   },\n} as MidwayConfig;\n")),(0,r.kt)("p",null,"The level of the logger and the level of the Transport can be set separately. The level of the Transport has a higher priority than the level of the logger."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/config/config.default.ts\nimport { MidwayConfig } from '@midwayjs/core';\n\nexport default {\n   midwayLogger: {\n     default: {\n       // level of logger\n       level: 'info',\n       transports: {\n         file: {\n           //level of file transport\n           level: 'warn'\n         }\n       }\n     },\n     // ...\n   },\n} as MidwayConfig;\n")),(0,r.kt)("p",null,"We can also adjust the log level of a specific logger, such as:"),(0,r.kt)("p",null,"Adjust ",(0,r.kt)("inlineCode",{parentName:"p"},"coreLogger")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"appLogger"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/config/config.default.ts\nimport { MidwayConfig } from '@midwayjs/core';\n\nexport default {\n   midwayLogger: {\n     clients: {\n       coreLogger: {\n         level: 'warn',\n         // ...\n       },\n       appLogger: {\n         level: 'warn',\n         // ...\n       }\n     }\n   },\n} as MidwayConfig;\n")),(0,r.kt)("p",null,"In special scenarios, the global log level can also be temporarily adjusted."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/config/config.default.ts\nimport { MidwayConfig } from '@midwayjs/core';\n\nexport default {\n   midwayLogger: {\n     default: {\n       level: 'info',\n       transports: {\n         console: {\n           level: 'warn'\n         }\n       }\n     },\n     // ...\n   },\n} as MidwayConfig;\n")),(0,r.kt)("h3",{id:"configure-log-root-directory"},"Configure log root directory"),(0,r.kt)("p",null,"By default, Midway will output logs to the ",(0,r.kt)("strong",{parentName:"p"},"log root")," during local development and server deployment."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The local log root directory is under the ",(0,r.kt)("inlineCode",{parentName:"li"},"${app.appDir}/logs/project name")," directory"),(0,r.kt)("li",{parentName:"ul"},"The server's log root directory is under the user directory ",(0,r.kt)("inlineCode",{parentName:"li"},"${process.env.HOME}/logs/project name")," (Linux/Mac) and ",(0,r.kt)("inlineCode",{parentName:"li"},"${process.env.USERPROFILE}/logs/project name")," (Windows), For example ",(0,r.kt)("inlineCode",{parentName:"li"},"/home/admin/logs/example-app"),".")),(0,r.kt)("p",null,"We can configure the root directory where the log is located. Note that all Transport paths must be modified."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/config/config.default.ts\nimport { MidwayConfig } from '@midwayjs/core';\n\nexport default {\n   midwayLogger: {\n     default: {\n       transports: {\n         file: {\n           dir: '/home/admin/logs',\n         },\n         error: {\n           dir: '/home/admin/logs',\n         },\n       }\n     },\n     // ...\n   },\n} as MidwayConfig;\n")),(0,r.kt)("h3",{id:"configure-log-cutting-rotation"},"Configure log cutting (rotation)"),(0,r.kt)("p",null,"Under the default behavior, the same log object ",(0,r.kt)("strong",{parentName:"p"},"will generate two files"),"."),(0,r.kt)("p",null,"Taking ",(0,r.kt)("inlineCode",{parentName:"p"},"midway-core.log")," as an example, when the application starts, it will generate a file in the format of ",(0,r.kt)("inlineCode",{parentName:"p"},"midway-core.YYYY-MM-DD")," with a timestamp of the day, and a ",(0,r.kt)("inlineCode",{parentName:"p"},"midway-core.log")," without a timestamp. soft link file."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Soft links will not be generated under windows")),(0,r.kt)("p",null,"To facilitate the configuration of log collection and viewing, the soft link file always points to the latest log file."),(0,r.kt)("p",null,"When ",(0,r.kt)("inlineCode",{parentName:"p"},"00:00")," is reached in the morning, a new file will be generated in the form of ",(0,r.kt)("inlineCode",{parentName:"p"},"midway-core.log.YYYY-MM-DD")," ending with the current day's log."),(0,r.kt)("p",null,"At the same time, when a single log file exceeds 200M, it will be automatically cut and a new log file will be generated."),(0,r.kt)("p",null,"Cutting by size behavior can be adjusted through configuration."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export default {\n   midwayLogger: {\n     default: {\n       transports: {\n         file: {\n           maxSize: '100m',\n         },\n         error: {\n           maxSize: '100m',\n         },\n       }\n     },\n     // ...\n   },\n} as MidwayConfig;\n")),(0,r.kt)("h3",{id:"configure-log-cleaning"},"Configure log cleaning"),(0,r.kt)("p",null,"By default, logs exist for 7 days."),(0,r.kt)("p",null,"This behavior can be adjusted through configuration, such as saving for 3 days instead."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export default {\n   midwayLogger: {\n     default: {\n       transports: {\n         file: {\n           maxFiles: '3d',\n         },\n         error: {\n           maxFiles: '3d',\n         },\n       }\n     },\n     // ...\n   },\n} as MidwayConfig;\n")),(0,r.kt)("p",null,"You can also configure a number to indicate the maximum number of log files to retain."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export default {\n   midwayLogger: {\n     default: {\n       transports: {\n         file: {\n           maxFiles: '3',\n         },\n         error: {\n           maxFiles: '3d',\n         },\n       }\n     },\n     // ...\n   },\n} as MidwayConfig;\n")),(0,r.kt)("h3",{id:"configure-custom-logs"},"Configure custom logs"),(0,r.kt)("p",null,"It can be configured as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export default {\n   midwayLogger: {\n     clients: {\n       abcLogger: {\n         fileLogName: 'abc.log'\n         // ...\n       }\n     }\n     // ...\n   },\n} as MidwayConfig;\n")),(0,r.kt)("p",null,"Customized logs can be obtained through ",(0,r.kt)("inlineCode",{parentName:"p"},"@Logger('abcLogger')"),"."),(0,r.kt)("p",null,"For more logging options, please refer to ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/midwayjs/logger/blob/main/src/interface.ts"},"LoggerOptions Description")," in interface."),(0,r.kt)("h3",{id:"configure-log-output-format"},"Configure log output format"),(0,r.kt)("p",null,"The display format refers to the string structure of a single line of text when outputting logs. "),(0,r.kt)("p",null,"Each logger object can be configured with an output format. The display format is a method that returns a string structure, and the parameter is an info object."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { LoggerInfo } from '@midwayjs/logger';\n\nexport default {\n  midwayLogger: {\n    clients: {\n      appLogger: {\n        format: (info: LoggerInfo) => {\n          return `${info.timestamp} ${info.LEVEL} ${info.pid} ${info.labelText}${info.message}`;\n        }\n        // ...\n      },\n      customOtherLogger: {\n        format: (info: LoggerInfo) => {\n          return 'xxxx';\n        }\n      }\n    }\n    // ...\n  },\n} as MidwayConfig;\n")),(0,r.kt)("p",null,"The default properties of the info object are as follows:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"Attribute name")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"Description")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"Example")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"timestamp"),(0,r.kt)("td",{parentName:"tr",align:null},"Timestamp, default is ",(0,r.kt)("inlineCode",{parentName:"td"},"'YYYY-MM-DD HH:mm:ss,SSS")," format."),(0,r.kt)("td",{parentName:"tr",align:null},"2020-12-30 07:50:10,453")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"level"),(0,r.kt)("td",{parentName:"tr",align:null},"Lowercase log level"),(0,r.kt)("td",{parentName:"tr",align:null},"info")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"LEVEL"),(0,r.kt)("td",{parentName:"tr",align:null},"uppercase log level"),(0,r.kt)("td",{parentName:"tr",align:null},"INFO")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"pid"),(0,r.kt)("td",{parentName:"tr",align:null},"current process pid"),(0,r.kt)("td",{parentName:"tr",align:null},"3847")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"message"),(0,r.kt)("td",{parentName:"tr",align:null},"result of util.format"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"args"),(0,r.kt)("td",{parentName:"tr",align:null},"Original user input parameters"),(0,r.kt)("td",{parentName:"tr",align:null},"[ 'a', 'b', 'c' ]")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"ctx"),(0,r.kt)("td",{parentName:"tr",align:null},"Context object associated when using ContextLogger"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"originError"),(0,r.kt)("td",{parentName:"tr",align:null},"Original error object, obtained after traversing parameters, poor performance"),(0,r.kt)("td",{parentName:"tr",align:null},"error instance itself")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"originArgs"),(0,r.kt)("td",{parentName:"tr",align:null},"Same as args, only compatible with older versions"),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)("h3",{id:"get-custom-context-log"},"Get custom context log"),(0,r.kt)("p",null,"Context log is logged based on ",(0,r.kt)("strong",{parentName:"p"},"original log object")," and will reuse all formats of the original log. Their relationship is as follows."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// pseudocode\nconst contextLogger = customLogger.createContextLogger(ctx);\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"@Inject")," can only inject the default context log. We can obtain the ",(0,r.kt)("strong",{parentName:"p"},"context log")," corresponding to other ",(0,r.kt)("strong",{parentName:"p"},"custom log")," through the ",(0,r.kt)("inlineCode",{parentName:"p"},"ctx.getLogger")," method. The context log is associated with ctx. The same context and the same key will obtain the same log object. When ctx is destroyed, the log object will also be recycled."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Provide } from '@midwayjs/core';\nimport { Context } from '@midwayjs/koa';\n\n@Provide()\nexport class UserService {\n\n   @Inject()\n   ctx: Context;\n\n   async getUser() {\n     // What is obtained here is the context log object corresponding to customLogger\n     const customLogger = this.ctx.getLogger('customLogger');\n     customLogger.info('hello world');\n   }\n\n}\n")),(0,r.kt)("h3",{id:"configure-context-log-output-format"},"Configure context log output format"),(0,r.kt)("p",null,"The context log is based on the ",(0,r.kt)("strong",{parentName:"p"},"original log object")," and will reuse all the formats of the original log, but we can separately configure the corresponding context log format of the log object."),(0,r.kt)("p",null,"There is an additional ctx object in the info object of the context log. Let's take modifying the context log of ",(0,r.kt)("inlineCode",{parentName:"p"},"customLogger")," as an example."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export default {\n   midwayLogger: {\n     clients: {\n       customLogger: {\n         contextFormat: info => {\n           const ctx = info.ctx;\n           return `${info.timestamp} ${info.LEVEL} ${info.pid} [${Date.now() - ctx.startTime}ms ${ctx.method}] ${info.message}`;\n         }\n         // ...\n       }\n     }\n     // ...\n   },\n} as MidwayConfig;\n")),(0,r.kt)("p",null,"Then when you use context log output, it will become your format by default."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"ctx.getLogger('customLogger').info('hello world');\n// 2021-01-28 11:10:19,334 INFO 9223 [2ms POST] hello world\n")),(0,r.kt)("p",null,"Note that since ",(0,r.kt)("inlineCode",{parentName:"p"},"App Logger")," is the default log object of all frameworks and is quite special, some existing frameworks configure its context format by default, causing the configuration in the ",(0,r.kt)("inlineCode",{parentName:"p"},"midwayLogger")," field to be invalid."),(0,r.kt)("p",null,"To do this, you need to modify the context log format configuration of a certain framework separately. Please jump to a different framework to view it."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"[Modify koa's context log format]","(./extensions/koa#Modify context log)"),(0,r.kt)("li",{parentName:"ul"},"[Modify egg's context log format]","(./extensions/egg#Modify context log)"),(0,r.kt)("li",{parentName:"ul"},"[Modify the context log format of express]","(./extensions/express#Modify the context log)")),(0,r.kt)("h3",{id:"configure-delayed-initialization"},"Configure delayed initialization"),(0,r.kt)("p",null,"The log can be initialized lazily using the ",(0,r.kt)("inlineCode",{parentName:"p"},"lazyLoad")," configuration."),(0,r.kt)("p",null,"for example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export default {\n   midwayLogger: {\n     clients: {\n       customLoggerA: {\n         // ..\n       },\n       customLoggerB: {\n         lazyLoad: true,\n       },\n     }\n     // ...\n   },\n} as MidwayConfig;\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"customLoggerA")," will be initialized immediately when the framework starts, while ",(0,r.kt)("inlineCode",{parentName:"p"},"customLoggerB")," will be initialized when the business actually uses ",(0,r.kt)("inlineCode",{parentName:"p"},"getLogger")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"@Logger")," injection for the first time."),(0,r.kt)("p",null,"This function is very suitable for scenarios where logs are dynamically created, but the configurations are expected to be merged together."),(0,r.kt)("h3",{id:"configure-associated-logs"},"Configure associated logs"),(0,r.kt)("p",null,"The log object can be configured with an associated log object name."),(0,r.kt)("p",null,"for example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export default {\n   midwayLogger: {\n     clients: {\n       customLoggerA: {\n         aliasName: 'customLoggerB',\n         // ...\n       },\n     }\n     // ...\n   },\n} as MidwayConfig;\n")),(0,r.kt)("p",null,"When using the API to retrieve, the same log object will be retrieved with different names."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"app.getLogger('customLoggerA') => customLoggerA\napp.getLogger('customLoggerB') => customLoggerA\n")),(0,r.kt)("h3",{id:"configure-console-output-color"},"Configure console output color"),(0,r.kt)("p",null,"When outputting to the console, if the command line supports color output, different colors will be output for different log levels. If color is not supported, it will not be displayed."),(0,r.kt)("p",null,"You can turn off color output directly through configuration."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export default {\n   midwayLogger: {\n     default: {\n       transports: {\n         console: {\n           autoColors: false,\n         }\n       }\n     }\n     // ...\n   },\n} as MidwayConfig;\n")),(0,r.kt)("h3",{id:"configure-json-output"},"Configure JSON output"),(0,r.kt)("p",null,"By enabling the ",(0,r.kt)("inlineCode",{parentName:"p"},"json")," Transport, the logs can be output in JSON format."),(0,r.kt)("p",null,"For example, all loggers are turned on."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export default {\n   midwayLogger: {\n     default: {\n       transports: {\n         json: {\n           // ...\n         }\n       }\n     }\n     // ...\n   },\n} as MidwayConfig;\n")),(0,r.kt)("p",null,"Or a single logger is enabled."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export default {\n   midwayLogger: {\n     default: {\n       // ...\n     },\n     clients: {\n       appLogger: {\n         transports: {\n           json: {\n             // ...\n           }\n         }\n       }\n     }\n   },\n} as MidwayConfig;\n")),(0,r.kt)("p",null,"The configuration format of ",(0,r.kt)("inlineCode",{parentName:"p"},"json")," Transport is the same as ",(0,r.kt)("inlineCode",{parentName:"p"},"file"),", but the output is slightly different."),(0,r.kt)("p",null,"For example, we can modify the output content in ",(0,r.kt)("inlineCode",{parentName:"p"},"format"),". By default, the output will contain at least the ",(0,r.kt)("inlineCode",{parentName:"p"},"level")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"pid")," fields."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export default {\n   midwayLogger: {\n     default: {\n       transports: {\n         json: {\n           format: (info: LoggerInfo & {data: string}) => {\n             info.data = 'custom data';\n             return info;\n           }\n         }\n       }\n     }\n     // ...\n   },\n} as MidwayConfig;\n")),(0,r.kt)("p",null,"The output is:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},'{"data":"custom data","level":"info","pid":89925}\n{"data":"custom data","level":"debug","pid":89925}\n')),(0,r.kt)("h2",{id:"custom-transport"},"Custom Transport"),(0,r.kt)("p",null,"The framework provides the function of extending Transport. For example, you can write a Transport to transfer logs and upload them to other log libraries."),(0,r.kt)("h3",{id:"inherit-existing-transport"},"Inherit existing Transport"),(0,r.kt)("p",null,"If writing to a new file, this can be achieved by using ",(0,r.kt)("inlineCode",{parentName:"p"},"FileTransport"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { FileTransport, isEnableLevel, LoggerLevel, LogMeta } from '@midwayjs/logger';\n\n// Transport configuration\ninterface CustomOptions {\n   // ...\n}\n\nclass CustomTransport extends FileTransport {\n   log(level: LoggerLevel | false, meta: LogMeta, ...args) {\n     // Determine whether level satisfies the current Transport\n     if (!isEnableLevel(level, this.options.level)) {\n       return;\n     }\n    \n     // Format the message using built-in formatting methods\n     let buf = this.format(level, meta, args) as string;\n     //Add newline character\n     buf += this.options.eol;\n\n     //Write the log you want to write\n     if (this.options.bufferWrite) {\n       this.bufSize += buf.length;\n       this.buf.push(buf);\n       if (this.buf.length > this.options.bufferMaxLength) {\n         this.flush();\n       }\n     } else {\n       // If caching is not enabled, write directly\n       this.logStream.write(buf);\n     }\n   }\n}\n")),(0,r.kt)("p",null,"Before use, it needs to be registered in the log library."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { TransportManager } from '@midwayjs/logger';\n\nTransportManager.set('custom', CustomTransport);\n")),(0,r.kt)("p",null,"You can then use this Transport in your configuration."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/config/config.default.ts\nimport { MidwayConfig } from '@midwayjs/core';\n\nexport default {\n   midwayLogger: {\n     default: {\n       transports: {\n         custom: {\n           dir: 'xxxx',\n           fileLogName: 'xxx',\n           // ...\n         }\n       }\n     }\n   },\n} as MidwayConfig;\n")),(0,r.kt)("p",null,"In this way, the original logger will automatically execute the Transport when printing logs."),(0,r.kt)("h3",{id:"fully-customized-transport"},"Fully customized Transport"),(0,r.kt)("p",null,"In addition to writing files, logs can also be delivered to remote services. For example, in the following example, the logs are forwarded to another service."),(0,r.kt)("p",null,"Note that Transport is an operation that can be executed asynchronously, but the logger itself will not wait for Transport to execute and return."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Transport, ITransport, LoggerLevel, LogMeta } from '@midwayjs/logger';\n\n\n// Transport configuration\ninterface CustomOptions {\n   // ...\n}\n\nclass CustomTransport extends Transport<CustomOptions> implements ITransport {\n   log(level: LoggerLevel | false, meta: LogMeta, ...args) {\n     // Format the message using built-in formatting methods\n     let msg = this.format(level, meta, args) as string;\n  \n     //Asynchronously write to the log library\n     remoteSdk.send(msg).catch(err => {\n       // Log the error or ignore it\n       console.error(err);\n     });\n   }\n}\n")),(0,r.kt)("h2",{id:"dynamic-api"},"Dynamic API"),(0,r.kt)("p",null,"Dynamically obtain the log object through the ",(0,r.kt)("inlineCode",{parentName:"p"},"getLogger")," method."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// Get coreLogger\nconst coreLogger = app.getLogger('coreLogger');\n// Get the default contextLogger\nconst contextLogger = ctx.getLogger();\n// Get the contextLogger created by a specific logger, equivalent to customALogger.createContextLogger(ctx)\nconst customAContextLogger = ctx.getLogger('customA');\n")),(0,r.kt)("p",null,"The framework's built-in ",(0,r.kt)("inlineCode",{parentName:"p"},"MidwayLoggerService")," also has the above API."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { MidwayLoggerService } from '@midwayjs/core';\nimport { Context } from '@midwayjs/koa';\n\n@Provide()\nexport class MainConfiguration {\n  \n   @Inject()\n   loggerService: MidwayLoggerService;\n  \n   @Inject()\n   ctx: Context;\n  \n   async getUser() {\n     // get custom logger\n     const customLogger = this.loggerService.getLogger('customLogger');\n    \n     //Create context logger\n     const customContextLogger = this.loggerService.createContextLogger(this.ctx, customLogger);\n   }\n}\n")),(0,r.kt)("h2",{id:"common-problem"},"Common Problem"),(0,r.kt)("h3",{id:"1-the-server-environment-log-is-not-output"},"1. The server environment log is not output"),(0,r.kt)("p",null,"We do not recommend printing too many logs in the server environment. Only print necessary content. Excessive log output affects performance and quickly locates problems."),(0,r.kt)("p",null,'To adjust the log level, see the "Configuring Log Level" section.'),(0,r.kt)("h3",{id:"2-the-server-has-no-console-log"},"2. The server has no console log"),(0,r.kt)("p",null,"Generally speaking, the server console log (console) is closed and will only be output to a file. If there are special needs, it can be adjusted individually."),(0,r.kt)("h3",{id:"3-some-docker-environments-fail-to-start"},"3. Some Docker environments fail to start"),(0,r.kt)("p",null,"Check whether the user who started the current application in the directory where the log is written has permissions."),(0,r.kt)("h3",{id:"4-how-to-convert-if-there-is-an-old-configuration"},"4. How to convert if there is an old configuration?"),(0,r.kt)("p",null,"The new version of the log library is already compatible with the old configuration. Generally, no additional processing is required. There is a priority relationship between the old configuration and the new configuration when merging. Please check the ","[Change Document]","(",(0,r.kt)("a",{parentName:"p",href:"https://github.com/midwayjs/logger/blob/"},"https://github.com/midwayjs/logger/blob/")," main/BREAKING-3.md)."),(0,r.kt)("p",null,"In order to reduce troubleshooting problems, please use the new configuration format when using the new version of the log library."))}u.isMDXComponent=!0}}]);