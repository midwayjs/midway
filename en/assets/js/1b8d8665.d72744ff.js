"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[40048],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>y});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=p(n),c=o,y=u["".concat(s,".").concat(c)]||u[c]||m[c]||r;return n?a.createElement(y,i(i({ref:t},d),{},{components:n})):a.createElement(y,i({ref:t},d))}));function y(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:o,i[1]=l;for(var p=2;p<r;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},92484:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var a=n(87462),o=(n(67294),n(3905));const r={},i="Sequelize",l={unversionedId:"extensions/sequelize",id:"extensions/sequelize",title:"Sequelize",description:"This document describes how to use Sequelize in Midway.",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/extensions/sequelize.md",sourceDirName:"extensions",slug:"/extensions/sequelize",permalink:"/en/docs/extensions/sequelize",draft:!1,editUrl:"https://github.com/midwayjs/midway/tree/main/site/docs/extensions/sequelize.md",tags:[],version:"current",frontMatter:{},sidebar:"component",previous:{title:"TypeORM",permalink:"/en/docs/extensions/orm"},next:{title:"Redis",permalink:"/en/docs/extensions/redis"}},s={},p=[{value:"The difference with the old writing",id:"the-difference-with-the-old-writing",level:2},{value:"Installation dependency",id:"installation-dependency",level:2},{value:"Install database Driver",id:"install-database-driver",level:2},{value:"Directory structure",id:"directory-structure",level:3},{value:"Enable components",id:"enable-components",level:2},{value:"Model definition",id:"model-definition",level:2},{value:"1. Create Model(Entity)",id:"1-create-modelentity",level:3},{value:"2. Primary key",id:"2-primary-key",level:3},{value:"3. Time column",id:"3-time-column",level:3},{value:"4. Ordinary column",id:"4-ordinary-column",level:3},{value:"Data source configuration",id:"data-source-configuration",level:2},{value:"Model association",id:"model-association",level:2},{value:"One-to-many",id:"one-to-many",level:3},{value:"Many-to-many",id:"many-to-many",level:3},{value:"One to one",id:"one-to-one",level:3},{value:"Model Cyclic Dependency",id:"model-cyclic-dependency",level:3},{value:"Static operation method",id:"static-operation-method",level:2},{value:"Save",id:"save",level:3},{value:"Find and update",id:"find-and-update",level:3},{value:"Repository Mode",id:"repository-mode",level:2},{value:"Start Repository mode",id:"start-repository-mode",level:3},{value:"Use Repository mode",id:"use-repository-mode",level:3},{value:"Multi-dataSource support",id:"multi-datasource-support",level:3},{value:"Advanced Features",id:"advanced-features",level:2},{value:"Data source synchronization configuration",id:"data-source-synchronization-configuration",level:3},{value:"Specify the default data source",id:"specify-the-default-data-source",level:3},{value:"Get data source",id:"get-data-source",level:3},{value:"Common problem",id:"common-problem",level:2},{value:"1. Dialect needs to be explicitly supplied as of v4.0.0",id:"1-dialect-needs-to-be-explicitly-supplied-as-of-v400",level:3},{value:"2. Generate entity columns",id:"2-generate-entity-columns",level:3},{value:"3. Raw Query",id:"3-raw-query",level:3},{value:"4. TS2612 error",id:"4-ts2612-error",level:3},{value:"Other",id:"other",level:2}],d={toc:p},u="wrapper";function m(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"sequelize"},"Sequelize"),(0,o.kt)("p",null,"This document describes how to use Sequelize in Midway."),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"The current module has been reconfigured since v3.4.0, and the historical writing method is compatible. For more information about how to query historical documents, see ",(0,o.kt)("a",{parentName:"p",href:"../legacy/sequelize"},"here"),".")),(0,o.kt)("p",null,"Related information:"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Description"),(0,o.kt)("th",{parentName:"tr",align:null}))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Can be used for standard projects"),(0,o.kt)("td",{parentName:"tr",align:null},"\u2705")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Can be used for Serverless"),(0,o.kt)("td",{parentName:"tr",align:null},"\u2705")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Can be used for integration"),(0,o.kt)("td",{parentName:"tr",align:null},"\u2705")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Contains independent main framework"),(0,o.kt)("td",{parentName:"tr",align:null},"\u274c")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Contains independent logs"),(0,o.kt)("td",{parentName:"tr",align:null},"\u274c")))),(0,o.kt)("h2",{id:"the-difference-with-the-old-writing"},"The difference with the old writing"),(0,o.kt)("p",null,"If you want to use the new version of the usage, please refer to the following process to modify the old code. The new and old codes cannot be mixed."),(0,o.kt)("p",null,"Upgrade method:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("ol",{parentName:"li"},(0,o.kt)("li",{parentName:"ol"},"Please explicitly add ",(0,o.kt)("inlineCode",{parentName:"li"},"sequelize")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"sequelize-typescript")," to the business dependency"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("ol",{parentName:"li",start:2},(0,o.kt)("li",{parentName:"ol"},"Instead of using the ",(0,o.kt)("inlineCode",{parentName:"li"},"BaseTable")," decorator, use the ",(0,o.kt)("inlineCode",{parentName:"li"},"Table")," decorator exported by the ",(0,o.kt)("inlineCode",{parentName:"li"},"sequelize-typescript")," package directly."))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("ol",{parentName:"li",start:3},(0,o.kt)("li",{parentName:"ol"},"configure the adjustment in the ",(0,o.kt)("inlineCode",{parentName:"li"},"sequelize")," section of ",(0,o.kt)("inlineCode",{parentName:"li"},"src/config.default"),". refer to the following data source configuration section")),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"The 3.1 is modified to the form of a data source to ",(0,o.kt)("inlineCode",{parentName:"li"},"sequelize.dataSource")),(0,o.kt)("li",{parentName:"ul"},"3.2 declare the entity model in the ",(0,o.kt)("inlineCode",{parentName:"li"},"entities")," field of the data source")))),(0,o.kt)("h2",{id:"installation-dependency"},"Installation dependency"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ npm i @midwayjs/sequelize@3 sequelize sequelize-typescript --save\n")),(0,o.kt)("p",null,"Or reinstall the following dependencies in ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "dependencies": {\n    "@midwayjs/sequelize": "^3.0.0",\n    "sequelize": "^6.21.3 ",\n    "sequelize-typescript": "^ 2.1.0"\n    // ...\n  },\n  "devDependencies": {\n    // ...\n  }\n}\n')),(0,o.kt)("h2",{id:"install-database-driver"},"Install database Driver"),(0,o.kt)("p",null,"The commonly used database drivers are as follows. Select the database type to install the corresponding connection:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"# for MySQL or MariaDB, you can also use mysql2 instead\nnpm install mysql --save\nnpm install mysql2 --save\n\n# for PostgreSQL or CockroachDB\nnpm install pg --save\n\n# for SQLite\nnpm install sqlite3 --save\n\n# for Microsoft SQL Server\nnpm install mssql --save\n\n# for SQL .js\nnpm install SQL .js --save\n\n# for Oracle\nnpm install oracledb --save\n\n# for MongoDB(experimental)\nnpm install mongodb --save\n")),(0,o.kt)("p",null,"In the following example, ",(0,o.kt)("inlineCode",{parentName:"p"},"mysql2")," is used as an example."),(0,o.kt)("h3",{id:"directory-structure"},"Directory structure"),(0,o.kt)("p",null,"A basic reference directory structure is as follows."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"MyProject\n\u251c\u2500\u2500 src\n\u2502   \u251c\u2500\u2500 config\n\u2502   \u2502   \u2514\u2500\u2500 config.default.ts\n\u2502   \u251c\u2500\u2500 entity\n\u2502   \u2502   \u2514\u2500\u2500 person.entity.ts\n\u2502   \u251c\u2500\u2500 configuration.ts\n\u2502   \u2514\u2500\u2500 service\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 tsconfig.json\n")),(0,o.kt)("h2",{id:"enable-components"},"Enable components"),(0,o.kt)("p",null,"Enable components in the ",(0,o.kt)("inlineCode",{parentName:"p"},"src/configuration.ts")," file."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Configuration, ILifeCycle } from '@midwayjs/core';\nimport { join } from 'path';\nimport * as sequelize from '@midwayjs/sequelize';\n\n@Configuration({\n  imports: [\n    // ...\n    sequelize\n  ],\n  importConfigs: [join(__dirname, './config')]\n})\nexport class MainConfiguration implements ILifeCycle {\n  // ...\n}\n")),(0,o.kt)("h2",{id:"model-definition"},"Model definition"),(0,o.kt)("h3",{id:"1-create-modelentity"},"1. Create Model(Entity)"),(0,o.kt)("p",null,"We associate with the database through the model. The model in the application is the database table. In the Sequelize, the model is bound to the entity. Each Entity file is a Model and an Entity."),(0,o.kt)("p",null,"In the example, you need an entity. Let's take ",(0,o.kt)("inlineCode",{parentName:"p"},"person")," as an example. Create an entity directory and add the entity file ",(0,o.kt)("inlineCode",{parentName:"p"},"person.entity.ts")," to the entity directory. A simple entity is as follows."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/entity/person.entity.ts\nimport { Table, Model, Column, HasMany } from 'sequelize-typescript';\n\n@Table\nexport class Hobby extends Model {\n  @Column\n  name: string;\n}\n\n@Table\nexport class Person extends Model {\n  @Column\n  name: string;\n\n  @Column\n  birthday: Date;\n\n  @HasMany(() => Hobby)\n  hobbies: Hobby[];\n}\n")),(0,o.kt)("p",null,"Note that each attribute of the entity file here is actually one-to-one corresponding to the database table. Based on the existing database table, we add content up."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"@Table")," decorator can be used without passing any parameters. For more information, see ",(0,o.kt)("a",{parentName:"p",href:"https://sequelize.org/v5/manual/models-definition.html#configuration"},"Define options"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"@Table({\n  timestamps: true\n  ...\n})\nexport class Person extends Model {}\n")),(0,o.kt)("h3",{id:"2-primary-key"},"2. Primary key"),(0,o.kt)("p",null,"The primary key (id) will be inherited from the base class Model.  Generally speaking, the primary key is of Integer type and is self-increasing."),(0,o.kt)("p",null,"There are two ways to set the primary key, ",(0,o.kt)("inlineCode",{parentName:"p"},"@Column({primaryKey: true})")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"@PrimaryKey"),"."),(0,o.kt)("p",null,"For example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Table, Model, PrimaryKey } from 'sequelize-typescript';\n\n@Table\nexport class Person extends Model {\n  @PrimaryKey\n  name: string;\n}\n")),(0,o.kt)("h3",{id:"3-time-column"},"3. Time column"),(0,o.kt)("p",null,"Mainly refers to ",(0,o.kt)("inlineCode",{parentName:"p"},"@CreatedAt"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"@UpdatedAt"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"@DeletedAt")," columns marked by a single decorator."),(0,o.kt)("p",null,"for example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Table, Model, CreatedAt, UpdatedAt, DeletedAt } from 'sequelize-typescript';\n\n@Table\nexport class Person extends Model {\n  @CreatedAt\n  creationDate: Date;\n\n  @UpdatedAt\n  updatedOn: Date;\n\n  @DeletedAt\n  deletionDate: Date;\n}\n")),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Decorator"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"@CreatedAt")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"timestamps = true")," and ",(0,o.kt)("inlineCode",{parentName:"td"},"createdAt = 'creationDate'")," are set.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"@UpdatedAt")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"timestamps = true")," and ",(0,o.kt)("inlineCode",{parentName:"td"},"updatedAt = 'updatedOn'")," are set")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"@DeletedAt")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"timestamps = true"),", ",(0,o.kt)("inlineCode",{parentName:"td"},"paranoid = true"),", and ",(0,o.kt)("inlineCode",{parentName:"td"},"deletedAt = 'deletionDate'"))))),(0,o.kt)("h3",{id:"4-ordinary-column"},"4. Ordinary column"),(0,o.kt)("p",null,"The @Column decorator is used to label normal columns and can be used without passing any parameters.  However, you must be able to automatically infer the js type. For more information, see ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/sequelize/sequelize-typescript#type-inference"},"Type inference"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Table, Model, Column } from 'sequelize-typescript';\n\n@Table\nexport class Person extends Model {\n  @Column\n  name: string;\n}\n")),(0,o.kt)("p",null,"Or specify the column type."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Table, Column, DataType } from 'sequelize-typescript';\n\n@Table\nexport class Person extends Model {\n  @Column(DataType.TEXT)\n  name: string;\n}\n")),(0,o.kt)("p",null,"For more information, see ",(0,o.kt)("a",{parentName:"p",href:"https://sequelize.org/v5/manual/models-definition.html#configuration"},"here"),"."),(0,o.kt)("p",null,"For example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Table, Model, Column, DataType } from 'sequelize-typescript'\n\n@Table\nexport class Person extends Model {\n  @Column({\n    type: DataType.FLOAT\n    comment: 'Some value',\n    ...\n  })\n  value: number;\n}\n")),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Decorator"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"@Column")),(0,o.kt)("td",{parentName:"tr",align:null},"Use the derived ",(0,o.kt)("a",{parentName:"td",href:"https://sequelize.org/v5/manual/models-definition.html#data-types"},"dataType")," as the type")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"@Column(dataType: DataType)")),(0,o.kt)("td",{parentName:"tr",align:null},"Explicit setting ",(0,o.kt)("a",{parentName:"td",href:"https://sequelize.org/v5/manual/models-definition.html#data-types"},"dataType"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"@Column(options: AttributeOptions)")),(0,o.kt)("td",{parentName:"tr",align:null},"Set ",(0,o.kt)("a",{parentName:"td",href:"https://sequelize.org/v5/manual/models-definition.html#configuration"},"attribute options"))))),(0,o.kt)("h2",{id:"data-source-configuration"},"Data source configuration"),(0,o.kt)("p",null,"In the new version, we have enabled the ",(0,o.kt)("a",{parentName:"p",href:"../data_source"},"data source mechanism")," and configured it in ",(0,o.kt)("inlineCode",{parentName:"p"},"src/config.default.ts"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/config/config.default.ts\n\nimport { Person } from '../entity/person.entity';\n\nexport default {\n   // ...\n   sequelize: {\n     dataSource: {\n       // The first data source, the name of the data source can be completely customized\n       default: {\n         database: 'test4',\n         username: 'root',\n         password: '123456',\n         host: '127.0.0.1',\n         port: 3306,\n         encrypt: false,\n         dialect: 'mysql',\n         define: { charset: 'utf8' },\n         timezone: '+08:00',\n         // Locally, you can createTable directly through sync: true\n         sync: false,\n\n         // Object format\n         entities: [Person],\n\n         // The following scanning form is supported. For compatibility, we can match both .js and .ts files at the same time\n         entities: [\n           'entity',                        // Specify the directory\n           '**/entity/*.entity.{j,t}s',     // Wildcard with suffix matching\n         ],\n       },\n\n       // second data source\n       default2: {\n         // ...\n       },\n     },\n   },\n};\n")),(0,o.kt)("h2",{id:"model-association"},"Model association"),(0,o.kt)("p",null,"Relationships can be directly described in the model through ",(0,o.kt)("inlineCode",{parentName:"p"},"HasMany"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"@HasOne"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"@BelongsTo"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"@BelongsToMany"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"@ForeignKey")," decorators."),(0,o.kt)("h3",{id:"one-to-many"},"One-to-many"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Table, Model, Column, ForeignKey, BelongsTo, HasMany } from 'sequelize-typescript';\n\n@Table\nexport class Player extends Model {\n  @Column\n  name: string;\n\n  @Column\n  num: number;\n\n  @ForeignKey(() => Team)\n  @Column\n  teamId: number;\n\n  @BelongsTo(() => Team)\n  team: Team;\n}\n\n@Table\nexport class Team extends Model {\n  @Column\n  name: string;\n\n  @HasMany(() => Player)\n  players: Player[];\n}\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"sequelize-typescript")," associates internally and automatically queries related dependencies."),(0,o.kt)("p",null,"For example, you can use ",(0,o.kt)("inlineCode",{parentName:"p"},"find")," to query."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const team = await Team.findOne({ include: [Player] });\n\nteam.players.forEach((player) => {\n  console.log('Player ${player.name}');\n});\n")),(0,o.kt)("h3",{id:"many-to-many"},"Many-to-many"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Table, Model, Column, ForeignKey, BelongsToMany } from 'sequelize-typescript';\n\n@Table\nexport class Book extends Model {\n  @BelongsToMany(() => Author, () => BookAuthor)\n  }\n}\n\n@Table\nexport class Author extends Model {\n  @BelongsToMany(() => Book, () => BookAuthor)\n  books: Book[];\n}\n\n@Table\nexport class BookAuthor extends Model {\n  @ForeignKey(() => Book)\n  @Column\n  bookId: number;\n\n  @ForeignKey(() => Author)\n  @Column\n  authorId: number;\n}\n")),(0,o.kt)("p",null,"The above types are unsafe in some scenarios, such as the above ",(0,o.kt)("inlineCode",{parentName:"p"},"BookAuthor"),", the ",(0,o.kt)("inlineCode",{parentName:"p"},"books")," type of ",(0,o.kt)("inlineCode",{parentName:"p"},"Author"),", which may lose some attributes and need to be set manually."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"@BelongsToMany(() => Book, () => BookAuthor)\nbooks: Array<Book & {BookAuthor: BookAuthor}>;\n")),(0,o.kt)("h3",{id:"one-to-one"},"One to one"),(0,o.kt)("p",null,"For one-to-one, use ",(0,o.kt)("inlineCode",{parentName:"p"},"@HasOne(...)")," (the foreign key of the relationship exists on another model) and ",(0,o.kt)("inlineCode",{parentName:"p"},"@BelongsTo(...)")," (the foreign key of the relationship exists on this model)."),(0,o.kt)("p",null,"For example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Table, Column, Model, BelongsTo, ForeignKey } from 'sequelize-typescript';\nimport { User } from './user.entity';\n\n@Table\nexport class Photo extends Model {\n  @ForeignKey(() => User)\n  @Column({\n    comment: 'User Id',\n  })\n  userId: number;\n\n  @BelongsTo(() => User)\n  user: User;\n\n  @Column({\n    Comment: 'name',\n  })\n  name: string;\n}\n\n@Table\nexport class User extends Model {\n  @Column\n  name: string;\n}\n")),(0,o.kt)("h3",{id:"model-cyclic-dependency"},"Model Cyclic Dependency"),(0,o.kt)("p",null,"If you use the ",(0,o.kt)("inlineCode",{parentName:"p"},"@BelongsTo")," decorator, it is easy to trigger a model circular dependency error, such as:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"ReferenceError: Cannot access 'Photo' before initialization\n")),(0,o.kt)("p",null,"You can wrap types with ",(0,o.kt)("inlineCode",{parentName:"p"},"ReturnType"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Table, Column, Model, BelongsTo, ForeignKey } from 'sequelize-typescript';\nimport { User } from './user.entity';\n\n@Table\nexport class Photo extends Model {\n  // ...\n  @BelongsTo(() => User)\n  user: ReturnType<() => User>;\n}\n")),(0,o.kt)("h2",{id:"static-operation-method"},"Static operation method"),(0,o.kt)("p",null,"If it is a single data source, you can use the following static method."),(0,o.kt)("h3",{id:"save"},"Save"),(0,o.kt)("p",null,"Where it needs to be called, use the entity model to operate."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Provide } from '@midwayjs/core';\nimport { Person } from '../entity/person.entity';\n\n@Provide()\nexport class PersonService {\n  async createPerson() {\n    const person = new Person({ name: 'bob', age: 99 });\n    await person.save();\n  }\n}\n")),(0,o.kt)("h3",{id:"find-and-update"},"Find and update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Provide } from '@midwayjs/core';\nimport { Person } from '../entity/person.entity';\n\n@Provide()\nexport class PersonService {\n  async updatePerson() {\n    const person = await Person.findOne();\n    // Update\n    person.age = 100;\n    await person.save();\n\n    await Person.update (\n      {\n        name: 'bobby',\n      },\n      {\n        where: { id: 1}\n      }\n    );\n  }\n}\n")),(0,o.kt)("h2",{id:"repository-mode"},"Repository Mode"),(0,o.kt)("p",null,"Repository mode can separate static operations such as lookup and creation from the model definition. It also supports use with multiple sequelize instances (multiple data sources)."),(0,o.kt)("h3",{id:"start-repository-mode"},"Start Repository mode"),(0,o.kt)("p",null,"Same as data source configuration, except that there is one more attribute."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/config/config.default.ts\n\nimport { Person } from '../entity/person.entity';\n\nexport default {\n  // ...\n  sequelize: {\n    dataSource: {\n      default: {\n        // ...\n        entities: [Person]\n\n        // This one more\n        repositoryMode: true\n      },\n    },\n    sync: false\n  },\n};\n")),(0,o.kt)("p",null,"If there are multiple data sources, be sure to turn this property on each data source. After the property is turned on, the original static operation method is no longer available."),(0,o.kt)("p",null,"You need to use the ",(0,o.kt)("inlineCode",{parentName:"p"},"Repository")," operation method."),(0,o.kt)("h3",{id:"use-repository-mode"},"Use Repository mode"),(0,o.kt)("p",null,"The basic API is the same as the static operation. Midway has made some simple packages to it. The ",(0,o.kt)("inlineCode",{parentName:"p"},"InjectRepository")," decorator can be used to inject ",(0,o.kt)("inlineCode",{parentName:"p"},"Repository")," into the service."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Controller, Get } from '@midwayjs/core';\nimport { InjectRepository } from '@midwayjs/sequelize';\nimport { Photo } from '../entity/photo.entity';\nimport { User } from '../entity/user.entity';\nimport { Op } from 'sequelize';\nimport { Repository } from 'sequelize-typescript';\n\n@Controller('/')\nexport class HomeController {\n  @InjectRepository(User)\n  userRepository: Repository<User>;\n\n  @InjectRepository(Photo)\n  photoRepository: Repository<Photo>;\n\n  @Get('/')\n  async home() {\n    // Query\n    let result = await this.photoRepository.findAll();\n    console.log(result);\n\n    // New\n    await this.photoRepository.create({\n      name: '123',\n    });\n\n    // Delete\n    await this.photoRepository.destroy({\n      where: {\n        name: '123',\n      },\n    });\n\n    // Joint query\n    // SELECT * FROM photo WHERE name = \"23\" OR name = \"34\";\n    let result = await this.photoRepository.findAll({\n      where: {\n        [Op.or]: [{ name: '23' }, { name: '34' }]\n      },\n    });\n    // => result\n\n    // even table query\n    let result = await this.userRepository.findAll({ include: [Photo] });\n    // => result\n  }\n}\n")),(0,o.kt)("p",null,"More ways to use OP: ",(0,o.kt)("a",{parentName:"p",href:"https://sequelize.org/v5/manual/querying.html"},"https:// sequelize.org/v5/manual/querying.html")),(0,o.kt)("h3",{id:"multi-datasource-support"},"Multi-dataSource support"),(0,o.kt)("p",null,"In Repository mode, we can specify a specific data source in the ",(0,o.kt)("inlineCode",{parentName:"p"},"InjectRepository")," parameters."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Controller } from '@midwayjs/core';\nimport { InjectRepository } from '@midwayjs/sequelize';\nimport { Photo } from '../entity/photo.entity';\nimport { User } from '../entity/user.entity';\nimport { Repository } from 'sequelize-typescript';\n\n@Controller('/')\nexport class HomeController {\n  // Specify a data source\n  @InjectRepository(User, 'default')\n  userRepository: Repository<User>;\n  // ...\n}\n")),(0,o.kt)("h2",{id:"advanced-features"},"Advanced Features"),(0,o.kt)("h3",{id:"data-source-synchronization-configuration"},"Data source synchronization configuration"),(0,o.kt)("p",null,"sequelize can add the sync parameter when synchronizing the data source."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"export default {\n  // ...\n  sequelize: {\n    dataSource: {\n      default: {\n        sync: true,\n        syncOptions: {\n          force: false,\n          alter: true,\n        },\n      },\n    },\n    // You can use this to specify the default data source when there are multiple data sources\n    defaultDataSourceName: 'default',\n  },\n};\n")),(0,o.kt)("h3",{id:"specify-the-default-data-source"},"Specify the default data source"),(0,o.kt)("p",null,"When including multiple data sources, you can specify a default data source."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"export default {\n  // ...\n  sequelize: {\n    dataSource: {\n      default1: {\n        // ...\n      },\n      default2: {\n        // ...\n      },\n    },\n    // You can use this to specify the default data source when there are multiple data sources\n    defaultDataSourceName: 'default1',\n  },\n};\n")),(0,o.kt)("h3",{id:"get-data-source"},"Get data source"),(0,o.kt)("p",null,"The data source is the created sequelize object, which we can obtain by injecting the built-in data source manager."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Configuration } from '@midwayjs/core';\nimport { SequelizeDataSourceManager } from '@midwayjs/sequelize';\n\n@Configuration({\n  // ...\n})\nexport class MainConfiguration {\n\n  async onReady(container: IMidwayContainer) {\n    const dataSourceManager = await container.getAsync(SequelizeDataSourceManager);\n    const conn = dataSourceManager.getDataSource('default');\n    await conn.authenticate();\n  }\n}\n")),(0,o.kt)("p",null,"Starting with v3.8.0, it is also possible to inject via a decorator."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Configuration } from '@midwayjs/core';\nimport { InjectDataSource } from '@midwayjs/sequelize';\nimport { Sequelize } from 'sequelize-typescript';\n\n@Configuration({\n   //...\n})\nexport class MainConfiguration {\n\n   // Inject the default data source\n   @InjectDataSource()\n   defaultDataSource: Sequelize;\n\n   // inject custom data source\n   @InjectDataSource('default1')\n   customDataSource: Sequelize;\n\n   async onReady(container: IMidwayContainer) {\n     //...\n   }\n}\n")),(0,o.kt)("h2",{id:"common-problem"},"Common problem"),(0,o.kt)("h3",{id:"1-dialect-needs-to-be-explicitly-supplied-as-of-v400"},"1. Dialect needs to be explicitly supplied as of v4.0.0"),(0,o.kt)("p",null,"The reason is that the data source in the configuration does not specify the ",(0,o.kt)("inlineCode",{parentName:"p"},"dialect")," field, which confirms the structure, format of the data source and the result of the configuration merging."),(0,o.kt)("h3",{id:"2-generate-entity-columns"},"2. Generate entity columns"),(0,o.kt)("p",null,"Please refer to the modules provided by the community, such as ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/spinlud/sequelize-typescript-generator"},"sequelize-typescript-generator")),(0,o.kt)("h3",{id:"3-raw-query"},"3. Raw Query"),(0,o.kt)("p",null,"If you encounter something more complex, you can use the ",(0,o.kt)("a",{parentName:"p",href:"https://sequelize.org/v5/manual/raw-queries.html"},"raw query method")),(0,o.kt)("h3",{id:"4-ts2612-error"},"4. TS2612 error"),(0,o.kt)("p",null,"If your model reports a TS2612 error, such as:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"src/entity/AesTenantConfigInfo.ts:29:6 - error TS2612: Property 'id' will overwrite the base property in 'Model<AesTenantConfigInfoAttributes, AesTenantConfigInfoAttributes>'. If this is intentional, add an initializer. Otherwise, add a 'declare' modifier or remove the redundant declaration.\n\n29 id?: number;\n         ~~\n")),(0,o.kt)("p",null,"It can be assigned a null value."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Table, Column } from 'sequelize-typescript';\n\n@Table\nexport class User extends Model {\n   @Column({\n     primaryKey: true,\n     autoIncrement: true,\n     type: DataType.BIGINT,\n   })\n   id?: number = undefined;\n}\n")),(0,o.kt)("h2",{id:"other"},"Other"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The above document is translated from sequelize-typescript. For more API, please refer to the ",(0,o.kt)("a",{parentName:"li",href:"(https://github.com/sequelize/sequelize-typescrip)"},"English document"),"."),(0,o.kt)("li",{parentName:"ul"},"Some ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/ddzyan/midway-practice"},"cases"))))}m.isMDXComponent=!0}}]);