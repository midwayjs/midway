"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[71548],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>k});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(n),u=o,k=m["".concat(l,".").concat(u)]||m[u]||d[u]||i;return n?a.createElement(k,r(r({ref:t},p),{},{components:n})):a.createElement(k,r({ref:t},p))}));function k(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[m]="string"==typeof e?e:o,r[1]=s;for(var c=2;c<i;c++)r[c]=n[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},42369:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var a=n(87462),o=(n(67294),n(3905));const i={},r="Data simulation",s={unversionedId:"mock",id:"mock",title:"Data simulation",description:"Midway provides the built-in ability to simulate data during development and testing.",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/mock.md",sourceDirName:".",slug:"/mock",permalink:"/en/docs/mock",draft:!1,editUrl:"https://github.com/midwayjs/midway/tree/main/site/docs/mock.md",tags:[],version:"current",frontMatter:{},sidebar:"common",previous:{title:"Test",permalink:"/en/docs/testing"},next:{title:"Debugger",permalink:"/en/docs/debugger"}},l={},c=[{value:"Mock during testing",id:"mock-during-testing",level:2},{value:"Simulation context",id:"simulation-context",level:3},{value:"Analog Session",id:"analog-session",level:3},{value:"Simulate Header",id:"simulate-header",level:3},{value:"Simulation class attribute",id:"simulation-class-attribute",level:3},{value:"Simulate common object properties",id:"simulate-common-object-properties",level:3},{value:"Grouping",id:"grouping",level:3},{value:"Cleaning up mocks",id:"cleaning-up-mocks",level:3},{value:"Standard Mock service",id:"standard-mock-service",level:3},{value:"Development Mock",id:"development-mock",level:2},{value:"Write mock class",id:"write-mock-class",level:3},{value:"Simulation Timing",id:"simulation-timing",level:3}],p={toc:c},m="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(m,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"data-simulation"},"Data simulation"),(0,o.kt)("p",null,"Midway provides the built-in ability to simulate data during development and testing."),(0,o.kt)("h2",{id:"mock-during-testing"},"Mock during testing"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"@midwayjs/mock")," provides some more general APIs for simulation during testing."),(0,o.kt)("h3",{id:"simulation-context"},"Simulation context"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"mockContext")," methods are used to simulate the context."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { mockContext } from '@midwayjs/mock';\n\nit('should test create koa app with new mode with mock', async () => {\n  const app = await createApp();\n\n  // Simulation context\n  mockContext(app, 'user', 'midway');\n\n  const result1 = await createHttpRequest(app).get('/');\n  // ctx.user => midway\n  // ...\n});\n")),(0,o.kt)("p",null,"If your data is complex or logical, you can also use the callback form."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { mockContext } from '@midwayjs/mock';\n\nit('should test create koa app with new mode with mock', async () => {\n  const app = await createApp();\n\n  // Simulation context\n  mockContext(app, (ctx) => {\n    ctx.user = 'midway';\n  });\n});\n")),(0,o.kt)("p",null,"Note that this mock behavior is executed before all middleware."),(0,o.kt)("h3",{id:"analog-session"},"Analog Session"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"mockSession")," methods are used to simulate Session."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { mockSession } from '@midwayjs/mock';\n\nit('should test create koa app with new mode with mock', async () => {\n  const app = await createApp();\n\n  mockSession(app, 'user', 'midway');\n\n  const result1 = await createHttpRequest(app).get('/');\n  // ctx.session.user => midway\n  // ...\n});\n")),(0,o.kt)("h3",{id:"simulate-header"},"Simulate Header"),(0,o.kt)("p",null,"Use ",(0,o.kt)("inlineCode",{parentName:"p"},"mockHeader")," methods to simulate Header."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { mockHeader } from '@midwayjs/mock';\n\nit('should test create koa app with new mode with mock', async () => {\n  const app = await createApp();\n\n  mockHeader(app, 'x-abc', 'bbb');\n\n  const result1 = await createHttpRequest(app).get('/');\n  // ctx.headers['x-abc'] => bbb\n  // ...\n});\n")),(0,o.kt)("h3",{id:"simulation-class-attribute"},"Simulation class attribute"),(0,o.kt)("p",null,"Use the ",(0,o.kt)("inlineCode",{parentName:"p"},"mockClassProperty")," method to simulate the properties of the class."),(0,o.kt)("p",null,"If there is the following service class."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"@Provide()\nexport class UserService {\n  data;\n\n  async getUser() {\n    return 'hello';\n  }\n}\n")),(0,o.kt)("p",null,"We can simulate it when we use it."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { mockClassProperty } from '@midwayjs/mock';\n\nit('should test create koa app with new mode with mock', async () => {\n\n  mockClassProperty(UserService, 'data', {\n    bbb: 1\n  });\n  // userService.data => {bbb: 1}\n\n  // ...\n});\n")),(0,o.kt)("p",null,"It is also possible to simulate the method."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { mockClassProperty } from '@midwayjs/mock';\n\nit('should test create koa app with new mode with mock', async () => {\n\n  mockClassProperty(UserService, 'getUser', async () => {\n    return 'midway';\n  });\n\n  // userService.getUser() => 'midway'\n\n  // ...\n});\n")),(0,o.kt)("h3",{id:"simulate-common-object-properties"},"Simulate common object properties"),(0,o.kt)("p",null,"Use the ",(0,o.kt)("inlineCode",{parentName:"p"},"mockProperty")," method to mock object properties."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { mockProperty } from '@midwayjs/mock';\n\nit('should test create koa app with new mode with mock', async () => {\n\n  const a = {};\n  mockProperty(a, 'name', 'hello');\n\n  // a['name'] => 'hello'\n\n  // ...\n});\n")),(0,o.kt)("p",null,"It is also possible to simulate the method."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { mockProperty } from '@midwayjs/mock';\n\nit('should test create koa app with new mode with mock', async () => {\n\n  const a = {};\n  mockProperty(a, 'getUser', async () => {\n    return 'midway';\n  });\n\n  // a.getUser() => 'midway'\n\n  // ...\n});\n")),(0,o.kt)("h3",{id:"grouping"},"Grouping"),(0,o.kt)("p",null,"Starting from version ",(0,o.kt)("inlineCode",{parentName:"p"},"3.19.0"),", Midway's mock functionality supports managing different mock data through grouping. You can specify a group name when creating a mock, allowing you to restore or clean up a specific group of mock data as needed."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { mockContext, restoreMocks } from '@midwayjs/mock';\n\nit('should test mock with groups', async () => {\n  const app = await createApp();\n\n  // Create a mock for a regular object\n  const a = {};\n  mockProperty(a, 'getUser', async () => {\n    return 'midway';\n  }, 'group1');\n\n  // Create a mock for the context\n  mockContext(app, 'user', 'midway', 'group1');\n  mockContext(app, 'role', 'admin', 'group2');\n\n  // Restore a single group\n  restoreMocks('group1');\n\n  // Restore all groups\n  restoreAllMocks();\n});\n")),(0,o.kt)("p",null,"By using groups, you can manage and control mock data more flexibly, especially in complex testing scenarios."),(0,o.kt)("h3",{id:"cleaning-up-mocks"},"Cleaning up mocks"),(0,o.kt)("p",null,"Every time the ",(0,o.kt)("inlineCode",{parentName:"p"},"close")," method is called, all mock data is automatically cleared."),(0,o.kt)("p",null,"If you want to clean up manually, you can also execute the ",(0,o.kt)("inlineCode",{parentName:"p"},"restoreAllMocks")," method."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { restoreAllMocks } from '@midwayjs/mock';\n\nit('should test create koa app with new mode with mock', async () => {\n  restoreAllMocks();\n  // ...\n});\n")),(0,o.kt)("p",null,"Starting from version ",(0,o.kt)("inlineCode",{parentName:"p"},"3.19.0"),", it supports cleaning up by specifying a group."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { restoreMocks } from '@midwayjs/mock';\n\nit('should test create koa app with new mode with mock', async () => {\n  restoreMocks('group1');\n  // ...\n});\n")),(0,o.kt)("h3",{id:"standard-mock-service"},"Standard Mock service"),(0,o.kt)("p",null,"Midway provides standard MidwayMockService services for simulating data in code."),(0,o.kt)("p",null,"Various simulation methods in ",(0,o.kt)("inlineCode",{parentName:"p"},"@midwayjs/mock")," have all called this service at the bottom."),(0,o.kt)("p",null,"For more information, see ",(0,o.kt)("a",{parentName:"p",href:"./built_in_service#midwaymockservice"},"Built-in services"),"."),(0,o.kt)("h2",{id:"development-mock"},"Development Mock"),(0,o.kt)("p",null,"Whenever the back-end service is not online, or when the data is not prepared during the development phase, the ability to simulate during the development phase is required."),(0,o.kt)("h3",{id:"write-mock-class"},"Write mock class"),(0,o.kt)("p",null,"Under normal circumstances, we will write the simulation data used during development in the ",(0,o.kt)("inlineCode",{parentName:"p"},"src/mock")," folder, and our simulation behavior is actually a piece of logic code."),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"Don't get used to mocking data in code, it's actually part of the logic.")),(0,o.kt)("p",null,"Let's take an example. If there is a service for obtaining Index data, but the service has not been developed yet, we can only write simulation code."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/service/indexData.service.ts\nimport { Singleton, makeHttpRequest, Singleton } from '@midwayjs/core';\n\n@Singleton()\nexport class IndexDataService {\n  \n   @Config('index')\n   indexConfig: {indexUrl: string};\n\n   private indexData;\n\n   async load() {\n     // get data from remote\n     this.indexData = await this.fetchIndex(this.indexConfig.indexUrl);\n   }\n  \n   public getData() {\n     if (!this. indexData) {\n       // If the data does not exist, load it once\n       this. load();\n     }\n     return this. indexData;\n   }\n\n   async fetchIndex(url) {\n     return makeHttpRequest<Record<string, any>>(url, {\n       method: 'GET',\n       dataType: 'json',\n     });\n   }\n}\n")),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"In the above code, the ",(0,o.kt)("inlineCode",{parentName:"p"},"fetchIndex")," method is intentionally removed to facilitate subsequent simulation behaviors.")),(0,o.kt)("p",null,"When the interface has not been developed, it is very difficult for us to develop locally. The common practice is to define a JSON data,"),(0,o.kt)("p",null,"For example, create a ",(0,o.kt)("inlineCode",{parentName:"p"},"src/mock/indexData.mock.ts")," to mock the initial service interface."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/mock/indexData.mock.ts\nimport { Mock, ISimulation } from '@midwayjs/core';\n\n@Mock()\nexport class IndexDataMock implements ISimulation {\n}\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"@Mock")," is used to represent that it is a simulation class, which is used to simulate some business behaviors, and ",(0,o.kt)("inlineCode",{parentName:"p"},"ISimulation")," is some interfaces that need to be implemented by the business."),(0,o.kt)("p",null,"For example, we want to simulate the data of the interface."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/mock/indexData.mock.ts\nimport { App, IMidwayApplication, Inject, Mock, ISimulation, MidwayMockService } from '@midwayjs/core';\nimport { IndexDataService } from '../service/indexData.service';\n\n@Mock()\nexport class IndexDataMock implements ISimulation {\n\n   @App()\n   app: IMidwayApplication;\n\n   @Inject()\n   mockService: MidwayMockService;\n\n   async setup(): Promise<void> {\n     // Mock properties using the MidwayMockService API\n     this.mockService.mockClassProperty(IndexDataService, 'fetchIndex', async (url) => {\n       // return different data according to the logic\n       if (/current/.test(url)) {\n         return {\n           data: require('./resource/current.json'),\n         };\n       } else if (/v7/.test(url)) {\n         return {\n           data: require('./resource/v7.json'),\n         };\n       } else if (/v6/.test(url)) {\n         return {\n           data: require('./resource/v6.json'),\n         };\n       }\n     });\n   }\n\n   enableCondition(): boolean | Promise<boolean> {\n     // Conditions for the mock class to be enabled\n     return ['local', 'test', 'unittest']. includes(this. app. getEnv());\n   }\n}\n")),(0,o.kt)("p",null,"In the above code, ",(0,o.kt)("inlineCode",{parentName:"p"},"enableCondition")," is a method that must be implemented, which represents the enabling condition of the current simulation class. For example, the above code only takes effect in ",(0,o.kt)("inlineCode",{parentName:"p"},"local"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"test")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"unittest")," environments."),(0,o.kt)("h3",{id:"simulation-timing"},"Simulation Timing"),(0,o.kt)("p",null,"The simulation class contains some simulation opportunities, which have been defined in the ",(0,o.kt)("inlineCode",{parentName:"p"},"ISimulation")," interface, such as:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"export interface ISimulation {\n   /**\n    * The initial simulation timing is executed after the life cycle onConfigLoad\n    */\n   setup?(): Promise<void>;\n   /**\n    * Executed when the life cycle is closed, generally used for data cleaning\n    */\n   tearDown?(): Promise<void>;\n   /**\n    * Executed when each framework is initialized, the app of the current framework will be passed\n    */\n   appSetup?(app: IMidwayApplication): Promise<void>;\n   /**\n    * Executed at the beginning of each frame's request, the app and ctx of the current frame will be passed\n    */\n   contextSetup?(ctx: IMidwayContext, app: IMidwayApplication): Promise<void>;\n   /**\n    * Executed at the end of each frame request, after error handling\n    */\n   contextTearDown?(ctx: IMidwayContext, app: IMidwayApplication): Promise<void>;\n   /**\n    * Executed when each frame is stopped\n    */\n   appTearDown?(app: IMidwayApplication): Promise<void>;\n   /**\n    * The execution conditions of the simulation are generally a specific environment or a specific framework\n    */\n   enableCondition(): boolean | Promise<boolean>;\n}\n")),(0,o.kt)("p",null,"Based on the above interface, we implement very free simulation logic."),(0,o.kt)("p",null,"For example, add different middleware on different frameworks."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { App, IMidwayApplication, Mock, ISimulation } from '@midwayjs/core';\n\n@Mock()\nexport class InitDataMock implements ISimulation {\n\n   @App()\n   app: IMidwayApplication;\n\n   async appSetup(app: IMidwayApplication): Promise<void> {\n     // Add different test middleware for different framework types\n     if (app. getNamespace() === 'koa') {\n       app. useMiddleware(/*...*/);\n       app. useFilter(/*...*/);\n     }\n    \n     if (app. getNamespace() === 'bull') {\n       app. useMiddleware(/*...*/);\n       app. useFilter(/*...*/);\n     }\n   }\n\n   enableCondition(): boolean | Promise<boolean> {\n     return ['local', 'test', 'unittest']. includes(this. app. getEnv());\n   }\n}\n")))}d.isMDXComponent=!0}}]);