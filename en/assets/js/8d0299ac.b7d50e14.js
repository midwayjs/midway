"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[91873],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>g});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var p=r.createContext({}),s=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=s(e.components);return r.createElement(p.Provider,{value:n},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},c=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=s(t),c=i,g=m["".concat(p,".").concat(c)]||m[c]||u[c]||a;return t?r.createElement(g,o(o({ref:n},d),{},{components:t})):r.createElement(g,o({ref:n},d))}));function g(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=c;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l[m]="string"==typeof e?e:i,o[1]=l;for(var s=2;s<a;s++)o[s]=t[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}c.displayName="MDXCreateElement"},52037:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var r=t(87462),i=(t(67294),t(3905));const a={},o="Template rendering",l={unversionedId:"extensions/render",id:"extensions/render",title:"Template rendering",description:"This component is used to render ejs and nunjucks templates using the server in midway system.",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/extensions/render.md",sourceDirName:"extensions",slug:"/extensions/render",permalink:"/en/docs/extensions/render",draft:!1,editUrl:"https://github.com/midwayjs/midway/tree/main/site/docs/extensions/render.md",tags:[],version:"current",frontMatter:{},sidebar:"component",previous:{title:"Security",permalink:"/en/docs/extensions/security"},next:{title:"File upload",permalink:"/en/docs/extensions/busboy"}},p={},s=[{value:"Use ejs",id:"use-ejs",level:2},{value:"Installation dependency",id:"installation-dependency",level:3},{value:"Introducing components",id:"introducing-components",level:3},{value:"Configuration",id:"configuration",level:3},{value:"Use",id:"use",level:3},{value:"Configure suffix",id:"configure-suffix",level:3},{value:"Default rendering engine",id:"default-rendering-engine",level:3},{value:"Configure multiple template directories",id:"configure-multiple-template-directories",level:3},{value:"Use Nunjucks",id:"use-nunjucks",level:2},{value:"Custom template engine",id:"custom-template-engine",level:2},{value:"Implement template engine",id:"implement-template-engine",level:3},{value:"Register template engine",id:"register-template-engine",level:3},{value:"Precautions",id:"precautions",level:2}],d={toc:s},m="wrapper";function u(e){let{components:n,...t}=e;return(0,i.kt)(m,(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"template-rendering"},"Template rendering"),(0,i.kt)("p",null,"This component is used to render ejs and nunjucks templates using the server in midway system."),(0,i.kt)("p",null,"Related information:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Web support"),(0,i.kt)("th",{parentName:"tr",align:null}))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"@midwayjs/koa"),(0,i.kt)("td",{parentName:"tr",align:null},"\u2705")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"@midwayjs/faas"),(0,i.kt)("td",{parentName:"tr",align:null},"\u2705")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"@midwayjs/web"),(0,i.kt)("td",{parentName:"tr",align:null},"\u2705")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"@midwayjs/express"),(0,i.kt)("td",{parentName:"tr",align:null},"\u274c")))),(0,i.kt)("h2",{id:"use-ejs"},"Use ejs"),(0,i.kt)("h3",{id:"installation-dependency"},"Installation dependency"),(0,i.kt)("p",null,"Select the corresponding template installation dependency."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ npm i @midwayjs/view-ejs@3 --save\n")),(0,i.kt)("p",null,"Or reinstall the following dependencies in ",(0,i.kt)("inlineCode",{parentName:"p"},"package.json"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "dependencies": {\n    "@midwayjs/view-ejs": "^3.0.0",\n    // ...\n  },\n  "devDependencies": {\n    // ...\n  }\n}\n')),(0,i.kt)("h3",{id:"introducing-components"},"Introducing components"),(0,i.kt)("p",null,"First, introduce components and import them in ",(0,i.kt)("inlineCode",{parentName:"p"},"configuration.ts"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Configuration } from '@midwayjs/core';\nimport * as view from '@midwayjs/view-ejs';\nimport { join } from 'path'\n\n@Configuration({\n  imports: [\n    View // import ejs components\n  ],\n  importConfigs: [\n    join(__dirname, 'config')\n  ]\n})\nexport class MainConfiguration {\n}\n")),(0,i.kt)("h3",{id:"configuration"},"Configuration"),(0,i.kt)("p",null,"Configure suffixes to map to the specified engine."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/config/config.default.ts\nexport default {\n  // ...\n  view: {\n    mapping: {\n      '.ejs': 'ejs',\n    },\n  },\n  // ejs config\n  ejs: {}\n}\n")),(0,i.kt)("h3",{id:"use"},"Use"),(0,i.kt)("p",null,"Note that the default view directory is ",(0,i.kt)("inlineCode",{parentName:"p"},"${appDir}/view"),". Create a ",(0,i.kt)("inlineCode",{parentName:"p"},"hello.ejs")," file in the view directory."),(0,i.kt)("p",null,"The directory structure is as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\u279c  my_midway_app tree\n.\n\u251c\u2500\u2500 src\n\u2502   \u2514\u2500\u2500 controller                 ## Controller directory\n\u2502       \u2514\u2500\u2500 home.ts\n\u251c\u2500\u2500 view                           ## Template directory\n\u2502   \u2514\u2500\u2500 hello.ejs\n\u251c\u2500\u2500 test\n\u251c\u2500\u2500 package.json\n\u2514\u2500\u2500 tsconfig.json\n")),(0,i.kt)("p",null,"We write some ejs format content in the template, such:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"// view/hello.ejs\nhello <%= data %>\n")),(0,i.kt)("p",null,"Rendering in Controller."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Inject, Provide } from '@midwayjs/core';\nimport { Context } from '@midwayjs/koa';\n\n@Controller('/')\nexport class HomeController {\n\n  @Inject()\n  ctx: Context;\n\n  @Get('/')\n  async render() {\n    await this.ctx.render('hello.ejs', {\n      data: 'world',\n    });\n  }\n}\n")),(0,i.kt)("h3",{id:"configure-suffix"},"Configure suffix"),(0,i.kt)("p",null,"The default suffix is ",(0,i.kt)("inlineCode",{parentName:"p"},".html"),". In order to change the suffix to ",(0,i.kt)("inlineCode",{parentName:"p"},".ejs"),", we can add a ",(0,i.kt)("inlineCode",{parentName:"p"},"defaultExtension")," configuration."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/config/config.default.ts\nexport default {\n  // ...\n  view: {\n    defaultExtension: '.ejs',\n    mapping: {\n      '.ejs': 'ejs',\n    },\n  },\n  // ejs config\n  ejs: {}\n}\n")),(0,i.kt)("p",null,"In this way, we do not need to add suffixes when rendering."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"@Controller('/')\nexport class HomeController {\n\n  @Inject()\n  ctx: Context;\n\n  @Get('/')\n  async render() {\n    await this.ctx.render('hello', {\n      data: 'world',\n    });\n  }\n}\n")),(0,i.kt)("h3",{id:"default-rendering-engine"},"Default rendering engine"),(0,i.kt)("p",null,"We can set the default rendering engine by ",(0,i.kt)("inlineCode",{parentName:"p"},"defaultViewEngine"),"."),(0,i.kt)("p",null,"Its role is to use the engine specified by the ",(0,i.kt)("inlineCode",{parentName:"p"},"defaultViewEngine")," field to render when the template suffix encountered, such as ",(0,i.kt)("inlineCode",{parentName:"p"},".html")," is not found in the ",(0,i.kt)("inlineCode",{parentName:"p"},"mapping")," field of the configuration."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/config/config.default.ts\nexport default {\n  // ...\n  view: {\n    defaultViewEngine: 'ejs',\n    mapping: {\n      '.ejs': 'ejs',\n    },\n  },\n  // ejs config\n  ejs: {}\n}\n")),(0,i.kt)("p",null,"In this way, if the template is a suffix of ",(0,i.kt)("inlineCode",{parentName:"p"},".html"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"ejs")," will still be used for rendering because it is not specified in the ",(0,i.kt)("inlineCode",{parentName:"p"},"mapping"),"."),(0,i.kt)("h3",{id:"configure-multiple-template-directories"},"Configure multiple template directories"),(0,i.kt)("p",null,"If we need to encapsulate the code as a component, we need to support different template directories."),(0,i.kt)("p",null,"The default template directory is ",(0,i.kt)("inlineCode",{parentName:"p"},"${appDir}/view"),". We can add other directories to ",(0,i.kt)("inlineCode",{parentName:"p"},"rootDir")," fields."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/config/config.default.ts\n\n// Modify the default directory of the default view component\nexport default {\n  // ...\n  view: {\n    rootDir: {\n      default: path.join(__dirname, './view')\n    }\n  },\n}\n\n// Other components need to add directory configuration\nexport default {\n  // ...\n  // Configuration of view components\n  view: {\n    rootDir: {\n      anotherRoot: path.join(__dirname, './view')\n    }\n  },\n}\n")),(0,i.kt)("p",null,"Through the object merging mechanism, all ",(0,i.kt)("inlineCode",{parentName:"p"},"rootDir")," can be merged together, and values are obtained inside the component for matching."),(0,i.kt)("h2",{id:"use-nunjucks"},"Use Nunjucks"),(0,i.kt)("p",null,"Similar to ejs, just introduce the corresponding components."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Select the corresponding template installation dependency.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ npm i @midwayjs/view-nunjucks@3 --save\n")),(0,i.kt)("p",null,"Or reinstall the following dependencies in ",(0,i.kt)("inlineCode",{parentName:"p"},"package.json"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "dependencies": {\n    "@midwayjs/view-nunjucks": "^3.0.0",\n    // ...\n  },\n  "devDependencies": {\n    // ...\n  }\n}\n')),(0,i.kt)("ol",{start:2},(0,i.kt)("li",{parentName:"ol"},"Introduce components and import them in ",(0,i.kt)("inlineCode",{parentName:"li"},"configuration.ts"),":")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Configuration } from '@midwayjs/core';\nimport * as view from '@midwayjs/view-nunjucks';\nimport { join } from 'path'\n\n@Configuration({\n  imports: [\n    view // import nunjucks components\n  ],\n  importConfigs: [\n    join(__dirname, 'config')\n  ]\n})\nexport class MainConfiguration {\n}\n")),(0,i.kt)("ol",{start:3},(0,i.kt)("li",{parentName:"ol"},"Add nunjucks configuration, such as default nunjucks.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"export default {\n  // ...\n  view: {\n    defaultViewEngine: 'nunjucks',\n    mapping: {\n      '.nj': 'nunjucks',\n    },\n  },\n}\n")),(0,i.kt)("ol",{start:4},(0,i.kt)("li",{parentName:"ol"},"Add templates to the view directory")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"// view/test.nj\nhi, {{ user }}\n")),(0,i.kt)("p",null,"Rendering in Controller."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Inject, Provide } from '@midwayjs/core';\nimport { Context } from '@midwayjs/koa';\n\n@Controller('/')\nexport class HomeController {\n\n  @Inject()\n  ctx: Context;\n\n  @Get('/')\n  async render() {\n    await ctx.render('test.nj', { user: 'midway' });\n  }\n}\n")),(0,i.kt)("p",null,"After the access, ",(0,i.kt)("inlineCode",{parentName:"p"},"hi, midway")," is output."),(0,i.kt)("p",null,"If you need a custom filter, you can add it at the entrance. For example, a filter named ",(0,i.kt)("inlineCode",{parentName:"p"},"hello")," is added below."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { App, Configuration, Inject } from '@midwayjs/core';\nimport * as view from '@midwayjs/view-nunjucks';\nimport { join } from 'path'\n\n@Configuration({\n  imports: [view],\n  importConfigs: [join(__dirname, 'config')]\n})\nexport class MainConfiguration {\n\n  @App()\n  app;\n\n  @Inject()\n  env: view.NunjucksEnvironment;\n\n  async onReady() {\n    this.env.addFilter('hello', (str) => {\n      return 'hi, '+ str;\n    });\n  }\n}\n\n")),(0,i.kt)("p",null,"Can be used in the template"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"{{name | hello}}\n")),(0,i.kt)("p",null,"Then render"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"// controller\n// ...\nawait ctx.render('test.nj', { name: 'midway' });\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"hi, midway")," is also output."),(0,i.kt)("h2",{id:"custom-template-engine"},"Custom template engine"),(0,i.kt)("p",null,"By default, we only provide ejs and nunjucks template engines. You can also write your own template engine code."),(0,i.kt)("h3",{id:"implement-template-engine"},"Implement template engine"),(0,i.kt)("p",null,"First, you need to create a template engine class for request scope, which will be initialized when each request is executed. You need to implement the ",(0,i.kt)("inlineCode",{parentName:"p"},"render")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"renderString")," methods. If your template engine does not support a method, you can throw an exception."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"// lib/view.ts\nimport { Provide, Config } from '@midwayjs/core';\nimport { IViewEngine } from '@midwayjs/view';\n\n@Provide()\nexport class MyView implements IViewEngine {\n\n  @Config('xxxx')\n  viewConfig;\n\n  async render(name: string, locals?: Record<string, any>, options?: RenderOptions) {\n    return myengine.render(name, locals, options);\n  }\n\n  async renderString(tpl: string,\n     locals?: Record<string, any>,\n     options?: RenderOptions) {\n\n    throw new Error('not implement');\n  }\n};\n")),(0,i.kt)("p",null,"These two methods accept three similar parameters, ",(0,i.kt)("inlineCode",{parentName:"p"},"renderString")," the first parameter needs to pass in the template content to be parsed, while the ",(0,i.kt)("inlineCode",{parentName:"p"},"render")," method parses the template file."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"render(name, locals, viewOptions)")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"name: the path from the ",(0,i.kt)("inlineCode",{parentName:"li"},"root")," (default is ",(0,i.kt)("inlineCode",{parentName:"li"},"/view")," )."),(0,i.kt)("li",{parentName:"ul"},"Locals: data required by the template"),(0,i.kt)("li",{parentName:"ul"},"viewOptions: The template parameters for each rendering, the overridden configuration, can be overridden in the configuration file, which contains several parameters:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"root: the absolute path of the template"),(0,i.kt)("li",{parentName:"ul"},"Name: The original name value that calls the render method."),(0,i.kt)("li",{parentName:"ul"},"locals: the original locals value that calls the render method.")))),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"renderString(tpl, locals, viewOptions)")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"tpl: template name"),(0,i.kt)("li",{parentName:"ul"},"Locals: Same as ",(0,i.kt)("inlineCode",{parentName:"li"},"render")),(0,i.kt)("li",{parentName:"ul"},"viewOptions: Same as ",(0,i.kt)("inlineCode",{parentName:"li"},"render"))),(0,i.kt)("h3",{id:"register-template-engine"},"Register template engine"),(0,i.kt)("p",null,"After implementing the custom template engine, we need to register it at the startup portal."),(0,i.kt)("p",null,"By introducing ",(0,i.kt)("inlineCode",{parentName:"p"},"ViewManager"),", we can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"use")," method to register a custom template engine."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/configuration.ts\nimport { Configuration, Inject, Provide } from '@midwayjs/core';\nimport * as koa from '@midwayjs/koa';\nimport * as view from '@midwayjs/view';\nimport { MyView } from './lib/my';\n\n@Configuration({\n  imports: [koa, view],\n  importConfigs: [join(__dirname, 'config')]\n})\nexport class MainConfiguration {\n\n  @Inject()\n  viewManager: view.ViewManager;\n\n  async onReady() {\n    this.viewManager.use('ejs', MyView);\n  }\n}\n\n")),(0,i.kt)("h2",{id:"precautions"},"Precautions"),(0,i.kt)("p",null,"To use in egg(@midwayjs/web) scenarios, close view and its related plug-ins in ",(0,i.kt)("inlineCode",{parentName:"p"},"plugin.ts"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { EggPlugin } from 'egg';\nexport default {\n  // ...\n  view: false\n} as EggPlugin;\n\n")),(0,i.kt)("p",null,"Otherwise, the following similar errors will occur."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"TypeError: Cannot set property view of #<EggApplication> which has only a getter\n")))}u.isMDXComponent=!0}}]);