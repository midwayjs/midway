"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[40692],{3905:(e,t,n)=>{n.d(t,{Zo:()=>h,kt:()=>u});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),s=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},h=function(e){var t=s(e.components);return a.createElement(l.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,h=o(e,["components","mdxType","originalType","parentName"]),p=s(n),d=r,u=p["".concat(l,".").concat(d)]||p[d]||m[d]||i;return n?a.createElement(u,c(c({ref:t},h),{},{components:n})):a.createElement(u,c({ref:t},h))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,c=new Array(i);c[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[p]="string"==typeof e?e:r,c[1]=o;for(var s=2;s<i;s++)c[s]=n[s];return a.createElement.apply(null,c)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},98695:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var a=n(87462),r=(n(67294),n(3905));const i={},c="Caching",o={unversionedId:"extensions/caching",id:"extensions/caching",title:"Caching",description:"Caching is a great and simple technique that helps improve the performance of your application. This component provides cache-related capabilities. You can cache data to different data sources, and you can also create multi-level caches for different scenarios to improve data access speed.",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/extensions/caching.md",sourceDirName:"extensions",slug:"/extensions/caching",permalink:"/en/docs/extensions/caching",draft:!1,editUrl:"https://github.com/midwayjs/midway/tree/main/site/docs/extensions/caching.md",tags:[],version:"current",frontMatter:{},sidebar:"component",previous:{title:"MongoDB",permalink:"/en/docs/extensions/mongodb"},next:{title:"Alibaba Cloud Object Storage (OSS)",permalink:"/en/docs/extensions/oss"}},l={},s=[{value:"Install",id:"install",level:2},{value:"Enable component",id:"enable-component",level:2},{value:"Use cache",id:"use-cache",level:2},{value:"1. Configure cache",id:"1-configure-cache",level:3},{value:"2. Use cache",id:"2-use-cache",level:3},{value:"3. Configure multiple caches",id:"3-configure-multiple-caches",level:3},{value:"4. Configure different Stores",id:"4-configure-different-stores",level:3},{value:"5. Configure third-party Store",id:"5-configure-third-party-store",level:3},{value:"6. Multi-level cache",id:"6-multi-level-cache",level:3},{value:"7. Use multi-level cache",id:"7-use-multi-level-cache",level:3},{value:"8. Automatic refresh",id:"8-automatic-refresh",level:3},{value:"Automatic caching",id:"automatic-caching",level:2},{value:"Use decorator cache methods",id:"use-decorator-cache-methods",level:3},{value:"Specify cached ttl",id:"specify-cached-ttl",level:3},{value:"Manually specify cache key",id:"manually-specify-cache-key",level:3},{value:"Cache with logic",id:"cache-with-logic",level:3},{value:"Common problem",id:"common-problem",level:2},{value:"1. Memory cache set and get cannot obtain the same value under multi-process",id:"1-memory-cache-set-and-get-cannot-obtain-the-same-value-under-multi-process",level:3}],h={toc:s},p="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"caching"},"Caching"),(0,r.kt)("p",null,"Caching is a great and simple technique that helps improve the performance of your application. This component provides cache-related capabilities. You can cache data to different data sources, and you can also create multi-level caches for different scenarios to improve data access speed."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Midway provides a module based on ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/node-cache-manager/node-cache-manager"},"cache-manager v5")," that re-encapsulates the cache component. The original cache module is developed based on v3 and is no longer iterated, such as To view old documentation, please visit ",(0,r.kt)("a",{parentName:"p",href:"/docs/extensions/cache"},"here"),".")),(0,r.kt)("p",null,"Related Information:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null}))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Available for standard projects"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Serverless available"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Available for integration"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Contains independent main frame"),(0,r.kt)("td",{parentName:"tr",align:null},"\u274c")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Contains standalone logs"),(0,r.kt)("td",{parentName:"tr",align:null},"\u274c")))),(0,r.kt)("h2",{id:"install"},"Install"),(0,r.kt)("p",null,"First install the relevant component modules."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ npm i @midwayjs/cache-manager@3 --save\n")),(0,r.kt)("p",null,"Or add the following dependencies in ",(0,r.kt)("inlineCode",{parentName:"p"},"package.json")," and reinstall."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n   "dependencies": {\n     "@midwayjs/cache-manager": "^3.0.0",\n     // ...\n   },\n}\n')),(0,r.kt)("h2",{id:"enable-component"},"Enable component"),(0,r.kt)("p",null,"First, introduce the component and import it in ",(0,r.kt)("inlineCode",{parentName:"p"},"configuration.ts"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Configuration } from '@midwayjs/core';\nimport * as cacheManager from '@midwayjs/cache-manager';\nimport { join } from 'path'\n\n@Configuration({\n   imports: [\n     // ...\n     cacheManager,\n   ],\n   importConfigs: [\n     join(__dirname, 'config')\n   ]\n})\nexport class MainConfiguration {\n}\n")),(0,r.kt)("h2",{id:"use-cache"},"Use cache"),(0,r.kt)("h3",{id:"1-configure-cache"},"1. Configure cache"),(0,r.kt)("p",null,"Before use, you need to configure the location of the cache, such as the built-in memory cache, or introduce the Redis cache. Each cache corresponds to a cache Store."),(0,r.kt)("p",null,"The following example code configures an in-memory cache named ",(0,r.kt)("inlineCode",{parentName:"p"},"default"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/config/config.default.ts\nexport default {\n   cacheManager: {\n     clients: {\n       default: {\n         store: 'memory',\n       },\n     },\n   }\n}\n")),(0,r.kt)("p",null,"In the most commonly used scenario, the cache will contain two parameters. Configure ",(0,r.kt)("inlineCode",{parentName:"p"},"max")," to modify the number of caches, and configure ",(0,r.kt)("inlineCode",{parentName:"p"},"ttl")," to modify the expiration time of the cache, in milliseconds."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"  // src/config/config.default.ts\nexport default {\n   cacheManager: {\n     clients: {\n       default: {\n         store: 'memory',\n         options: {\n           max: 100,\n           ttl: 10,\n         },\n       },\n     },\n   }\n}\n")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"The eviction algorithm used by the memory cache is LRU"),(0,r.kt)("li",{parentName:"ul"},"The unit of ",(0,r.kt)("inlineCode",{parentName:"li"},"ttl")," is milliseconds"))),(0,r.kt)("h3",{id:"2-use-cache"},"2. Use cache"),(0,r.kt)("p",null,"Instances can be obtained through the service factory decorator, and caches can be obtained and saved through simple ",(0,r.kt)("inlineCode",{parentName:"p"},"get")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"set")," methods."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { InjectClient, Provide } from '@midwayjs/core';\nimport { CachingFactory, MidwayCache } from '@midwayjs/cache-manager';\n\n@Provide()\nexport class UserService {\n\n   @InjectClient(CachingFactory, 'default')\n   cache: MidwayCache;\n\n   async invoke(name: string, value: string) {\n     // Set up cache\n     await this.cache.set(name, value);\n     // Get cache\n     const data = await this.cache.get(name);\n     // ...\n   }\n}\n\n")),(0,r.kt)("p",null,"Dynamically set ",(0,r.kt)("inlineCode",{parentName:"p"},"ttl")," expiration time."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"await this.cache.set('key', 'value', 1000);\n")),(0,r.kt)("p",null,"To disable cache expiration, you can set the ",(0,r.kt)("inlineCode",{parentName:"p"},"ttl")," configuration property to 0."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"await this.cache.set('key', 'value', 0);\n")),(0,r.kt)("p",null,"Delete a single cache."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"await this.cache.del('key');\n")),(0,r.kt)("p",null,"To clear the entire cache, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"reset")," method."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"await this.cacheManager.reset();\n")),(0,r.kt)("admonition",{type:"danger"},(0,r.kt)("p",{parentName:"admonition"},"Note that clearing the entire cache is very dangerous. If Redis is used as the cache store, the entire Redis data will be cleared.")),(0,r.kt)("p",null,"In addition to decorators, cache instances can also be obtained through the API."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { InjectClient, Provide } from '@midwayjs/core';\nimport { CachingFactory, MidwayCache } from '@midwayjs/cache-manager';\n\n@Provide()\nexport class UserService {\n\n   @Inject()\n   cachingFactory: CachingFactory;\n\n   async invoke() {\n     const caching = await this.cachingFactory.get('default');\n     // ...\n   }\n}\n")),(0,r.kt)("h3",{id:"3-configure-multiple-caches"},"3. Configure multiple caches"),(0,r.kt)("p",null,"Like other components, the component supports configuring multiple cache instances."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/config/config.default.ts\nexport default {\n   cacheManager: {\n     clients: {\n       default: {\n         store: 'memory',\n       },\n       otherCaching: {\n         store: 'memory',\n       }\n     },\n   }\n}\n")),(0,r.kt)("p",null,"Different cache instances can be injected."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { InjectClient, Provide } from '@midwayjs/core';\nimport { CachingFactory, MidwayCache } from '@midwayjs/cache-manager';\n\n@Provide()\nexport class UserService {\n\n   @InjectClient(CachingFactory, 'default')\n   cache: MidwayCache;\n  \n   @InjectClient(CachingFactory, 'otherCaching')\n   customCaching: MidwayCache;\n\n}\n\n")),(0,r.kt)("h3",{id:"4-configure-different-stores"},"4. Configure different Stores"),(0,r.kt)("p",null,"The component is based on ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/node-cache-manager/node-cache-manager"},"cache-manager")," and can be configured with different cache stores. For example, the most common one can be configured with Redis Store."),(0,r.kt)("p",null,"If the project has been configured with a 'Redis', you can quickly create a Redis Store by using the built-in 'createRedisStore' method of the component."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { createRedisStore } from '@midwayjs/cache-manager';\n\n// src/config/config.default.ts\nexport default {\n   cacheManager: {\n     clients: {\n       default: {\n         store: createRedisStore('default'),\n         options: {\n           ttl: 10,\n         }\n       },\n     },\n   },\n   redis: {\n     clients: {\n       default: {\n         port: 6379,\n         host: '127.0.0.1',\n       }\n     }\n   }\n}\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"createRedisStore")," method can pass an already configured redis instance name, and the instance can be reused with the redis component."),(0,r.kt)("h3",{id:"5-configure-third-party-store"},"5. Configure third-party Store"),(0,r.kt)("p",null,"In addition to Redis, users can also choose the Store of Cache-Manager. The list can be found ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/node-cache-manager/node-cache-manager?tab=readme-ov-file#store-engines"},"here"),"."),(0,r.kt)("p",null,"Below is an example of configuring ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/node-cache-manager/node-cache-manager-ioredis-yet"},"node-cache-manager-ioredis-yet"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/config/config.default.ts\nimport { redisStore } from 'cache-manager-ioredis-yet';\n\nexport default {\n  cacheManager: {\n    clients: {\n      default: {\n        store: redisStore,\n        options: {\n          port: 6379,\n          host: 'localhost',\n          ttl: 10,\n        },\n      },\n    },\n  },\n}\n")),(0,r.kt)("h3",{id:"6-multi-level-cache"},"6. Multi-level cache"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/node-cache-manager/node-cache-manager"},"cache-manager")," supports aggregating multiple cache stores to achieve multi-level caching."),(0,r.kt)("p",null,"For example, I can create a multi-level cache to merge multiple cache stores together."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/config/config.default.ts\nimport { createRedisStore } from '@midwayjs/cache-manager';\nexport default {\n  cacheManager: {\n    clients: {\n      memoryCaching: {\n        store: 'memory',\n      },\n      redisCaching: {\n        store: createRedisStore('default'),\n        options: {\n          ttl: 10,\n        }\n      },\n      multiCaching: {\n        store: ['memoryCaching', 'redisCaching'],\n        options: {\n          ttl: 100,\n        },\n      },\n    },\n  },\n  redis: {\n    clients: {\n      default: {\n        port: 6379,\n        host: '127.0.0.1',\n      }\n    }\n  }\n}\n")),(0,r.kt)("p",null,"In this way, the cache instance ",(0,r.kt)("inlineCode",{parentName:"p"},"multiCaching")," contains two levels of cache. The cache priority is from top to bottom. When searching, it will first search ",(0,r.kt)("inlineCode",{parentName:"p"},"memoryCaching"),". If the key does not exist in the memory cache, it will continue to search ",(0,r.kt)("inlineCode",{parentName:"p"},"redisCaching"),"."),(0,r.kt)("h3",{id:"7-use-multi-level-cache"},"7. Use multi-level cache"),(0,r.kt)("p",null,"Similar to ordinary cache, multi-level cache also adds ",(0,r.kt)("inlineCode",{parentName:"p"},"mset"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"mget")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"mdel")," methods in addition to ",(0,r.kt)("inlineCode",{parentName:"p"},"set"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"get")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"del")," methods."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { InjectClient, Provide } from '@midwayjs/core';\nimport { CachingFactory, MidwayMultiCache } from '@midwayjs/cache-manager';\n\nconst userId2 = 456;\nconst key2 = 'user_' + userId;\nconst ttl = 5;\n\n@Provide()\nexport class UserService {\n\n   @InjectClient(CachingFactory, 'multiCaching')\n   multiCache: MidwayMultiCache;\n\n   async invoke() {\n     // Set to all levels of caching\n     await this.multiCache.set('foo2', 'bar2', ttl);\n\n     // Get the key from the highest priority cache Store\n     console.log(await this.multiCache.get('foo2'));\n     // >> \"bar2\"\n\n     // Call the del method of each Store to delete\n     await this.multiCache.del('foo2');\n\n     // Set multiple keys in all caches, including multiple key-value pairs\n     await this.multiCache.mset(\n       [\n         ['foo', 'bar'],\n         ['foo2', 'bar2'],\n       ],\n       ttl\n     );\n\n     // mget() fetches from highest priority cache.\n     // If the first cache does not return all the keys,\n     // the next cache is fetched with the keys that were not found.\n     // This is done recursively until either:\n     // - all have been found\n     // - all caches has been fetched\n     console.log(await this.multiCache.mget('key', 'key2'));\n     // >> ['bar', 'bar2']\n\n     // Call the mdel method of each Store to delete\n     await this.multiCache.mdel('foo', 'foo2');\n   }\n}\n\n")),(0,r.kt)("h3",{id:"8-automatic-refresh"},"8. Automatic refresh"),(0,r.kt)("p",null,"Whether it is a normal cache or a multi-level cache, the background refresh function is supported. You only need to configure the ",(0,r.kt)("inlineCode",{parentName:"p"},"refreshThreshold")," time, in milliseconds."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/config/config.default.ts\nexport default {\n   cacheManager: {\n     clients: {\n       default: {\n         store: 'memory',\n         options: {\n           refreshThreshold: 3 * 1000,\n         },\n       },\n     },\n   }\n}\n")),(0,r.kt)("p",null,"If ",(0,r.kt)("inlineCode",{parentName:"p"},"refreshthreshold")," is set, each time the value is obtained from the cache, the value of ",(0,r.kt)("inlineCode",{parentName:"p"},"ttl")," will be checked. If the remaining ",(0,r.kt)("inlineCode",{parentName:"p"},"ttl")," is less than ",(0,r.kt)("inlineCode",{parentName:"p"},"refreshthreshold"),", the system will update the cache asynchronously and the system will return the old value until",(0,r.kt)("inlineCode",{parentName:"p"}," ttl")," Expired."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"In case of multi-level cache, the store that will be checked for refresh is the one where the key will be found first (highest priority).")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"If the threshold is low and the worker function is slow, the key may expire and you may encounter a racing condition with updating values.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The background refresh mechanism currently does not support providing multiple keys.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"If no ",(0,r.kt)("inlineCode",{parentName:"p"},"ttl")," is set for the key, the refresh mechanism will not be triggered. For redis, the ",(0,r.kt)("inlineCode",{parentName:"p"},"ttl")," is set to -1 by default.")))),(0,r.kt)("h2",{id:"automatic-caching"},"Automatic caching"),(0,r.kt)("h3",{id:"use-decorator-cache-methods"},"Use decorator cache methods"),(0,r.kt)("p",null,"You can cache the results of methods through the ",(0,r.kt)("inlineCode",{parentName:"p"},"@Caching")," decorator, such as caching the results of http responses or service calls."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Provide } from '@midwayjs/core';\nimport { Caching } from '@midwayjs/cache-manager';\n\n@Provide()\nexport class UserService {\n   @Caching('default')\n   async getUser(name: string) {\n     return name;\n   }\n}\n\n")),(0,r.kt)("p",null,"When the ",(0,r.kt)("inlineCode",{parentName:"p"},"getUser")," method is called for the first time, the logic will be executed normally and the result will be returned. The decorator will cache the result. When it is executed for the second time, if the cache is not invalidated, it will be returned directly from the cache."),(0,r.kt)("h3",{id:"specify-cached-ttl"},"Specify cached ttl"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"ttl")," can also be set individually."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Provide } from '@midwayjs/core';\nimport { Caching } from '@midwayjs/cache-manager';\n\n@Provide()\nexport class UserService {\n   @Caching('default', 100)\n   async getUser(name: string) {\n     return name;\n   }\n}\n")),(0,r.kt)("h3",{id:"manually-specify-cache-key"},"Manually specify cache key"),(0,r.kt)("p",null,"If you are not satisfied with the automatically generated key, you can manually specify the cached key."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Provide } from '@midwayjs/core';\nimport { Caching } from '@midwayjs/cache-manager';\n\n@Provide()\nexport class UserService {\n   @Caching('default', 'customKey', 100)\n   async getUser(name: string) {\n     return name;\n   }\n}\n")),(0,r.kt)("h3",{id:"cache-with-logic"},"Cache with logic"),(0,r.kt)("p",null,"If you want to cache based on some specific logic, such as specific parameters or specific headers, you can pass a tool function for logical judgment."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Provide } from '@midwayjs/core';\nimport { Caching } from '@midwayjs/cache-manager';\n\nfunction cacheBy({methodArgs, ctx, target}) {\n   if (methodArgs[0] === 'harry' || methodArgs[0] === 'mike') {\n     return 'cache1';\n   }\n}\n\n@Provide()\nexport class UserService {\n   @Caching('default', cacheBy, 100)\n   async getUser(name: string) {\n     return 'hello ' + name;\n   }\n}\n")),(0,r.kt)("p",null,"In the above example, the ",(0,r.kt)("inlineCode",{parentName:"p"},"cacheBy")," method customizes the caching logic. When the method input parameter value is ",(0,r.kt)("inlineCode",{parentName:"p"},"harry")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"mike"),", the cached ",(0,r.kt)("inlineCode",{parentName:"p"},"key")," will be returned, while for other parameters, the cache will be skipped."),(0,r.kt)("p",null,"The result of execution at this time is:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"await userService.getUser('harry')); // hello harry\nawait userService.getUser('mike')); // hello harry\nawait userService.getUser('lucy')); // hello lucy\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"@Caching")," decorator can pass a method in the second parameter. The input parameter options of this method are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"methodArgs")," The actual parameters of the currently called method"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ctx")," If it is a request scope, it is the context object of the current call. If it is a singleton, the object is an empty object."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"target")," The currently called instance")),(0,r.kt)("p",null,"The return value of the method is a string or a Boolean value. When a string is returned, it means that the result of the method is cached with the key. When ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," is returned, it means that the cache is skipped."),(0,r.kt)("p",null,"By judging these parameters, we can implement very flexible custom caching logic."),(0,r.kt)("h2",{id:"common-problem"},"Common problem"),(0,r.kt)("h3",{id:"1-memory-cache-set-and-get-cannot-obtain-the-same-value-under-multi-process"},"1. Memory cache set and get cannot obtain the same value under multi-process"),(0,r.kt)("p",null,"This is a normal phenomenon, the data of each process is independent and is only saved in the current process. If you need cross-process caching, use a distributed cache system like Redis."))}m.isMDXComponent=!0}}]);