"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[95779],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>k});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(n),d=a,k=p["".concat(s,".").concat(d)]||p[d]||m[d]||o;return n?r.createElement(k,i(i({ref:t},c),{},{components:n})):r.createElement(k,i({ref:t},c))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:a,i[1]=l;for(var u=2;u<o;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>i});var r=n(67294),a=n(86010);const o={tabItem:"tabItem_Ymn6"};function i(e){let{children:t,hidden:n,className:i}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(o.tabItem,i),hidden:n},t)}},65488:(e,t,n)=>{n.d(t,{Z:()=>d});var r=n(87462),a=n(67294),o=n(86010),i=n(12466),l=n(70989),s=n(72389);const u={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function c(e){let{className:t,block:n,selectedValue:l,selectValue:s,tabValues:c}=e;const p=[],{blockElementScrollPositionUntilNextRender:m}=(0,i.o5)(),d=e=>{const t=e.currentTarget,n=p.indexOf(t),r=c[n].value;r!==l&&(m(t),s(r))},k=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=p.indexOf(e.currentTarget)+1;t=p[n]??p[0];break}case"ArrowLeft":{const n=p.indexOf(e.currentTarget)-1;t=p[n]??p[p.length-1];break}}t?.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":n},t)},c.map((e=>{let{value:t,label:n,attributes:i}=e;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:l===t?0:-1,"aria-selected":l===t,key:t,ref:e=>p.push(e),onKeyDown:k,onClick:d},i,{className:(0,o.Z)("tabs__item",u.tabItem,i?.className,{"tabs__item--active":l===t})}),n??t)})))}function p(e){let{lazy:t,children:n,selectedValue:r}=e;const o=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===r));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},o.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==r}))))}function m(e){const t=(0,l.Y)(e);return a.createElement("div",{className:(0,o.Z)("tabs-container",u.tabList)},a.createElement(c,(0,r.Z)({},e,t)),a.createElement(p,(0,r.Z)({},e,t)))}function d(e){const t=(0,s.Z)();return a.createElement(m,(0,r.Z)({key:String(t)},e))}},70989:(e,t,n)=>{n.d(t,{Y:()=>m});var r=n(67294),a=n(16550),o=n(91980),i=n(67392),l=n(50012);function s(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:a}}=e;return{value:t,label:n,attributes:r,default:a}}))}function u(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??s(n);return function(e){const t=(0,i.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function c(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function p(e){let{queryString:t=!1,groupId:n}=e;const i=(0,a.k6)(),l=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,o._X)(l),(0,r.useCallback)((e=>{if(!l)return;const t=new URLSearchParams(i.location.search);t.set(l,e),i.replace({...i.location,search:t.toString()})}),[l,i])]}function m(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,o=u(e),[i,s]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!c({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:o}))),[m,d]=p({queryString:n,groupId:a}),[k,f]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,o]=(0,l.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:a}),g=(()=>{const e=m??k;return c({value:e,tabValues:o})?e:null})();(0,r.useLayoutEffect)((()=>{g&&s(g)}),[g]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!c({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);s(e),d(e),f(e)}),[d,f,o]),tabValues:o}}},55204:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>k,frontMatter:()=>l,metadata:()=>u,toc:()=>p});var r=n(87462),a=(n(67294),n(3905)),o=n(65488),i=n(85162);const l={},s="MikroORM",u={unversionedId:"extensions/mikro",id:"extensions/mikro",title:"MikroORM",description:"This section describes how users use MikroORM in midway.  MikroORM is the TypeScript ORM of Node.js based on data mapper, working unit and identity mapping mode.",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/extensions/mikro.md",sourceDirName:"extensions",slug:"/extensions/mikro",permalink:"/en/docs/extensions/mikro",draft:!1,editUrl:"https://github.com/midwayjs/midway/tree/main/site/docs/extensions/mikro.md",tags:[],version:"current",frontMatter:{},sidebar:"component",previous:{title:"TableStore",permalink:"/en/docs/extensions/tablestore"},next:{title:"gRPC",permalink:"/en/docs/extensions/grpc"}},c={},p=[{value:"About upgrade",id:"about-upgrade",level:2},{value:"Installation Components",id:"installation-components",level:2},{value:"Introducing components",id:"introducing-components",level:2},{value:"Basic use",id:"basic-use",level:2},{value:"Directory structure",id:"directory-structure",level:3},{value:"Define Entity",id:"define-entity",level:3},{value:"Configure the data source",id:"configure-the-data-source",level:3},{value:"CRUD Operations",id:"crud-operations",level:3},{value:"Advanced Features",id:"advanced-features",level:2},{value:"Get data source",id:"get-data-source",level:3},{value:"Logging",id:"logging",level:3},{value:"Frequently Asked Questions",id:"frequently-asked-questions",level:2},{value:"1. Node version",id:"1-node-version",level:3},{value:"2. Identity Map",id:"2-identity-map",level:3},{value:"3. Multi-dataSource support",id:"3-multi-datasource-support",level:3}],m={toc:p},d="wrapper";function k(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"mikroorm"},"MikroORM"),(0,a.kt)("p",null,"This section describes how users use MikroORM in midway.  MikroORM is the TypeScript ORM of Node.js based on data mapper, working unit and identity mapping mode."),(0,a.kt)("p",null,"The MikroORM official website document is ",(0,a.kt)("a",{parentName:"p",href:"https://mikro-orm.io/docs"},"here"),"."),(0,a.kt)("p",null,"Related information:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Description"),(0,a.kt)("th",{parentName:"tr",align:null}))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Can be used for standard projects"),(0,a.kt)("td",{parentName:"tr",align:null},"\u2705")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Can be used for Serverless"),(0,a.kt)("td",{parentName:"tr",align:null},"\u2705")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Can be used for integration"),(0,a.kt)("td",{parentName:"tr",align:null},"\u2705")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Contains independent main framework"),(0,a.kt)("td",{parentName:"tr",align:null},"\u274c")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Contains independent logs"),(0,a.kt)("td",{parentName:"tr",align:null},"\u274c")))),(0,a.kt)("h2",{id:"about-upgrade"},"About upgrade"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Starting from the ",(0,a.kt)("inlineCode",{parentName:"li"},"v3.14.0")," version of the component, mikro v5/v6 versions are supported. Since there are major changes from mikro v5 to v6, if you want to upgrade from an old version of mikro, please read ","[Upgrading from v5 to v6]","(https:/ /mikro-orm.io/docs/upgrading-v5-to-v6)"),(0,a.kt)("li",{parentName:"ul"},"Component examples updated to v6")),(0,a.kt)("h2",{id:"installation-components"},"Installation Components"),(0,a.kt)("p",null,"Install mikro components to provide access to mikro-orm."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ npm i @midwayjs/mikro@3 @mikro-orm/core --save\n")),(0,a.kt)("p",null,"Or reinstall the following dependencies in ",(0,a.kt)("inlineCode",{parentName:"p"},"package.json"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "dependencies": {\n    "@midwayjs/mikro": "^3.0.0",\n    "@mikro-orm/core": "^6.0.2",\n    // ...\n  },\n  "devDependencies": {\n    // ...\n  }\n}\n')),(0,a.kt)("p",null,"At the same time, it is also necessary to introduce the adaptation package of the corresponding database."),(0,a.kt)("p",null,"For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'{\n  "dependencies": {\n    // sqlite\n    "@mikro-orm/sqlite": "^6.0.2",\n\n    // mysql\n    "@mikro-orm/mysql": "^6.0.2",\n  },\n  "devDependencies": {\n    // ...\n  }\n}\n')),(0,a.kt)("p",null,"For more information about drivers, see ",(0,a.kt)("a",{parentName:"p",href:"https://mikro-orm.io/docs/usage-with-sql/"},"Official documentation"),"."),(0,a.kt)("h2",{id:"introducing-components"},"Introducing components"),(0,a.kt)("p",null,"The mikro component is introduced in ",(0,a.kt)("inlineCode",{parentName:"p"},"src/configuration.ts"),", as an example."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"// configuration.ts\nimport { Configuration } from '@midwayjs/core';\nimport * as mikro from '@midwayjs/mikro';\nimport { join } from 'path';\n\n@Configuration({\n  imports: [\n    // ...\n    Mikro // load mikro components\n  ],\n  importConfigs: [\n    join(__dirname, './config')\n  ]\n})\nexport class MainConfiguration {\n\n}\n")),(0,a.kt)("h2",{id:"basic-use"},"Basic use"),(0,a.kt)("p",null,"Similar to other orm frameworks, they are divided into several steps:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("ol",{parentName:"li"},(0,a.kt)("li",{parentName:"ol"},"Define Entity"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("ol",{parentName:"li",start:2},(0,a.kt)("li",{parentName:"ol"},"Configure the data source"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("ol",{parentName:"li",start:3},(0,a.kt)("li",{parentName:"ol"},"Get the EntityModel to call")))),(0,a.kt)("p",null,"For more information about Entity code, see ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/midwayjs/midway/tree/main/packages/mikro/test/fixtures/base-fn-origin"},"Example"),"."),(0,a.kt)("h3",{id:"directory-structure"},"Directory structure"),(0,a.kt)("p",null,"A basic reference directory structure is as follows."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"MyProject\n\u251c\u2500\u2500 src\n\u2502   \u251c\u2500\u2500 config\n\u2502   \u2502   \u2514\u2500\u2500 config.default.ts\n\u2502   \u251c\u2500\u2500 entity\n\u2502   \u2502   \u251c\u2500\u2500 book.entity.ts\n\u2502   \u2502   \u251c\u2500\u2500 index.ts\n\u2502   \u2502   \u2514\u2500\u2500 base.ts\n\u2502   \u251c\u2500\u2500 configuration.ts\n\u2502   \u2514\u2500\u2500 service\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 tsconfig.json\n")),(0,a.kt)("h3",{id:"define-entity"},"Define Entity"),(0,a.kt)("p",null,"Entity that defines the basis."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/entity/BaseEntity.ts\nimport { PrimaryKey, Property } from '@mikro-orm/core';\n\nexport abstract class BaseEntity {\n\n  @PrimaryKey()\n  id! : number;\n\n  @Property()\n  createdAt: Date = new Date();\n\n  @Property({ onUpdate: () => new Date() })\n  updatedAt: Date = new Date();\n\n}\n")),(0,a.kt)("p",null,"Define the actual Entity, including one-to-many, many-to-many relationships."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/entity/book.entity.ts\nimport { Cascade, Collection, Entity, ManyToMany, ManyToOne, Property } from '@mikro-orm/core';\nimport { Author, BookTag, Publisher } from './index';\nimport { BaseEntity } from './base';\n\n@Entity()\nexport class Book extends BaseEntity {\n\n  @Property()\n  title: string;\n\n  @ManyToOne(() => Author)\n  author: Author;\n\n  @ManyToOne(() => Publisher, { cascade: [Cascade.PERSIST, Cascade.REMOVE], nullable: true })\n  publisher?: Publisher;\n\n  @ManyToMany(() => BookTag)\n  tags = new Collection<BookTag>(this);\n\n  @Property({ nullable: true })\n  metaObject?: object;\n\n  @Property({ nullable: true })\n  metaArray?: any[];\n\n  @Property({ nullable: true })\n  metaArrayOfStrings?: string[];\n\n  constructor(title: string, author: Author) {\n    super();\n    this.title = title;\n    this.author = author;\n  }\n\n}\n")),(0,a.kt)("h3",{id:"configure-the-data-source"},"Configure the data source"),(0,a.kt)("p",null,"mikro v5 and v6 are slightly different."),(0,a.kt)(o.Z,{mdxType:"Tabs"},(0,a.kt)(i.Z,{value:"v6",label:"mikro v6",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/config/config.default\nimport { Author, BaseEntity, Book, BookTag, Publisher } from '../entity';\nimport { join } from 'path';\nimport { SqliteDriver } from '@mikro-orm/sqlite';\n\nexport default (appInfo) => {\n  return {\n    mikro: {\n      dataSource: {\n        default: {\n          dbName: join(__dirname, '../../test.sqlite'),\n          driver: SqliteDriver,     // SQLite is used as an example here.\n          allowGlobalContext: true,\n          // Object format\n          entities: [Author, Book, BookTag, Publisher, BaseEntity],\n          // The following scanning form is supported. For compatibility, we can match both .js and .ts files at the same time\n          entities: [\n            'entity',                        // Specify the directory\n            '**/entity/*.entity.{j,t}s',     // Wildcard with suffix matching\n          ],\n        }\n      }\n    }\n  }\n}\n"))),(0,a.kt)(i.Z,{value:"v5",label:"mikro v5",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"\n// src/config/config.default\nimport { Author, BaseEntity, Book, BookTag, Publisher } from '../entity';\nimport { join } from 'path';\n\nexport default (appInfo) => {\n  return {\n    mikro: {\n      dataSource: {\n        default: {\n          dbName: join(__dirname, '../../test.sqlite')\n          Type: 'sqlite', // SQLite is used as an example here.\n          allowGlobalContext: true,\n          // Object format\n          entities: [Author, Book, BookTag, Publisher, BaseEntity],\n          // The following scanning form is supported. For compatibility, we can match both .js and .ts files at the same time\n          entities: [\n            'entity',                        // Specify the directory\n            '**/entity/*.entity.{j,t}s',     // Wildcard with suffix matching\n          ],\n        }\n      }\n    }\n  }\n}\n\n")))),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"The ",(0,a.kt)("inlineCode",{parentName:"p"},"entities")," field configuration of mikro has been processed by the framework, please do not refer to the original document.")),(0,a.kt)("h3",{id:"crud-operations"},"CRUD Operations"),(0,a.kt)("p",null,"Use ",(0,a.kt)("inlineCode",{parentName:"p"},"InjectRepository")," to inject ",(0,a.kt)("inlineCode",{parentName:"p"},"Repository")," to perform simple query operations. And use ",(0,a.kt)("inlineCode",{parentName:"p"},"InjectEntityManager")," to get the instance of ",(0,a.kt)("inlineCode",{parentName:"p"},"EntityManager"),", to perform creating, updating and deleting operations.\nYou can also get ",(0,a.kt)("inlineCode",{parentName:"p"},"EntityManager")," by calling ",(0,a.kt)("inlineCode",{parentName:"p"},"repository.getEntityManger()"),"."),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("ul",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("ol",{parentName:"li"},(0,a.kt)("li",{parentName:"ol"},"Since v5.7, ",(0,a.kt)("inlineCode",{parentName:"li"},"persist")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"flush")," etc. on ",(0,a.kt)("inlineCode",{parentName:"li"},"Repository")," (shortcuts to methods on ",(0,a.kt)("inlineCode",{parentName:"li"},"EntityManager"),") were marked as ",(0,a.kt)("em",{parentName:"li"},"deprecated"),", and ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/mikro-orm/mikro-orm/discussions/3989"},"planned to remove them in v6"),". Please use those APIs on ",(0,a.kt)("inlineCode",{parentName:"li"},"EntityManger")," directly instead of on ",(0,a.kt)("inlineCode",{parentName:"li"},"Repository"),"."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("ol",{parentName:"li",start:2},(0,a.kt)("li",{parentName:"ol"},"v6 has been completely ",(0,a.kt)("a",{parentName:"li",href:"https://mikro-orm.io/docs/upgrading-v5-to-v6#removed-methods-from-entityrepository"},"deprecated")," the above interface"))))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/service/book.service.ts\nimport { Book } from './entity/book.entity';\nimport { Provide } from '@midwayjs/core';\nimport { InjectEntityManager, InjectRepository } from '@midwayjs/mikro';\nimport { QueryOrder } from '@mikro-orm/core';\nimport { EntityManager, EntityRepository } from '@mikro-orm/mysql'; // should be imported from driver specific packages\n\n@Provide()\nexport class BookService {\n\n  @InjectRepository(Book)\n  bookRepository: EntityRepository<Book>;\n\n  @InjectEntityManager()\n  em: EntityManager;\n\n  async queryByRepo() {\n    // query with Repository\n    const books = await this.bookRepository.findAll({\n      populate: ['author'],\n      orderBy: { title: QueryOrder.DESC },\n      limit: 20,\n    });\n    return books;\n  }\n\n  async createBook() {\n    const book = new Book({ title: 'b1', author: { name: 'a1', email: 'e1' } });\n    // mark book as persisted\n    this.em.persist(book);\n    // persist all changes to database\n    await this.em.flush();\n    return book;\n  }\n}\n")),(0,a.kt)("h2",{id:"advanced-features"},"Advanced Features"),(0,a.kt)("h3",{id:"get-data-source"},"Get data source"),(0,a.kt)("p",null,"The data source is the created data source object, which we can obtain by injecting the built-in data source manager."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Configuration } from '@midwayjs/core';\nimport { MikroDataSourceManager } from '@midwayjs/mikro';\n\n@Configuration({\n  //...\n})\nexport class MainConfiguration {\n\n  async onReady(container: IMidwayContainer) {\n    const dataSourceManager = await container. getAsync(MikroDataSourceManager);\n    const orm = dataSourceManager.getDataSource('default');\n    const connection = orm.em.getConnection();\n    //...\n  }\n}\n")),(0,a.kt)("p",null,"Starting with v3.8.0, it is also possible to inject via a decorator."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Configuration } from '@midwayjs/core';\nimport { InjectDataSource } from '@midwayjs/mikro';\nimport { MikroORM, IDatabaseDriver, Connection } from '@mikro-orm/core';\n\n@Configuration({\n  //...\n})\nexport class MainConfiguration {\n\n  // Inject the default data source\n  @InjectDataSource()\n  defaultDataSource: MikroORM<IDatabaseDriver<Connection>>;\n\n  // inject custom data source\n  @InjectDataSource('default1')\n  customDataSource: MikroORM<IDatabaseDriver<Connection>>;\n\n  async onReady(container: IMidwayContainer) {\n    //...\n  }\n}\n")),(0,a.kt)("h3",{id:"logging"},"Logging"),(0,a.kt)("p",null,"Midway's logger can be added to mikro through configuration to record SQL and other information."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/config/config.default.ts\nexporg default {\n    midwayLogger: {\n    clients: {\n      mikroLogger: {\n        // ...\n      }\n    }\n  },\n  mikro: {\n    dataSource: {\n      default: {\n        entities: [Author, Book, BookTag, Publisher, BaseEntity],\n        // ...\n        logger: 'mikroLogger',\n      }\n    },\n  }\n}\n")),(0,a.kt)("p",null,"By default mikro comes with colors and also writes them to files, which can be turned off through configuration."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/config/config.default.ts\nexporg default {\n    midwayLogger: {\n    clients: {\n      mikroLogger: {\n        transports: {\n          console: {\n            autoColors: false,\n          }\uff0c\n          file: {\n            fileLogName: 'mikro.log'\uff0c\n          },\n        },\n      }\n    }\n  },\n  mikro: {\n    dataSource: {\n      default: {\n        entities: [Author, Book, BookTag, Publisher, BaseEntity],\n        // ...\n        logger: 'mikroLogger',\n        colors: false,\n      }\n    },\n  }\n}\n")),(0,a.kt)("h2",{id:"frequently-asked-questions"},"Frequently Asked Questions"),(0,a.kt)("h3",{id:"1-node-version"},"1. Node version"),(0,a.kt)("p",null,"Mikro-orm there are some restrictions on Node version, it must be ",(0,a.kt)("inlineCode",{parentName:"p"},">= 14.0.0"),", so do the usage rules of ",(0,a.kt)("inlineCode",{parentName:"p"},"@midwayjs/mikro")," components."),(0,a.kt)("h3",{id:"2-identity-map"},"2. Identity Map"),(0,a.kt)("p",null,"Mikro-orm internal query has a concept of ",(0,a.kt)("a",{parentName:"p",href:"https://mikro-orm.io/docs/identity-map"},"Identity Map"),". Midway has added this function to all built-in Framework middleware. If it is used in non-requesting link call scenarios, such as ",(0,a.kt)("inlineCode",{parentName:"p"},"src/configuration"),", the ",(0,a.kt)("inlineCode",{parentName:"p"},"allowGlobalContext")," option can be turned on."),(0,a.kt)("h3",{id:"3-multi-datasource-support"},"3. Multi-dataSource support"),(0,a.kt)("p",null,"Like other databases, Midway supports the configuration of multiple data sources."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/config/config.default\nimport { Author, BaseEntity, Book, BookTag, Publisher } from '../entity';\nimport { SqlHighlighter } from '@mikro-orm/sql-highlighter';\nimport { join } from 'path';\n\nexport default (appInfo) => {\n  return {\n    mikro: {\n      dataSource: {\n        custom1: {\n          // ...\n        },\n        custom2: {\n          // ...\n        }\n      }\n    }\n  }\n}\n")),(0,a.kt)("p",null,"Note which data source you need to pass from when using."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"// ...\n\n@Provide()\nexport class BookController {\n\n  @InjectRepository(Book, 'custom1')\n  bookRepository: EntityRepository<Book>;\n\n  async findBookAndQuery() {\n    // ...\n  }\n}\n")))}k.isMDXComponent=!0}}]);